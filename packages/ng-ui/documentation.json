{
    "pipes": [],
    "interfaces": [
        {
            "name": "FilterCriteria",
            "id": "interface-FilterCriteria-d5d90aa64fe356d6f0e6374f869e6f45e0e1aaec741091cd5ca37e845e09d8f19e22994ce9ff3f56893774284a42d01bf80fdf072e45f85c81681193cf7af156",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface TableDataSourceState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filteredData: any[];\n    headers: string[];\n    paginationCriteria: PaginationCriteria;\n    preferenceCriteria: PreferenceCriteria;\n    selectedRows: any[];\n    sortCriteria: SortCriteria;\n    filterCriteria: FilterCriteria;\n}\n\nexport interface PaginationCriteria {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n\nexport interface FilterCriteria {\n    column: string;\n    value: string;\n}\n\nexport interface SortCriteria {\n    key: string;\n    direction: 'ascending' | 'descending';\n}\n\nexport interface PreferenceCriteria {\n    visibleColumns: string[];\n    groupByColumn: string;\n}\n\nexport interface SettingCriteria extends PreferenceCriteria {\n    column: string;\n}\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Item",
            "id": "interface-Item-8913ec05226a02bfa27ea59c7944e6cee7f50d4f1c1788fe3097560f7a488e04f156a290a703fd2a23ce563998878b7196c1cba0165bd6eaf55925ed25cf4b82",
            "file": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\ninterface Item {\n    name: string;\n    age: number;\n}\n\n@Component({\n    selector: 'app-sortable-table-example',\n    template: `\n        <table>\n            <thead>\n                <tr>\n                    <th (click)=\"sort('name')\">Name</th>\n                    <th (click)=\"sort('age')\">Age</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let item of sortedItems\">\n                    <td>{{ item.name }}</td>\n                    <td>{{ item.age }}</td>\n                </tr>\n            </tbody>\n        </table>\n    `,\n    standalone: true,\n    imports: [CommonModule],\n})\nexport class SortableTableExampleComponent {\n    items: Item[] = [\n        { name: 'John Doe', age: 28 },\n        { name: 'Jane Smith', age: 34 },\n        { name: 'Sam Green', age: 22 },\n        { name: 'Emily Brown', age: 42 },\n    ];\n\n    sortedItems: Item[] = [...this.items];\n    currentSortKey: keyof Item = 'name';\n    currentSortDirection: 'asc' | 'desc' = 'asc';\n\n    sort(key: keyof Item): void {\n        if (this.currentSortKey === key) {\n            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.currentSortDirection = 'asc';\n        }\n        this.currentSortKey = key;\n        this.sortedItems.sort((a, b) => {\n            if (a[key] < b[key]) return this.currentSortDirection === 'asc' ? -1 : 1;\n            if (a[key] > b[key]) return this.currentSortDirection === 'asc' ? 1 : -1;\n            return 0;\n        });\n    }\n}\n\nconst meta: Meta<SortableTableExampleComponent> = {\n    component: SortableTableExampleComponent,\n    title: '(TW) Angular UI / Directives / Sortable Table',\n};\nexport default meta;\ntype Story = StoryObj<SortableTableExampleComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Pagination",
            "id": "interface-Pagination-085dcdfe7db512039b765867eb6e980f2d83faa8debae33781a1a0dfc6f9b502c5ea8241ddb258d628e7127548e9c3714d567be0d15c0fa274455a65073227f1",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/pagination.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Pagination {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PaginationCriteria",
            "id": "interface-PaginationCriteria-d5d90aa64fe356d6f0e6374f869e6f45e0e1aaec741091cd5ca37e845e09d8f19e22994ce9ff3f56893774284a42d01bf80fdf072e45f85c81681193cf7af156",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface TableDataSourceState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filteredData: any[];\n    headers: string[];\n    paginationCriteria: PaginationCriteria;\n    preferenceCriteria: PreferenceCriteria;\n    selectedRows: any[];\n    sortCriteria: SortCriteria;\n    filterCriteria: FilterCriteria;\n}\n\nexport interface PaginationCriteria {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n\nexport interface FilterCriteria {\n    column: string;\n    value: string;\n}\n\nexport interface SortCriteria {\n    key: string;\n    direction: 'ascending' | 'descending';\n}\n\nexport interface PreferenceCriteria {\n    visibleColumns: string[];\n    groupByColumn: string;\n}\n\nexport interface SettingCriteria extends PreferenceCriteria {\n    column: string;\n}\n",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PreferenceCriteria",
            "id": "interface-PreferenceCriteria-d5d90aa64fe356d6f0e6374f869e6f45e0e1aaec741091cd5ca37e845e09d8f19e22994ce9ff3f56893774284a42d01bf80fdf072e45f85c81681193cf7af156",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface TableDataSourceState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filteredData: any[];\n    headers: string[];\n    paginationCriteria: PaginationCriteria;\n    preferenceCriteria: PreferenceCriteria;\n    selectedRows: any[];\n    sortCriteria: SortCriteria;\n    filterCriteria: FilterCriteria;\n}\n\nexport interface PaginationCriteria {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n\nexport interface FilterCriteria {\n    column: string;\n    value: string;\n}\n\nexport interface SortCriteria {\n    key: string;\n    direction: 'ascending' | 'descending';\n}\n\nexport interface PreferenceCriteria {\n    visibleColumns: string[];\n    groupByColumn: string;\n}\n\nexport interface SettingCriteria extends PreferenceCriteria {\n    column: string;\n}\n",
            "properties": [
                {
                    "name": "groupByColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "visibleColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SettingCriteria",
            "id": "interface-SettingCriteria-d5d90aa64fe356d6f0e6374f869e6f45e0e1aaec741091cd5ca37e845e09d8f19e22994ce9ff3f56893774284a42d01bf80fdf072e45f85c81681193cf7af156",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface TableDataSourceState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filteredData: any[];\n    headers: string[];\n    paginationCriteria: PaginationCriteria;\n    preferenceCriteria: PreferenceCriteria;\n    selectedRows: any[];\n    sortCriteria: SortCriteria;\n    filterCriteria: FilterCriteria;\n}\n\nexport interface PaginationCriteria {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n\nexport interface FilterCriteria {\n    column: string;\n    value: string;\n}\n\nexport interface SortCriteria {\n    key: string;\n    direction: 'ascending' | 'descending';\n}\n\nexport interface PreferenceCriteria {\n    visibleColumns: string[];\n    groupByColumn: string;\n}\n\nexport interface SettingCriteria extends PreferenceCriteria {\n    column: string;\n}\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "PreferenceCriteria"
            ]
        },
        {
            "name": "SortableItem",
            "id": "interface-SortableItem-38110c3e0875924586860aca57b742c48733a1c6c3e08163bbc86c5d557a13b2b97b6e73bbfc47ec2249ce091febe53640aa5467c78cf90b9650d12dc21bd0ac",
            "file": "projects/ng-lib/src/lib/directives/sorting.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\n\nexport interface SortableItem {\n    id: string;\n    [key: string]: any;\n}\n\n@Directive({\n    selector: '[adk-sorting]',\n    exportAs: 'adkSorting',\n    standalone: true,\n})\nexport class AdkSorting<T extends SortableItem> {\n    #items = signal<T[]>([]);\n    #sortKey = signal<string | null>(null);\n    #sortDirection = signal<'asc' | 'desc'>('asc');\n\n    sortedItems = computed(() => {\n        const items = [...this.#items()];\n        const key = this.#sortKey();\n        const direction = this.#sortDirection();\n\n        if (!key) return items;\n\n        return items.sort((a, b) => {\n            const aValue = a[key];\n            const bValue = b[key];\n\n            if (aValue < bValue) {\n                return direction === 'asc' ? -1 : 1;\n            } else if (aValue > bValue) {\n                return direction === 'asc' ? 1 : -1;\n            } else {\n                return 0;\n            }\n        });\n    });\n\n    /**\n     * Add items to the list\n     * @param newItems\n     */\n    add(...newItems: T[]): void {\n        this.#items.update((items) => [...items, ...newItems]);\n    }\n\n    /**\n     * Set the sorting key and direction\n     * @param key\n     * @param direction\n     */\n    sort(key: string, direction: 'asc' | 'desc'): void {\n        this.#sortKey.set(key);\n        this.#sortDirection.set(direction);\n    }\n\n    /**\n     * Clear the sorting\n     */\n    clearSort(): void {\n        this.#sortKey.set(null);\n        this.#sortDirection.set('asc');\n    }\n\n    /**\n     * Get the current sorting key\n     */\n    getSortKey(): string | null {\n        return this.#sortKey();\n    }\n\n    /**\n     * Get the current sorting direction\n     */\n    getSortDirection(): 'asc' | 'desc' {\n        return this.#sortDirection();\n    }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-38110c3e0875924586860aca57b742c48733a1c6c3e08163bbc86c5d557a13b2b97b6e73bbfc47ec2249ce091febe53640aa5467c78cf90b9650d12dc21bd0ac",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "SortCriteria",
            "id": "interface-SortCriteria-d5d90aa64fe356d6f0e6374f869e6f45e0e1aaec741091cd5ca37e845e09d8f19e22994ce9ff3f56893774284a42d01bf80fdf072e45f85c81681193cf7af156",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface TableDataSourceState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filteredData: any[];\n    headers: string[];\n    paginationCriteria: PaginationCriteria;\n    preferenceCriteria: PreferenceCriteria;\n    selectedRows: any[];\n    sortCriteria: SortCriteria;\n    filterCriteria: FilterCriteria;\n}\n\nexport interface PaginationCriteria {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n\nexport interface FilterCriteria {\n    column: string;\n    value: string;\n}\n\nexport interface SortCriteria {\n    key: string;\n    direction: 'ascending' | 'descending';\n}\n\nexport interface PreferenceCriteria {\n    visibleColumns: string[];\n    groupByColumn: string;\n}\n\nexport interface SettingCriteria extends PreferenceCriteria {\n    column: string;\n}\n",
            "properties": [
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"ascending\" | \"descending\"",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TableDataSourceState",
            "id": "interface-TableDataSourceState-d5d90aa64fe356d6f0e6374f869e6f45e0e1aaec741091cd5ca37e845e09d8f19e22994ce9ff3f56893774284a42d01bf80fdf072e45f85c81681193cf7af156",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface TableDataSourceState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filteredData: any[];\n    headers: string[];\n    paginationCriteria: PaginationCriteria;\n    preferenceCriteria: PreferenceCriteria;\n    selectedRows: any[];\n    sortCriteria: SortCriteria;\n    filterCriteria: FilterCriteria;\n}\n\nexport interface PaginationCriteria {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n\nexport interface FilterCriteria {\n    column: string;\n    value: string;\n}\n\nexport interface SortCriteria {\n    key: string;\n    direction: 'ascending' | 'descending';\n}\n\nexport interface PreferenceCriteria {\n    visibleColumns: string[];\n    groupByColumn: string;\n}\n\nexport interface SettingCriteria extends PreferenceCriteria {\n    column: string;\n}\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "draggedColIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "filterCriteria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterCriteria",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "filteredData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "paginationCriteria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginationCriteria",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "preferenceCriteria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PreferenceCriteria",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sortCriteria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortCriteria",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TableState",
            "id": "interface-TableState-d5d90aa64fe356d6f0e6374f869e6f45e0e1aaec741091cd5ca37e845e09d8f19e22994ce9ff3f56893774284a42d01bf80fdf072e45f85c81681193cf7af156",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface TableDataSourceState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filteredData: any[];\n    headers: string[];\n    paginationCriteria: PaginationCriteria;\n    preferenceCriteria: PreferenceCriteria;\n    selectedRows: any[];\n    sortCriteria: SortCriteria;\n    filterCriteria: FilterCriteria;\n}\n\nexport interface PaginationCriteria {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n\nexport interface FilterCriteria {\n    column: string;\n    value: string;\n}\n\nexport interface SortCriteria {\n    key: string;\n    direction: 'ascending' | 'descending';\n}\n\nexport interface PreferenceCriteria {\n    visibleColumns: string[];\n    groupByColumn: string;\n}\n\nexport interface SettingCriteria extends PreferenceCriteria {\n    column: string;\n}\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "draggedColIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "filterDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "initialDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "initialHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "preferences",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sortDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-d5d90aa64fe356d6f0e6374f869e6f45e0e1aaec741091cd5ca37e845e09d8f19e22994ce9ff3f56893774284a42d01bf80fdf072e45f85c81681193cf7af156",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "TableDataSourceService",
            "id": "injectable-TableDataSourceService-77b7c2a60361ae170ae4dabbd199aa5ff9e5884ef8df50940334a2efae02061b6693304c9d16d37e992a2ac1bce129224f14bdb39923af85dde754389f2805a7",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/table-datasource.service.ts",
            "properties": [
                {
                    "name": "#state",
                    "defaultValue": "signal<TableState>({\n        dataSource: [],\n        draggedColIndex: null,\n        filterDataSource: { column: '', value: '' },\n        headers: [],\n        initialDataSource: [],\n        initialHeaders: [],\n        pagination: {\n            currentPage: 1,\n            totalPages: 1,\n            pageSize: 10,\n        },\n        preferences: {\n            visibleColumns: [],\n            groupBy: undefined,\n        },\n        selectedRows: [],\n        sortDataSource: { key: '', direction: 'ascending' },\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filterRows",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "computed(() => this.#state())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dragDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTableState",
                    "args": [],
                    "optional": false,
                    "returnType": "TableState",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialFilterSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentPage",
                    "args": [
                        {
                            "name": "action",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDataSourcePagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "action",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGroupBy",
                    "args": [
                        {
                            "name": "groupBy",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupBy",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeaders",
                    "args": [
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPaginationState",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Partial<Pagination>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Partial<Pagination>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPreferences",
                    "args": [
                        {
                            "name": "action",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedRows",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTableDataSource",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortDataSource",
                    "args": [
                        {
                            "name": "sortDataSource",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortDataSource",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectedAllRows",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateChangedCurrentPage",
                    "args": [
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, computed, signal } from '@angular/core';\nimport { Pagination, TableState } from './models';\n\nimport { RowData } from '../../../tw-form-ui';\nimport { SortRowsUtil } from './utils/sort-rows.util';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TableDataSourceService {\n    #state = signal<TableState>({\n        dataSource: [],\n        draggedColIndex: null,\n        filterDataSource: { column: '', value: '' },\n        headers: [],\n        initialDataSource: [],\n        initialHeaders: [],\n        pagination: {\n            currentPage: 1,\n            totalPages: 1,\n            pageSize: 10,\n        },\n        preferences: {\n            visibleColumns: [],\n            groupBy: undefined,\n        },\n        selectedRows: [],\n        sortDataSource: { key: '', direction: 'ascending' },\n    });\n\n    readonly state = computed(() => this.#state());\n\n    get<K extends keyof TableState>(key: K): TableState[K] {\n        return this.#state()[key];\n    }\n\n    setHeaders(headers: string[]): void {\n        this.#state.update((state) => ({\n            ...state,\n            headers,\n            initialHeaders: headers,\n            preferences: {\n                ...state.preferences,\n                visibleColumns: headers,\n            },\n            filterDataSource: { column: headers[0], value: '' },\n        }));\n    }\n\n    setTableDataSource(dataSource: any[]): void {\n        this.#state.update((state) => ({\n            ...state,\n            dataSource,\n            initialDataSource: dataSource,\n        }));\n    }\n\n    initialFilterSearch(): void {\n        this.#state.update((state) => ({ ...state, filterDataSource: { column: state.headers[0], value: '' } }));\n    }\n\n    setFilter(action: { column: string | null; value: string }): void {\n        const column = action.column ?? this.state().filterDataSource.column;\n        const value = action.value ?? this.state().filterDataSource.value;\n        const filterDataSource = { column, value };\n        this.#state.update((state) => ({ ...state, filterDataSource }));\n        const selectedRows = this.state().selectedRows;\n        if (this.state().filterDataSource.column) {\n            if (this.state().filterDataSource.value === '') {\n                this.#state.update((state) => ({\n                    ...state,\n                    dataSource: state.initialDataSource,\n                }));\n            } else {\n                this.#state.update((state) => ({\n                    ...state,\n                    dataSource: this.filterRows(state.initialDataSource, { column, value }),\n                }));\n                if (this.state().dataSource.length > this.state().pagination.pageSize) {\n                    this.setPaginationState(this.state().pagination);\n                }\n            }\n        }\n        if (selectedRows.length > 0) {\n            const newSelectedRows = selectedRows.filter((row) => this.state().dataSource.includes(row));\n            this.#state.update((state) => ({ ...state, selectedRows: newSelectedRows }));\n        }\n        if (value === '') this.setPaginationState(this.state().pagination);\n    }\n\n    private filterRows = (rows: any[], filter: { column: string; value: string }) => {\n        if (!filter.column || !filter.value) return rows; // Return all rows if no filter criteria\n        return rows.filter((row) => {\n            const column = filter.column.toLowerCase();\n            const rowData = row[column];\n            if (Array.isArray(rowData)) return;\n            return row[column]?.toLowerCase().includes(filter.value.toLowerCase()); // Case-insensitive filter\n        });\n    };\n\n    setPreferences(action: { visibleColumns: string[]; groupBy: string }): void {\n        this.#state.update((state) => ({\n            ...state,\n            headers: action.visibleColumns,\n            preferences: {\n                visibleColumns: action.visibleColumns,\n                groupBy: action.groupBy,\n            },\n        }));\n        this.setDataSourcePagination();\n    }\n\n    setPaginationState(pagination: Partial<Pagination>): void {\n        const pageSize = pagination.pageSize ?? this.#state().pagination.pageSize;\n        this.#state.update((state) => ({\n            ...state,\n            pagination: {\n                ...state.pagination,\n                ...pagination,\n                totalPages: Math.ceil(state.initialDataSource.length / pageSize),\n            },\n        }));\n        this.setDataSourcePagination();\n    }\n\n    setCurrentPage(action: number) {\n        this.#state.update((state) => ({\n            ...state,\n            pagination: {\n                ...state.pagination,\n                currentPage: action,\n            },\n        }));\n\n        this.updateChangedCurrentPage(action);\n    }\n\n    updateChangedCurrentPage(action: any) {\n        // Update currentPage in pagination\n        this.#state.update((state) => ({\n            ...state,\n            pagination: {\n                ...state.pagination,\n                currentPage: action,\n            },\n        }));\n\n        // Update dataSource based on currentPage\n        this.setDataSourcePagination();\n    }\n\n    setDataSourcePagination() {\n        const state = this.#state();\n        // Calculate totalPages based on the full dataset (initialDataSource)\n        this.#state.update((state) => ({\n            ...state,\n            pagination: {\n                ...state.pagination,\n                totalPages: Math.ceil(state.initialDataSource.length / state.pagination.pageSize),\n            },\n        }));\n        // Check if there's data in the initialDataSource to paginate\n        if (state.initialDataSource.length > 0) {\n            // Use initialDataSource to slice the data for current page\n            this.#state.update((state) => ({\n                ...state,\n                dataSource: state.initialDataSource.slice(\n                    (state.pagination.currentPage - 1) * state.pagination.pageSize,\n                    state.pagination.currentPage * state.pagination.pageSize\n                ),\n            }));\n        }\n    }\n\n    setGroupBy(groupBy: string): void {\n        this.#state.update((state) => ({\n            ...state,\n            preferences: { ...state.preferences, groupBy: groupBy !== 'non' ? groupBy : '' },\n        }));\n    }\n\n    setSelectedRows(rowData: RowData): void {\n        this.#state.update((state) => {\n            const existingIndex = state.selectedRows.findIndex((row) => JSON.stringify(row) === JSON.stringify(rowData));\n            const newSelectedRows =\n                existingIndex !== -1 ? state.selectedRows.filter((_, index) => index !== existingIndex) : [...state.selectedRows, rowData];\n            return { ...state, selectedRows: newSelectedRows };\n        });\n    }\n\n    toggleSelectedAllRows(): void {\n        this.#state.update((state) => {\n            const allSelected = state.selectedRows.length === state.initialDataSource.length;\n            return {\n                ...state,\n                selectedRows: allSelected ? [] : [...state.initialDataSource],\n            };\n        });\n    }\n\n    sortDataSource(sortDataSource: { key: string; direction: 'ascending' | 'descending' }): void {\n        if (sortDataSource.key) {\n            const sort = new SortRowsUtil();\n            this.#state.update((state) => ({\n                ...state,\n                selectedRows: [],\n                sortDataSource,\n                dataSource: sort.sortRows(state.dataSource, sortDataSource),\n            }));\n        }\n    }\n\n    getTableState(): TableState {\n        return this.#state();\n    }\n\n    dragStart(index: number): void {\n        this.#state.update((state) => ({ ...state, draggedColIndex: index }));\n    }\n\n    dragDrop(index: number): void {\n        const targetIndex = index;\n        const draggedColIndex = this.state().draggedColIndex;\n        const dataSource = this.state().dataSource;\n        if (draggedColIndex === null || draggedColIndex === targetIndex) return; // If no valid drag action, exit\n\n        // Update headers array with dragged column\n        const newHeaders = [...this.state().headers];\n        const draggedHeader = newHeaders.splice(draggedColIndex, 1)[0];\n        newHeaders.splice(targetIndex, 0, draggedHeader);\n\n        // Update rows in dataSource array with dragged column\n        const newRows = dataSource.map((row: any) => {\n            const entries = Object.entries(row);\n            const draggedEntry = entries.splice(draggedColIndex, 1)[0];\n            entries.splice(targetIndex, 0, draggedEntry);\n            return Object.fromEntries(entries); // Convert back to object\n        });\n\n        // Update state with new headers, rows, and reset draggedColIndex\n        this.setHeaders(newHeaders);\n        this.setTableDataSource(newRows);\n        this.setSelectedRows([]);\n        this.#state.update((state) => ({ ...state, draggedColIndex: null }));\n    }\n\n    clear() {\n        this.#state.update((state) => ({\n            ...state,\n            dataSource: [],\n            draggedColIndex: null,\n            filterDataSource: { column: '', value: '' },\n            headers: [],\n            initialDataSource: [],\n            initialHeaders: [],\n            pagination: {\n                currentPage: 1,\n                totalPages: 1,\n                pageSize: 10,\n            },\n            preferences: {\n                visibleColumns: [],\n                groupBy: undefined,\n            },\n            selectedRows: [],\n            sortDataSource: { key: '', direction: 'ascending' },\n        }));\n    }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "DraggableUtil",
            "id": "class-DraggableUtil-b04b8e4258363efce693f3e9e0fc95af58de296ddb8c12c81ec85c5f71228290ea0b8bb6604e3e4ea9b1281bf5b7c42e905220cc11419ff7d834ecca82c2107c",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/draggable.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DraggableUtil {\n    headers: string[] = [];\n    dataSource = [];\n    draggedColIndex = null;\n    selectedRows = [];\n\n    // Function to handle dragging of columns\n    dragRows(state: any, action: any) {\n        const targetIndex = action.payload;\n        const draggedColIndex = state.draggedColIndex;\n        const dataSource = state.dataSource;\n        if (draggedColIndex === null || draggedColIndex === targetIndex) return; // If no valid drag action, exit\n\n        // Update headers array with dragged column\n        const newHeaders = [...state.headers];\n        const draggedHeader = newHeaders.splice(draggedColIndex, 1)[0];\n        newHeaders.splice(targetIndex, 0, draggedHeader);\n\n        // Update rows in dataSource array with dragged column\n        const newRows = dataSource.map((row: any) => {\n            const entries = Object.entries(row);\n            const draggedEntry = entries.splice(draggedColIndex, 1)[0];\n            entries.splice(targetIndex, 0, draggedEntry);\n            return Object.fromEntries(entries); // Convert back to object\n        });\n\n        // Update state with new headers, rows, and reset draggedColIndex\n        this.headers = newHeaders;\n        this.dataSource = newRows;\n        this.draggedColIndex = null;\n        this.selectedRows = [];\n    }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "draggedColIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "dragRows",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FieldBuilder",
            "id": "class-FieldBuilder-589f0d9956e0bc428a02ca18f681bb6b98105f0c5d017932f9d83a0bd2afe5c5c22b198e6934baef2cb9e8aa43eeb2cabaec56e4fb2b696578141586c3fcc4eb",
            "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, FormControl, ValidatorFn, Validators } from '@angular/forms';\nimport { Identifiable, TYPE, VALUE } from './identifiable';\n\nexport declare type AttributeEvent = (field: Field, event?: any) => void;\n\nexport declare type FieldSteps = Identifiable & {\n    [additionalProperties: string]: any;\n} & {\n    step: number;\n    label: string;\n    active: boolean;\n};\n\nexport declare type FieldOptions = Identifiable & {\n    [additionalProperties: string]: any;\n} & {\n    value: string | boolean | number;\n    label: string;\n    checked?: boolean;\n    description?: string;\n    category?: string;\n};\n\nexport type Field<\n    Props = FieldProps & {\n        [additionalProperties: string]: any;\n    }\n> = Identifiable & {\n    type: TYPE;\n    key: string;\n    value: VALUE;\n    description?: string;\n    errorMessage?: string;\n    hint?: string;\n    label?: string;\n    placeholder?: string;\n    showError?: boolean;\n    validation?: ValidatorFn[] | null;\n    disabled?: boolean;\n    props?: Props;\n    formControl?: AbstractControl | { [key: string]: AbstractControl };\n};\n\nexport type FieldProps = {\n    autocomplete?: string;\n    appearance?: string;\n    class?: string;\n    checked?: boolean;\n    errorMessage?: string;\n    labelClass?: string;\n    inputClass?: string;\n    options?: FieldOptions[];\n    rows?: number;\n    cols?: number;\n    max?: number;\n    min?: number;\n    minLength?: number;\n    isMultipleTag?: boolean;\n    pattern?: string | RegExp;\n    required?: boolean;\n    tabindex?: number;\n    attributes?: {\n        [key: string]: string | number;\n    };\n    step?: number;\n    focus?: AttributeEvent;\n    blur?: AttributeEvent;\n    keyup?: AttributeEvent;\n    keydown?: AttributeEvent;\n    click?: AttributeEvent;\n    change?: AttributeEvent;\n    keypress?: AttributeEvent;\n};\n\nexport class FieldBuilder {\n    private static idCounter = 0;\n\n    private static generateId(): string {\n        return `field_${this.idCounter++}`;\n    }\n\n    static createField(\n        type: TYPE,\n        key: string,\n        value: any,\n        label?: string,\n        placeholder?: string,\n        props?: FieldProps,\n        description?: string,\n        validation?: ValidatorFn[]\n    ): Field {\n        const id = this.generateId();\n        const field: Field = {\n            id,\n            type,\n            key,\n            value,\n            validation: validation || [],\n            label: label || '',\n            placeholder: placeholder || '',\n            description: description || '',\n            props: props || {},\n        };\n        const addedValidations = validation || [];\n        field.validation = props?.required ? [Validators.required, ...addedValidations] : field.validation;\n        field.formControl = field.type === 'checkbox' ? this.checkboxFormFields(field) : new FormControl(field.value, field.validation);\n        return field;\n    }\n\n    static validators = {\n        required: (required: boolean) => (required ? Validators.required : []),\n        email: (email: boolean) => (email ? Validators.email : []),\n        pattern: (pattern: string | RegExp) => (pattern ? Validators.pattern(pattern) : []),\n    };\n\n    static createOptionsField(\n        type: TYPE,\n        key: string,\n        label: string,\n        placeholder: string,\n        options: FieldOptions[],\n        props?: FieldProps,\n        description?: string\n    ): Field {\n        const id = this.generateId();\n        const field: Field = {\n            id,\n            type,\n            key,\n            value: '', // No initial value for options field\n            label,\n            placeholder,\n            description: description || '',\n            props: {\n                options,\n                ...props,\n            },\n        };\n        const addedValidations = field.validation || [];\n        field.validation = props?.required ? [Validators.required, ...addedValidations] : field.validation;\n        field.formControl = field.type === 'checkbox' ? this.checkboxFormFields(field) : new FormControl(field.value, field.validation);\n        return field;\n    }\n\n    static checkboxFormFields(field: Field): { [key: string]: AbstractControl } {\n        const formControls: { [key: string]: AbstractControl } = {};\n        field.props?.options?.forEach((option) => {\n            formControls[option.id] = new FormControl('');\n        });\n        return formControls;\n    }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "idCounter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123,
                        126
                    ]
                },
                {
                    "name": "validators",
                    "defaultValue": "{\n        required: (required: boolean) => (required ? Validators.required : []),\n        email: (email: boolean) => (email ? Validators.email : []),\n        pattern: (pattern: string | RegExp) => (pattern ? Validators.pattern(pattern) : []),\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkboxFormFields",
                    "args": [
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createField",
                    "args": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "validation",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validation",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createOptionsField",
                    "args": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "FieldOptions[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "FieldOptions[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ImperativeObservable",
            "id": "class-ImperativeObservable-2bee6064f2321053861edb96d5c364db736fdd609c51a0e7d113e54300a943e189d153c5486344ba02f73ad732fb2a4798ef5777d8c78e84d96202b211d14f1b",
            "file": "projects/ng-lib/src/lib/utils/imperative-observable.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\n\nexport class ImperativeObservable<T> {\n  private _subject: BehaviorSubject<T>;\n  private _change$: Observable<T>;\n\n  constructor(initialValue: T) {\n    this._subject = new BehaviorSubject<T>(initialValue);\n    this._change$ = this._subject.asObservable();\n  }\n\n  get value(): T {\n    return this._subject.value;\n  }\n  set value(value: T) {\n    this._subject.next(value);\n  }\n\n  get change$() {\n    return this._change$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialValue",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "initialValue",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "_change$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_subject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<T>",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T",
                        "line": 12
                    }
                },
                "change$": {
                    "name": "change$",
                    "getSignature": {
                        "name": "change$",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                }
            },
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaginationUtil",
            "id": "class-PaginationUtil-299ae169fd17bbd518f7b3aa3a42849ae247bbe3a18253a5c092585e094615f41b976c834dda33a322b87beeb06036d33c39bc12a2f228a3fa8eed896629c601",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/pagination.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TableState } from '../models';\n\nexport class PaginationUtil {\n    initialState: TableState;\n\n    constructor(initialState: TableState) {\n        this.initialState = initialState;\n        this.initialState.pagination.currentPage = 1;\n        this.initialState.pagination.totalPages = 0;\n        this.initialState.pagination.pageSize = 10;\n    }\n\n    // @ts-ignore\n    setDataSourcePagination = (action: any) => {\n        // Calculate totalPages based on the full dataset (initialDataSource)\n        const length = this.initialState.initialDataSource.length;\n        const pageSize = this.initialState.pagination.pageSize;\n        this.initialState.pagination.totalPages = Math.ceil(length / pageSize);\n\n        // Check if there's data in the initialDataSource to paginate\n        if (this.initialState.initialDataSource.length > 0) {\n            // Use initialDataSource to slice the data for current page\n            this.initialState.dataSource = this.initialState.initialDataSource.slice(\n                (this.initialState.pagination.currentPage - 1) * this.initialState.pagination.pageSize,\n                this.initialState.pagination.currentPage * this.initialState.pagination.pageSize\n            );\n        }\n    };\n\n    updateChangedCurrentPage = (action: any) => {\n        // Update currentPage in pagination\n        this.initialState.pagination.currentPage = action.payload;\n\n        // Update dataSource based on currentPage\n        this.setDataSourcePagination(action);\n    };\n\n    setPaginationState = (pageSize: number, currentPage: number) => {\n        // Set pageSize and currentPage in pagination state\n        this.initialState.pagination.pageSize = pageSize;\n        this.initialState.pagination.currentPage = currentPage;\n\n        // Recalculate totalPages based on the new pageSize\n        this.initialState.pagination.totalPages = Math.ceil(this.initialState.initialDataSource.length / pageSize);\n\n        // Update dataSource based on the new currentPage and pageSize\n        this.setDataSourcePagination({});\n    };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialState",
                        "type": "TableState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "initialState",
                        "type": "TableState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableState",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "setDataSourcePagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "setPaginationState",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "updateChangedCurrentPage",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortRowsUtil",
            "id": "class-SortRowsUtil-0b53f43407bde57e85de362f3009a20690dc474931e3483fc38c4b4d5483e3b27b827529b577b345f7c40b8b38f6fb60ded92be1dc7375478f315894236cb264",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sort-rows.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SortRowsUtil {\n    isDate(value: any) {\n        const date = new Date(value);\n        return !isNaN(date.getTime());\n    }\n\n    sortRows(rows: any[], sortConfig: { key: string; direction: string }) {\n        const lowerCaseSortKey = sortConfig.key.toLowerCase();\n        return rows.sort((a, b) => {\n            const aValue = String(a[lowerCaseSortKey]).toLowerCase();\n            const bValue = String(b[lowerCaseSortKey]).toLowerCase();\n\n            // Check if both values are valid dates\n            if (this.isDate(aValue) && this.isDate(bValue)) {\n                const dateA = new Date(aValue) as any;\n                const dateB = new Date(bValue) as any;\n                return sortConfig.direction === 'ascending' ? dateA - dateB : dateB - dateA;\n            } else {\n                // If not dates, compare as strings\n                if (aValue < bValue) return sortConfig.direction === 'ascending' ? -1 : 1;\n                if (aValue > bValue) return sortConfig.direction === 'ascending' ? 1 : -1;\n            }\n            return 0; // Default case\n        });\n    }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "isDate",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortRows",
                    "args": [
                        {
                            "name": "rows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortConfig",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortConfig",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableBuilder",
            "id": "class-TableBuilder-1a925353fd7fd3d51f38ebcc49869269453dfdfcfb1d3757bcc9e509e8ffae2369c228ac991f6205235fd6bbd966d9d21b9144b78e4662e2d19943d5be10054b",
            "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Field } from './field';\nimport { Observable } from 'rxjs';\nimport { TABLE_TYPE } from './identifiable';\n\n// need to think how I can simplify this\n\nexport declare type RowData = {\n    [additionalProperties: string]: any;\n} & {\n    [key: string]: any;\n    selected?: boolean;\n    id?: string;\n};\n\nexport type TableProps = {\n    height?: string;\n    title?: string;\n    caption?: string;\n    buttonText?: string;\n    buttonLink?: any[];\n    buttonAction?: any;\n    selectable?: boolean;\n    attributes?: {\n        [key: string]: string | number;\n    };\n    isField?: boolean;\n    field?: Field;\n    fieldCol?: string;\n};\n\nexport type Table = {\n    [additionalProperties: string]: any;\n} & {\n    type: TABLE_TYPE;\n    headers: string[];\n    rows: Observable<RowData[]>;\n    props?: TableProps;\n};\n\nexport class TableBuilder {\n    static createTable(type: TABLE_TYPE, headers: string[], rows: Observable<RowData[]>, props?: TableProps): Table {\n        const table = {\n            type,\n            headers: headers || [],\n            rows: rows,\n            props: props || {},\n        };\n        return table;\n    }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "createTable",
                    "args": [
                        {
                            "name": "type",
                            "type": "TABLE_TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rows",
                            "type": "Observable<RowData[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "TableProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Table",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TABLE_TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rows",
                            "type": "Observable<RowData[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "TableProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AdkDatasource",
            "id": "directive-AdkDatasource-d035203021d4ec083ca5b9cab7ec66b808198a361619e84670a5e7feec0947363384479d1f1dee47acb0cdebdb580dba866385fcc861d95a9e6d2284ffeaf70a",
            "file": "projects/ng-lib/src/lib/directives/data-source.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, inject } from '@angular/core';\nimport { ID, Identifiable } from '../tw-form-ui/models';\nimport { Observable, map } from 'rxjs';\n\nimport { AdkList } from './list';\nimport { AdkPagination } from './pagination';\nimport { AdkSelection } from './selection';\n\n@Directive({\n    selector: '[adk-datasource]',\n    exportAs: 'adkDatasource',\n    standalone: true,\n    /**\n     * Important! Angular Directive composition API in action!\n     */\n    hostDirectives: [\n        // { directive: AdkHttpClient, inputs: ['adkUrl', 'adkPage', 'adkLimit'] },\n        AdkList,\n        AdkSelection,\n        AdkPagination,\n    ],\n})\nexport class AdkDatasource<T extends Identifiable> {\n    // #httpClient = inject(AdkHttpClient, { self: true });\n    #list = inject<AdkList<T>>(AdkList, { self: true });\n    #selection = inject(AdkSelection, { self: true });\n    #pagination = inject(AdkPagination, { self: true });\n\n    /**\n     * The list of datasource items\n     */\n    readonly items = this.#list.items;\n\n    /**\n     * Check if we are on the first page\n     */\n    readonly first = this.#pagination.first;\n\n    /**\n     * Check if we are on the last page\n     */\n    readonly last = this.#pagination.last;\n\n    /**\n     * The selected items of the selected datasource\n     */\n    readonly selectedItems = computed(() => this.items().filter((item) => this.#selection.selected(item.id)));\n\n    async fetch(data: Observable<any[]>): Promise<void> {\n        data.pipe(\n            map((items) => {\n                return items.map((item, i) => {\n                    return {\n                        ...item,\n                        id: item.id ?? i,\n                    };\n                });\n            })\n        ).subscribe({\n            next: (value: any[]) => this.#list.add(...value),\n            complete: () => console.info('Fetched data successfully!'),\n        });\n    }\n\n    /**\n     * Select datasource by their ids\n     * @param ids\n     */\n    select(...ids: ID[]): void {\n        this.#selection.select(...ids);\n    }\n\n    /**\n     * Select all datasource\n     */\n    selectAll(): void {\n        this.#selection.select(...this.items().map((todo) => todo.id));\n    }\n\n    /**\n     * Deselect all datasource\n     */\n    reset(): void {\n        this.#selection.clear();\n    }\n\n    /**\n     * Check if a todo is selected\n     * @param id\n     */\n    selected(id: ID): boolean {\n        return this.#selection.selected(id);\n    }\n\n    /**\n     * Deselect a todo by its id\n     * @param id\n     */\n    deselect(id: ID): void {\n        this.#selection.deselect(id);\n    }\n}\n",
            "selector": "[adk-datasource]",
            "providers": [],
            "exportAs": "adkDatasource",
            "hostDirectives": [
                {
                    "name": "AdkList"
                },
                {
                    "name": "AdkSelection"
                },
                {
                    "name": "AdkPagination"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#list",
                    "defaultValue": "inject<AdkList<T>>(AdkList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#pagination",
                    "defaultValue": "inject(AdkPagination, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#selection",
                    "defaultValue": "inject(AdkSelection, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "first",
                    "defaultValue": "this.#pagination.first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if we are on the first page</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nCheck if we are on the first page\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#list.items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The list of datasource items</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nThe list of datasource items\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "last",
                    "defaultValue": "this.#pagination.last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if we are on the last page</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nCheck if we are on the last page\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "computed(() => this.items().filter((item) => this.#selection.selected(item.id)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The selected items of the selected datasource</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nThe selected items of the selected datasource\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deselect",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect a todo by its id\n",
                    "description": "<p>Deselect a todo by its id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2505,
                                "end": 2507,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2499,
                                "end": 2504,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "data",
                            "type": "Observable<any[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Observable<any[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect all datasource\n",
                    "description": "<p>Deselect all datasource</p>\n"
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect datasource by their ids\n",
                    "description": "<p>Select datasource by their ids</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1951,
                                "end": 1954,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ids"
                            },
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1945,
                                "end": 1950,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect all datasource\n",
                    "description": "<p>Select all datasource</p>\n"
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if a todo is selected\n",
                    "description": "<p>Check if a todo is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2355,
                                "end": 2357,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2349,
                                "end": 2354,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkDatasource",
            "id": "directive-AdkDatasource-90ffc66efc8397e4743600def8f5ea4f028f0c4c83b17263bc517a0def8e83116aa7fdab9f3d658c91002e62f9adc3698aad5bc4eb20fe153b7d669a4e707c91-1",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/data-source.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AdkList, AdkPagination, AdkSelection } from '../../directives';\nimport { Directive, computed, inject } from '@angular/core';\nimport { ID, Identifiable } from '../models';\nimport { Observable, map } from 'rxjs';\n\n@Directive({\n    selector: '[adk-datasource]',\n    exportAs: 'adkDatasource',\n    standalone: true,\n    /**\n     * Important! Angular Directive composition API in action!\n     */\n    hostDirectives: [\n        // { directive: AdkHttpClient, inputs: ['adkUrl', 'adkPage', 'adkLimit'] },\n        AdkList,\n        AdkSelection,\n        AdkPagination,\n    ],\n})\nexport class AdkDatasource<T extends Identifiable> {\n    // #httpClient = inject(AdkHttpClient, { self: true });\n    #list = inject<AdkList<T>>(AdkList, { self: true });\n    #selection = inject(AdkSelection, { self: true });\n    #pagination = inject(AdkPagination, { self: true });\n\n    /**\n     * The list of datasource items\n     */\n    readonly items = this.#list.items;\n\n    /**\n     * Check if we are on the first page\n     */\n    readonly first = this.#pagination.first;\n\n    /**\n     * Check if we are on the last page\n     */\n    readonly last = this.#pagination.last;\n\n    /**\n     * The selected items of the selected datasource\n     */\n    readonly selectedItems = computed(() => this.items().filter((item) => this.#selection.selected(item.id)));\n\n    async fetch(data: Observable<any[]>): Promise<void> {\n        data.pipe(\n            map((items) => {\n                return items.map((item, i) => {\n                    return {\n                        ...item,\n                        id: item.id ?? i,\n                    };\n                });\n            })\n        ).subscribe({\n            next: (value: any[]) => this.#list.add(...value),\n            complete: () => console.info('Fetched data successfully!'),\n        });\n    }\n\n    /**\n     * Select datasource by their ids\n     * @param ids\n     */\n    select(...ids: ID[]): void {\n        this.#selection.select(...ids);\n    }\n\n    /**\n     * Select all datasource\n     */\n    selectAll(): void {\n        this.#selection.select(...this.items().map((todo) => todo.id));\n    }\n\n    /**\n     * Deselect all datasource\n     */\n    reset(): void {\n        this.#selection.clear();\n    }\n\n    /**\n     * Check if a todo is selected\n     * @param id\n     */\n    selected(id: ID): boolean {\n        return this.#selection.selected(id);\n    }\n\n    /**\n     * Deselect a todo by its id\n     * @param id\n     */\n    deselect(id: ID): void {\n        this.#selection.deselect(id);\n    }\n}\n",
            "selector": "[adk-datasource]",
            "providers": [],
            "exportAs": "adkDatasource",
            "hostDirectives": [
                {
                    "name": "AdkList"
                },
                {
                    "name": "AdkSelection"
                },
                {
                    "name": "AdkPagination"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#list",
                    "defaultValue": "inject<AdkList<T>>(AdkList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#pagination",
                    "defaultValue": "inject(AdkPagination, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#selection",
                    "defaultValue": "inject(AdkSelection, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "first",
                    "defaultValue": "this.#pagination.first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if we are on the first page</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nCheck if we are on the first page\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#list.items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The list of datasource items</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nThe list of datasource items\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "last",
                    "defaultValue": "this.#pagination.last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if we are on the last page</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nCheck if we are on the last page\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "computed(() => this.items().filter((item) => this.#selection.selected(item.id)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The selected items of the selected datasource</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nThe selected items of the selected datasource\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deselect",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect a todo by its id\n",
                    "description": "<p>Deselect a todo by its id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2442,
                                "end": 2444,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2436,
                                "end": 2441,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "data",
                            "type": "Observable<any[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Observable<any[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect all datasource\n",
                    "description": "<p>Deselect all datasource</p>\n"
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect datasource by their ids\n",
                    "description": "<p>Select datasource by their ids</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1888,
                                "end": 1891,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ids"
                            },
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1882,
                                "end": 1887,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect all datasource\n",
                    "description": "<p>Select all datasource</p>\n"
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if a todo is selected\n",
                    "description": "<p>Check if a todo is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2292,
                                "end": 2294,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2286,
                                "end": 2291,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AdkDatasource-1"
        },
        {
            "name": "AdkDraggableDirective",
            "id": "directive-AdkDraggableDirective-94aa9fcc8da93a6cd512922d7202683fa165fd5aac03612a423a67c23f56f1b74b42773a5c3fdd8406c0c61b7e6e239b432a62b325ac0fad9654dab81a916761",
            "file": "projects/ng-lib/src/lib/directives/drag.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Output, signal } from '@angular/core';\n\n@Directive({\n    selector: '[adkDraggable]',\n    standalone: true,\n})\nexport class AdkDraggableDirective {\n    #isDragging = signal(false);\n\n    @Output() dragStart = new EventEmitter<DragEvent>();\n    @Output() dragEnd = new EventEmitter<DragEvent>();\n\n    @HostBinding('draggable') draggable = true;\n\n    @HostBinding('class.dragging')\n    get isDragging() {\n        return this.#isDragging();\n    }\n\n    @HostListener('dragstart', ['$event'])\n    onDragStart(event: DragEvent) {\n        this.#isDragging.set(true);\n        this.dragStart.emit(event);\n    }\n\n    @HostListener('dragend', ['$event'])\n    onDragEnd(event: DragEvent) {\n        this.#isDragging.set(false);\n        this.dragEnd.emit(event);\n    }\n}\n",
            "selector": "[adkDraggable]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "dragEnd",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                },
                {
                    "name": "dragStart",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.dragging",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "propertiesClass": [
                {
                    "name": "#isDragging",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'draggable'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragend', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragstart', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "isDragging": {
                    "name": "isDragging",
                    "getSignature": {
                        "name": "isDragging",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            }
        },
        {
            "name": "AdkDroppableDirective",
            "id": "directive-AdkDroppableDirective-61a8932bc00d7875fb12e9e163d5d4532d45996e671c6d3ccdcaf2b0458efd248117bf1a037b1b3c2757c8b90f4d571bc827f639bee57d1279dfd1d462af2c50",
            "file": "projects/ng-lib/src/lib/directives/drop.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Output, signal } from '@angular/core';\n\n@Directive({\n    selector: '[adkDroppable]',\n    standalone: true,\n})\nexport class AdkDroppableDirective {\n    #isOver = signal(false);\n\n    @Output() drop = new EventEmitter<DragEvent>();\n\n    @HostBinding('class.over')\n    get isOver() {\n        return this.#isOver();\n    }\n\n    @HostListener('dragover', ['$event'])\n    onDragOver(event: DragEvent) {\n        event.preventDefault();\n        this.#isOver.set(true);\n    }\n\n    @HostListener('dragleave', ['$event'])\n    onDragLeave(_event: DragEvent) {\n        this.#isOver.set(false);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event: DragEvent) {\n        event.preventDefault();\n        this.#isOver.set(false);\n        this.drop.emit(event);\n    }\n}\n",
            "selector": "[adkDroppable]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "drop",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.over",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "#isOver",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "isOver": {
                    "name": "isOver",
                    "getSignature": {
                        "name": "isOver",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            }
        },
        {
            "name": "AdkFieldList",
            "id": "directive-AdkFieldList-b8cb358329162e578330dd73286faa3305a36f4407858dd09c6be02817d6a6702a16aac9a8a8e3d1c8935dff4ffa06ea508142aac7747bef0b79e2ad54a9688b",
            "file": "projects/ng-lib/src/lib/directives/field-list.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\nimport { Field, ID } from '../tw-form-ui/models';\n\n@Directive({\n    selector: '[adz-field-builder]',\n    exportAs: 'adkFieldList',\n    standalone: true,\n})\nexport class AdkFieldList<T extends Field> {\n    #fields = signal<Record<ID, T>>({});\n\n    readonly fields = computed(() => Object.values(this.#fields()));\n\n    /**\n     * Get a field by id\n     * @param id\n     */\n    get(id: ID): T | undefined {\n        return this.#fields()[id];\n    }\n\n    /**\n     * Add new fields to the list\n     * @param newItems\n     */\n    add(...newFields: T[]): void {\n        this.#fields.update((fields) => newFields.reduce((accumulator, field) => ({ ...accumulator, [field.id]: field }), fields));\n    }\n\n    /**\n     * Update an field in the list\n     * @param field\n     */\n    update(field: T): void {\n        this.#fields.update((fields) => ({ ...fields, [field.id]: field }));\n    }\n\n    /**\n     * Remove an field from the list\n     * @param field\n     */\n    remove(field: T): void {\n        this.#fields.update((fields) => {\n            const { [field.id]: _, ...rest } = fields;\n            return rest;\n        });\n    }\n\n    /**\n     * Clear all fields from the list\n     */\n    clear(): void {\n        this.#fields.set({});\n    }\n}\n",
            "selector": "[adz-field-builder]",
            "providers": [],
            "exportAs": "adkFieldList",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#fields",
                    "defaultValue": "signal<Record<ID, T>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fields",
                    "defaultValue": "computed(() => Object.values(this.#fields()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newFields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd new fields to the list\n",
                    "description": "<p>Add new fields to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": "newFields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all fields from the list\n",
                    "description": "<p>Clear all fields from the list</p>\n"
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet a field by id\n",
                    "description": "<p>Get a field by id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 421,
                                "end": 423,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 415,
                                "end": 420,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "field",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove an field from the list\n",
                    "description": "<p>Remove an field from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 997,
                                "end": 1002,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "field"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 991,
                                "end": 996,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "field",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate an field in the list\n",
                    "description": "<p>Update an field in the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 811,
                                "end": 816,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "field"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 805,
                                "end": 810,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkFields",
            "id": "directive-AdkFields-53339d0c795e2756f1ff20267b8da7fb2a94ce379c4c3215f6ec0e8b25924950e86b3d103674d12f19bc98b28d95d0e78634d45410e3e1bc215da7782059512c",
            "file": "projects/ng-lib/src/lib/directives/field.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, inject } from '@angular/core';\n\nimport { AdkFieldList } from './field-list';\nimport { Field } from '../tw-form-ui/models';\n\n@Directive({\n    selector: '[adk-fields]',\n    exportAs: 'adkFields',\n    standalone: true,\n    hostDirectives: [AdkFieldList],\n})\nexport class AdkFields<T extends Field> {\n    #fields: AdkFieldList<T> = inject<AdkFieldList<T>>(AdkFieldList, { self: true });\n\n    /**\n     * The list of fields\n     */\n    readonly items = this.#fields.fields;\n\n    /**\n     * Set fields\n     */\n    async setFields(fields: T[]): Promise<void> {\n        this.#fields.add(...fields);\n    }\n}\n",
            "selector": "[adk-fields]",
            "providers": [],
            "exportAs": "adkFields",
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#fields",
                    "defaultValue": "inject<AdkFieldList<T>>(AdkFieldList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdkFieldList<T>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#fields.fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The list of fields</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nThe list of fields\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet fields\n",
                    "description": "<p>Set fields</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkFormGroup",
            "id": "directive-AdkFormGroup-5418245d5fcaec4a7465edce24a14e1a0293a26d1c7d4ef11aed24da48823213760fe01d02e60f0c8af72a32c34b917c30712cf7cc395bdaf18fe2648be1b71d",
            "file": "projects/ng-lib/src/lib/directives/form-group.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AbstractControl, FormGroup } from '@angular/forms';\nimport { Directive, WritableSignal, signal } from '@angular/core';\nimport { Field, FieldOptions } from '../tw-form-ui/models';\n\n@Directive({\n    selector: '[adk-form-group]',\n    exportAs: 'adkFormGroup',\n    standalone: true,\n})\nexport class AdkFormGroup<T extends Field> {\n    #formGroup = signal<FormGroup<any>>(new FormGroup({}));\n\n    /**\n     * The form group\n     */\n    formGroup: WritableSignal<FormGroup<any>> = this.#formGroup;\n\n    /**\n     * Set the form group\n     */\n    setFormGroup(fields: T[]): void {\n        const formControls = fields.reduce((accumulator: any, field) => {\n            if (field.formControl instanceof AbstractControl) {\n                accumulator[field.key] = field.formControl;\n            } else if (field.formControl instanceof Object) {\n                // object of form controls\n                field.props?.options?.forEach((option: FieldOptions) => {\n                    const key = option.id;\n                    accumulator[key] = (field.formControl as { [key: string]: AbstractControl<any, any> })[key];\n                });\n            }\n            return accumulator;\n        }, {});\n\n        const formGroup = new FormGroup(formControls);\n        this.#formGroup.set(formGroup);\n    }\n\n    /**\n     * Reset the form group\n     */\n    reset(): void {\n        this.#formGroup.set(new FormGroup({}));\n    }\n}\n",
            "selector": "[adk-form-group]",
            "providers": [],
            "exportAs": "adkFormGroup",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "signal<FormGroup<any>>(new FormGroup({}))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formGroup",
                    "defaultValue": "this.#formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<FormGroup<any>>",
                    "optional": false,
                    "description": "<p>The form group</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nThe form group\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReset the form group\n",
                    "description": "<p>Reset the form group</p>\n"
                },
                {
                    "name": "setFormGroup",
                    "args": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the form group\n",
                    "description": "<p>Set the form group</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkHttpClient",
            "id": "directive-AdkHttpClient-99d66dd02b8ec3d8498d39931fa365324abe6d170927d68acd2edccc15d2e5dfb5c9efc17a4399867ac6d9f3e6bfc8e73dea0ceb3883b2d67871b88cd70e2ee1",
            "file": "projects/ng-lib/src/lib/directives/http-client.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, inject, input } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\n\n@Directive({\n  selector: '[adk-http-client]',\n  exportAs: 'adkHttpClient',\n  standalone: true,\n})\nexport class AdkHttpClient {\n  #http = inject(HttpClient);\n  /**\n   * The URL to send the request to\n   */\n  url = input.required<string>({ alias: 'adkUrl' });\n  /**\n   * The page to get data from\n   */\n  page = input(1, { alias: 'adkPage' });\n  /**\n   * The number of items to get\n   */\n  limit = input(10, { alias: 'adkLimit' });\n  /**\n   * Get data from the server\n   * @param page\n   */\n  async get<T>(page = { page: 1, limit: 10 }): Promise<{ total: number; items: T[] }> {\n    const searchParams = new URLSearchParams({\n      _page: page.page.toString(),\n      _per_page: page.limit.toString(),\n    }).toString();\n\n    const response = await firstValueFrom(\n      this.#http.get<T[]>(`${this.url()}?${searchParams}`, {\n        observe: 'response',\n      })\n    );\n    const total = parseInt(response.headers.get('X-Total-Count') ?? '0', 10);\n    const items = response.body!;\n\n    return { total, items };\n  }\n}\n",
            "selector": "[adk-http-client]",
            "providers": [],
            "exportAs": "adkHttpClient",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "limit",
                    "defaultValue": "input(10, { alias: 'adkLimit' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The number of items to get</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nThe number of items to get\n"
                },
                {
                    "name": "page",
                    "defaultValue": "input(1, { alias: 'adkPage' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The page to get data from</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nThe page to get data from\n"
                },
                {
                    "name": "url",
                    "defaultValue": "input.required<string>({ alias: 'adkUrl' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The URL to send the request to</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nThe URL to send the request to\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "page",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ page: 1, limit: 10 }"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet data from the server\n",
                    "description": "<p>Get data from the server</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 628,
                                "end": 632,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "page"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ page: 1, limit: 10 }",
                            "tagName": {
                                "pos": 622,
                                "end": 627,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkList",
            "id": "directive-AdkList-237285685c2677ee33836894c395d3d8458201d68be84af1feaa421c9b3f5a38177ba55c8a467cb574dc6da65869542c9fa1e9b81eb7c278379a4cf3d1751ebf",
            "file": "projects/ng-lib/src/lib/directives/list.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\nimport { ID, Identifiable } from '../tw-form-ui/models';\n\n@Directive({\n    selector: '[adz-list]',\n    exportAs: 'adkList',\n    standalone: true,\n})\nexport class AdkList<T extends Identifiable> {\n    #items = signal<Record<ID, T>>({});\n    readonly items = computed(() => Object.values(this.#items()));\n\n    /**\n     * Get an item by id\n     * @param id\n     */\n    get(id: ID): T | undefined {\n        return this.#items()[id];\n    }\n\n    /**\n     * Add new items to the list\n     * @param newItems\n     */\n    add(...newItems: T[]): void {\n        this.#items.update((items) =>\n            newItems.reduce((accumulator, item) => {\n                return { ...accumulator, [item.id]: item };\n            }, items)\n        );\n    }\n\n    /**\n     * Update an item in the list\n     * @param item\n     */\n    update(item: T): void {\n        this.#items.update((items) => ({ ...items, [item.id]: item }));\n    }\n\n    /**\n     * Remove an item from the list\n     * @param item\n     */\n    remove(item: T): void {\n        this.#items.update((items) => {\n            const { [item.id]: _, ...rest } = items;\n            return rest;\n        });\n    }\n\n    /**\n     * Clear all items from the list\n     */\n    clear(): void {\n        this.#items.set({});\n    }\n}\n",
            "selector": "[adz-list]",
            "providers": [],
            "exportAs": "adkList",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<Record<ID, T>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "computed(() => Object.values(this.#items()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newItems",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd new items to the list\n",
                    "description": "<p>Add new items to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 552,
                                "end": 560,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "newItems"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 546,
                                "end": 551,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all items from the list\n",
                    "description": "<p>Clear all items from the list</p>\n"
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet an item by id\n",
                    "description": "<p>Get an item by id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 412,
                                "end": 414,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 406,
                                "end": 411,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove an item from the list\n",
                    "description": "<p>Remove an item from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1028,
                                "end": 1032,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1022,
                                "end": 1027,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate an item in the list\n",
                    "description": "<p>Update an item in the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 850,
                                "end": 854,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 844,
                                "end": 849,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkPagination",
            "id": "directive-AdkPagination-2f2b2993583d0e350ef33e02250c925686340392c2dad1d5c8f753a530b0d7e635db18aa8c4998c902113bc9bab8c238936d54e7ed8ce2e1da2ea548cf0813a6",
            "file": "projects/ng-lib/src/lib/directives/pagination.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\n\n@Directive({\n  selector: '[adk-pagination]',\n  exportAs: 'adkPagination',\n  standalone: true,\n})\nexport class AdkPagination {\n  #page = signal(1);\n  readonly page = computed(() => this.#page());\n  readonly limit = signal(10);\n  readonly total = signal(0);\n\n  /**\n   * Check if the current page is the first\n   */\n  first = computed(() => this.#page() === 1);\n\n  /**\n   * Check if the current page is the last\n   */\n  last = computed(() => this.#page() * this.limit() >= this.total());\n\n  /**\n   * Go to the next page\n   */\n  next(): void {\n    if (this.last()) {\n      throw new Error('You are already on the last page');\n    }\n    this.#page.update((page) => page + 1);\n  }\n\n  /**\n   * Go to the previous page\n   */\n  previous(): void {\n    if (this.first()) {\n      throw new Error('You are already on the first page');\n    }\n    this.#page.update((page) => page - 1);\n  }\n}\n",
            "selector": "[adk-pagination]",
            "providers": [],
            "exportAs": "adkPagination",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#page",
                    "defaultValue": "signal(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "first",
                    "defaultValue": "computed(() => this.#page() === 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if the current page is the first</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nCheck if the current page is the first\n"
                },
                {
                    "name": "last",
                    "defaultValue": "computed(() => this.#page() * this.limit() >= this.total())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if the current page is the last</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nCheck if the current page is the last\n"
                },
                {
                    "name": "limit",
                    "defaultValue": "signal(10)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "page",
                    "defaultValue": "computed(() => this.#page())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "total",
                    "defaultValue": "signal(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to the next page\n",
                    "description": "<p>Go to the next page</p>\n"
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to the previous page\n",
                    "description": "<p>Go to the previous page</p>\n"
                }
            ],
            "extends": []
        },
        {
            "name": "AdkSelection",
            "id": "directive-AdkSelection-8cbf3d9e0e3ca41fa2a4cc8b55482ce47666fd2c286c907ae63bdc696532c6c497027aac7c55a44ef102587b35b22e50d6257845a09e73e0f917b8081ed86c36",
            "file": "projects/ng-lib/src/lib/directives/selection.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\n\nimport { ID } from '../tw-form-ui/models';\n\n@Directive({\n    selector: '[adk-selection]',\n    exportAs: 'adkSelection',\n    standalone: true,\n})\nexport class AdkSelection {\n    #items = signal<Record<ID, boolean>>({});\n    count = computed(() => Object.values(this.#items()).filter(Boolean).length);\n\n    items = computed(() => Object.keys(this.#items()).filter((id) => this.#items()[id]));\n    /**\n     * Select multiple items\n     * @param ids\n     */\n    select(...ids: ID[]): void {\n        this.#items.update((items) => ids.reduce((accumulator, id) => ({ ...accumulator, [id]: true }), items));\n    }\n\n    /**\n     * Deselect an item\n     * @param id\n     */\n    deselect(id: ID): void {\n        this.#items.update((items) => {\n            const { [id]: _, ...rest } = items;\n            return rest;\n        });\n    }\n\n    findObj(val: string): any | undefined {\n        let foundObj;\n        this.#items.update((items) => {\n            foundObj = items[val];\n            return items;\n        });\n        return foundObj;\n    }\n\n    /**\n     * Clear all selected items\n     */\n    clear(): void {\n        this.#items.set({});\n    }\n\n    /**\n     * Check if an item is selected\n     * @param id\n     */\n    selected(id: ID): boolean {\n        return this.#items()[id] ?? false;\n    }\n\n    /**\n     * Check if object is selected\n     */\n    selectedObj(obj: any): boolean {\n        const objStr = JSON.stringify(obj);\n        return this.#items()[objStr] ?? false;\n    }\n}\n",
            "selector": "[adk-selection]",
            "providers": [],
            "exportAs": "adkSelection",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<Record<ID, boolean>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "count",
                    "defaultValue": "computed(() => Object.values(this.#items()).filter(Boolean).length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "items",
                    "defaultValue": "computed(() => Object.keys(this.#items()).filter((id) => this.#items()[id]))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all selected items\n",
                    "description": "<p>Clear all selected items</p>\n"
                },
                {
                    "name": "deselect",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect an item\n",
                    "description": "<p>Deselect an item</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 715,
                                "end": 717,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 709,
                                "end": 714,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "findObj",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any | undefined",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect multiple items\n",
                    "description": "<p>Select multiple items</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 504,
                                "end": 507,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ids"
                            },
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 498,
                                "end": 503,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if an item is selected\n",
                    "description": "<p>Check if an item is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1260,
                                "end": 1262,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1254,
                                "end": 1259,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectedObj",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if object is selected\n",
                    "description": "<p>Check if object is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkSorting",
            "id": "directive-AdkSorting-38110c3e0875924586860aca57b742c48733a1c6c3e08163bbc86c5d557a13b2b97b6e73bbfc47ec2249ce091febe53640aa5467c78cf90b9650d12dc21bd0ac",
            "file": "projects/ng-lib/src/lib/directives/sorting.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\n\nexport interface SortableItem {\n    id: string;\n    [key: string]: any;\n}\n\n@Directive({\n    selector: '[adk-sorting]',\n    exportAs: 'adkSorting',\n    standalone: true,\n})\nexport class AdkSorting<T extends SortableItem> {\n    #items = signal<T[]>([]);\n    #sortKey = signal<string | null>(null);\n    #sortDirection = signal<'asc' | 'desc'>('asc');\n\n    sortedItems = computed(() => {\n        const items = [...this.#items()];\n        const key = this.#sortKey();\n        const direction = this.#sortDirection();\n\n        if (!key) return items;\n\n        return items.sort((a, b) => {\n            const aValue = a[key];\n            const bValue = b[key];\n\n            if (aValue < bValue) {\n                return direction === 'asc' ? -1 : 1;\n            } else if (aValue > bValue) {\n                return direction === 'asc' ? 1 : -1;\n            } else {\n                return 0;\n            }\n        });\n    });\n\n    /**\n     * Add items to the list\n     * @param newItems\n     */\n    add(...newItems: T[]): void {\n        this.#items.update((items) => [...items, ...newItems]);\n    }\n\n    /**\n     * Set the sorting key and direction\n     * @param key\n     * @param direction\n     */\n    sort(key: string, direction: 'asc' | 'desc'): void {\n        this.#sortKey.set(key);\n        this.#sortDirection.set(direction);\n    }\n\n    /**\n     * Clear the sorting\n     */\n    clearSort(): void {\n        this.#sortKey.set(null);\n        this.#sortDirection.set('asc');\n    }\n\n    /**\n     * Get the current sorting key\n     */\n    getSortKey(): string | null {\n        return this.#sortKey();\n    }\n\n    /**\n     * Get the current sorting direction\n     */\n    getSortDirection(): 'asc' | 'desc' {\n        return this.#sortDirection();\n    }\n}\n",
            "selector": "[adk-sorting]",
            "providers": [],
            "exportAs": "adkSorting",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<T[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#sortDirection",
                    "defaultValue": "signal<'asc' | 'desc'>('asc')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#sortKey",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sortedItems",
                    "defaultValue": "computed(() => {\n        const items = [...this.#items()];\n        const key = this.#sortKey();\n        const direction = this.#sortDirection();\n\n        if (!key) return items;\n\n        return items.sort((a, b) => {\n            const aValue = a[key];\n            const bValue = b[key];\n\n            if (aValue < bValue) {\n                return direction === 'asc' ? -1 : 1;\n            } else if (aValue > bValue) {\n                return direction === 'asc' ? 1 : -1;\n            } else {\n                return 0;\n            }\n        });\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newItems",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd items to the list\n",
                    "description": "<p>Add items to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1033,
                                "end": 1041,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "newItems"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1027,
                                "end": 1032,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clearSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the sorting\n",
                    "description": "<p>Clear the sorting</p>\n"
                },
                {
                    "name": "getSortDirection",
                    "args": [],
                    "optional": false,
                    "returnType": "\"asc\" | \"desc\"",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current sorting direction\n",
                    "description": "<p>Get the current sorting direction</p>\n"
                },
                {
                    "name": "getSortKey",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current sorting key\n",
                    "description": "<p>Get the current sorting key</p>\n"
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "direction",
                            "type": "\"asc\" | \"desc\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the sorting key and direction\n",
                    "description": "<p>Set the sorting key and direction</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1218,
                                "end": 1221,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1212,
                                "end": 1217,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1236,
                                "end": 1245,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "direction"
                            },
                            "type": "\"asc\" | \"desc\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1230,
                                "end": 1235,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkStepperDirective",
            "id": "directive-AdkStepperDirective-5781687d0208a073c5be85f34325e966fb472fe217ec7893d2397a803abcab5ab99a330c756a635d90cdf0c5fe7ec3be2ff6577123872f7f7bad16606ff9c516",
            "file": "projects/ng-lib/src/lib/directives/stepper.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[adkStepper]',\n  exportAs: 'adkStepper',\n})\nexport class AdkStepperDirective {\n  @Output() nextStep = new EventEmitter<void>();\n  @Output() previousStep = new EventEmitter<void>();\n\n  @HostListener('click', ['$event.target']) onClick(target: HTMLElement): void {\n    const action = target.getAttribute('data-action');\n    if (action === 'next') {\n      this.next();\n    } else if (action === 'previous') {\n      this.previous();\n    }\n  }\n\n  next(): void {\n    this.nextStep.emit();\n  }\n\n  previous(): void {\n    this.previousStep.emit();\n  }\n}\n",
            "selector": "[adkStepper]",
            "providers": [],
            "exportAs": "adkStepper",
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "nextStep",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter"
                },
                {
                    "name": "previousStep",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        },
        {
            "name": "AdkTable",
            "id": "directive-AdkTable-cc64e05dcb9b97ddedcef673c03d838b77572b1cc76415f8100751e460c475774f6e70f9beac145fa9e258b204591af9acbbb135c0c3e3b371b7eff0a30723b6",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/table.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, computed, inject, signal } from '@angular/core';\nimport { FilterCriteria, TableDataSourceState } from '../models';\nimport { Identifiable, RowData } from 'projects/ng-lib/src/lib/tw-form-ui/models';\nimport { PaginationCriteria, SortCriteria } from '../models/table.interface';\n\nimport { AdkSelection } from 'projects/ng-lib/src/lib/tw-form-ui';\n\n//TODO: figure out field for search value it should change based on the column that are visible\n//TODO: maybe make a preferences adk directive of itself handling the preferences interactions\n@Directive({\n    selector: '[adk-table]',\n    exportAs: 'adkTable',\n    standalone: true,\n    hostDirectives: [AdkSelection],\n})\nexport class AdkTable<T extends Identifiable> {\n    #selection = inject(AdkSelection, { self: true });\n    @Input() set initialData(data: T[]) {\n        this.setInitialData(data);\n    }\n\n    @Input() set columns(cols: string[]) {\n        this.setColumns(cols);\n    }\n\n    @Input() set groupBy(column: string) {\n        this.setGroupBy(column);\n    }\n\n    @Input() set filterBy(criteria: FilterCriteria) {\n        this.applyFilter(criteria);\n    }\n\n    #state = signal<TableDataSourceState>({\n        dataSource: [],\n        draggedColIndex: null,\n        filteredData: [],\n        headers: [],\n        paginationCriteria: {\n            currentPage: 1,\n            totalPages: 1,\n            pageSize: 10,\n        },\n        preferenceCriteria: {\n            visibleColumns: [],\n            groupByColumn: '',\n        },\n        selectedRows: [],\n        sortCriteria: { key: '', direction: 'ascending' },\n        filterCriteria: { column: '', value: '' },\n    });\n\n    // Computed signals for derived state\n    readonly state = computed(() => this.#state());\n    readonly headers = computed(() => this.#state().headers);\n    readonly visibleData = computed(() => this.getVisibleData());\n    readonly filteredCriteria = computed(() => this.getFilterCriteriaData());\n    readonly currentPageData = computed(() => this.getCurrentPageData());\n    readonly selectedRowsData = computed(() => this.getSelectedRowsData());\n    readonly groupedData = computed(() => this.getGroupedData());\n    readonly sortCriteriaData = computed(() => this.getSortCriteriaData());\n    readonly paginationCriteria = computed(() => this.getPaginationCriteria());\n    readonly preferenceCriteria = computed(() => this.getPreferenceCriteriaData());\n\n    setInitialData(data: Partial<T>[]) {\n        this.#state.update((state) => ({\n            ...state,\n            dataSource: data,\n            filteredData: data,\n            headers: data.length > 0 ? Object.keys(data[0]) : [],\n            preferenceCriteria: {\n                ...state.preferenceCriteria,\n                visibleColumns: data.length > 0 ? Object.keys(data[0]) : [],\n            },\n            paginationCriteria: {\n                ...state.paginationCriteria,\n                totalPages: Math.ceil(data.length / state.paginationCriteria.pageSize),\n            },\n            filterCriteria: {\n                column: data.length > 0 ? Object.keys(data[0])[0] : '',\n                value: '',\n            },\n        }));\n        this.updatePagination();\n    }\n\n    setColumns(columns: string[]) {\n        this.#state.update((state) => ({\n            ...state,\n            headers: columns,\n            preferenceCriteria: {\n                ...state.preferenceCriteria,\n                visibleColumns: columns,\n            },\n        }));\n    }\n\n    setGroupBy(column: string) {\n        this.#state.update((state) => ({\n            ...state,\n            preferenceCriteria: {\n                ...state.preferenceCriteria,\n                groupByColumn: column,\n            },\n        }));\n    }\n\n    // Drag and Drop\n    dragStart(index: number): void {\n        this.#state.update((state) => ({ ...state, draggedColIndex: index }));\n    }\n\n    dragOver(event: DragEvent): void {\n        event.preventDefault();\n    }\n\n    dragDrop(index: number): void {\n        const targetIndex = index;\n        const { draggedColIndex, dataSource, headers } = this.#state();\n        // Reset selected rows if dragging a column\n        this.#selection.clear();\n        if (draggedColIndex === null || draggedColIndex === targetIndex) return;\n        // Update headers array with dragged column\n        const newHeaders = [...headers];\n        const draggedHeader = newHeaders.splice(draggedColIndex, 1)[0];\n        newHeaders.splice(targetIndex, 0, draggedHeader);\n        // Update rows in dataSource array with dragged column\n        const newRows = dataSource.map((row: any) => {\n            const entries = Object.entries(row);\n            const draggedEntry = entries.splice(draggedColIndex, 1)[0];\n            entries.splice(targetIndex, 0, draggedEntry);\n            return Object.fromEntries(entries);\n        });\n        // Update state with new headers, rows, and reset draggedColIndex\n        this.#state.update((state) => ({\n            ...state,\n            headers: newHeaders,\n            dataSource: newRows,\n            filteredData: newRows,\n            selectedRows: [],\n            draggedColIndex: null,\n        }));\n        // Update other necessary parts of the state\n        this.updatePagination();\n    }\n\n    // Pagination\n    private updatePagination() {\n        const { dataSource, paginationCriteria } = this.#state();\n        const totalPages = Math.ceil(dataSource.length / paginationCriteria.pageSize);\n        this.#state.update((state) => ({\n            ...state,\n            paginationCriteria: {\n                ...state.paginationCriteria,\n                totalPages,\n            },\n        }));\n    }\n\n    setPage(page: number) {\n        this.#state.update((state) => ({\n            ...state,\n            paginationCriteria: {\n                ...state.paginationCriteria,\n                currentPage: page,\n            },\n        }));\n    }\n\n    setItemsPerPage(pageSize: number | string) {\n        const pageSizeNum = Number(pageSize);\n\n        this.#state.update((state) => ({\n            ...state,\n            paginationCriteria: {\n                ...state.paginationCriteria,\n                pageSize: pageSizeNum,\n                currentPage: 1,\n                totalPages: Math.ceil(state.filteredData.length / pageSizeNum),\n            },\n        }));\n        this.updatePagination();\n    }\n\n    // Sorting\n    sortBy(key: string) {\n        this.#state.update((state) => ({\n            ...state,\n            sortCriteria: {\n                key,\n                direction: state.sortCriteria.key === key && state.sortCriteria.direction === 'ascending' ? 'descending' : 'ascending',\n            },\n        }));\n        this.applySort();\n    }\n\n    private applySort() {\n        const { sortCriteria, filteredData } = this.#state();\n        const sortedData = [...filteredData].sort((a, b) => {\n            if (a[sortCriteria.key] < b[sortCriteria.key]) return sortCriteria.direction === 'ascending' ? -1 : 1;\n            if (a[sortCriteria.key] > b[sortCriteria.key]) return sortCriteria.direction === 'ascending' ? 1 : -1;\n            return 0;\n        });\n        this.#state.update((state) => ({ ...state, filteredData: sortedData }));\n    }\n\n    // Filtering\n    applyFilter(criteria: FilterCriteria) {\n        this.#state.update((state) => ({ ...state, filterCriteria: criteria }));\n        this.updateFilteredData();\n    }\n\n    filterColumns(search: string) {\n        this.#state.update((state) => ({\n            ...state,\n            filterCriteria: {\n                ...state.filterCriteria,\n                value: search,\n            },\n        }));\n        this.updateFilteredData();\n    }\n\n    private updateFilteredData() {\n        const { dataSource, filterCriteria } = this.#state();\n        const filteredData = dataSource.filter((item) =>\n            String(item[filterCriteria.column]).toLowerCase().includes(filterCriteria.value.toLowerCase())\n        );\n        this.#state.update((state) => ({ ...state, filteredData }));\n        this.updatePagination();\n    }\n\n    // Row selection\n    toggleRowSelection(row: RowData) {\n        const rowDataStr = JSON.stringify(row);\n        if (this.#selection.selected(rowDataStr)) this.#selection.deselect(rowDataStr);\n        else this.#selection.select(rowDataStr);\n        this.#state.update((state) => ({\n            ...state,\n            selectedRows: this.#selection.items(),\n        }));\n    }\n\n    toggleAllRowsSelection() {\n        this.#state.update((state) => {\n            const allSelected = state.selectedRows.length === state.dataSource.length;\n            if (allSelected) this.#selection.clear();\n            return {\n                ...state,\n                selectedRows: allSelected\n                    ? []\n                    : state.dataSource.map((item) => {\n                          const itemStr = JSON.stringify(item);\n                          this.#selection.select(itemStr);\n                          return item;\n                      }),\n            };\n        });\n    }\n\n    selected(row: RowData): boolean {\n        const selectedRowStr = JSON.stringify(row);\n        return this.#selection.selected(selectedRowStr);\n    }\n\n    // Column visibility\n    toggleColumnVisibility(columns: string[]) {\n        this.#state.update((state) => ({\n            ...state,\n            preferenceCriteria: {\n                ...state.preferenceCriteria,\n                visibleColumns: columns,\n            },\n        }));\n    }\n\n    // Helper methods for computed signals\n    private getVisibleData(): T[] {\n        const { filteredData, preferenceCriteria } = this.#state();\n        return filteredData.map((item) => {\n            const visibleItem = {} as T;\n            preferenceCriteria.visibleColumns.forEach((col) => {\n                //@ts-ignore\n                visibleItem[col] = item[col];\n            });\n            return visibleItem;\n        });\n    }\n\n    private getCurrentPageData(): T[] {\n        const { paginationCriteria } = this.#state();\n        const startIndex = (paginationCriteria.currentPage - 1) * paginationCriteria.pageSize;\n        return this.visibleData().slice(startIndex, startIndex + paginationCriteria.pageSize);\n    }\n\n    private getSelectedRowsData(): string[] {\n        const { selectedRows, dataSource } = this.#state();\n        return dataSource.filter((item) => selectedRows.includes(item)).map((item) => JSON.stringify(item));\n    }\n\n    private getGroupedData(): { [key: string]: T[] } {\n        const { filteredData, preferenceCriteria } = this.#state();\n        if (!preferenceCriteria.groupByColumn) {\n            return { All: filteredData };\n        }\n        return filteredData.reduce((groups, item) => {\n            const key = item[preferenceCriteria.groupByColumn as keyof T] as string;\n            if (!groups[key]) {\n                groups[key] = [];\n            }\n            groups[key].push(item);\n            return groups;\n        }, {} as { [key: string]: T[] });\n    }\n\n    private getSortCriteriaData(): SortCriteria {\n        const { sortCriteria } = this.#state();\n        return sortCriteria;\n    }\n\n    private getPaginationCriteria(): PaginationCriteria {\n        const { paginationCriteria } = this.#state();\n        return paginationCriteria;\n    }\n\n    private getFilterCriteriaData(): FilterCriteria {\n        const { filterCriteria } = this.#state();\n        return filterCriteria;\n    }\n\n    private getPreferenceCriteriaData() {\n        const { preferenceCriteria } = this.#state();\n        return preferenceCriteria;\n    }\n\n    // Reset to initial state\n    resetToInitialState() {\n        this.#state.update((state) => ({\n            ...state,\n            filteredData: state.dataSource,\n            paginationCriteria: {\n                currentPage: 1,\n                totalPages: Math.ceil(state.dataSource.length / state.paginationCriteria.pageSize),\n                pageSize: state.paginationCriteria.pageSize,\n            },\n            selectedRows: [],\n            sortCriteria: { key: '', direction: 'ascending' },\n            filterCriteria: { column: '', value: '' },\n            preferenceCriteria: {\n                ...state.preferenceCriteria,\n                groupByColumn: '',\n            },\n        }));\n    }\n}\n",
            "selector": "[adk-table]",
            "providers": [],
            "exportAs": "adkTable",
            "hostDirectives": [
                {
                    "name": "AdkSelection"
                }
            ],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "filterBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "FilterCriteria",
                    "decorators": []
                },
                {
                    "name": "groupBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initialData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "T[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#selection",
                    "defaultValue": "inject(AdkSelection, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#state",
                    "defaultValue": "signal<TableDataSourceState>({\n        dataSource: [],\n        draggedColIndex: null,\n        filteredData: [],\n        headers: [],\n        paginationCriteria: {\n            currentPage: 1,\n            totalPages: 1,\n            pageSize: 10,\n        },\n        preferenceCriteria: {\n            visibleColumns: [],\n            groupByColumn: '',\n        },\n        selectedRows: [],\n        sortCriteria: { key: '', direction: 'ascending' },\n        filterCriteria: { column: '', value: '' },\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentPageData",
                    "defaultValue": "computed(() => this.getCurrentPageData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "filteredCriteria",
                    "defaultValue": "computed(() => this.getFilterCriteriaData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "groupedData",
                    "defaultValue": "computed(() => this.getGroupedData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "headers",
                    "defaultValue": "computed(() => this.#state().headers)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "paginationCriteria",
                    "defaultValue": "computed(() => this.getPaginationCriteria())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "preferenceCriteria",
                    "defaultValue": "computed(() => this.getPreferenceCriteriaData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedRowsData",
                    "defaultValue": "computed(() => this.getSelectedRowsData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "sortCriteriaData",
                    "defaultValue": "computed(() => this.getSortCriteriaData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "computed(() => this.#state())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "visibleData",
                    "defaultValue": "computed(() => this.getVisibleData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "criteria",
                            "type": "FilterCriteria",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "criteria",
                            "type": "FilterCriteria",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applySort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dragDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterColumns",
                    "args": [
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "search",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentPageData",
                    "args": [],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getFilterCriteriaData",
                    "args": [],
                    "optional": false,
                    "returnType": "FilterCriteria",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getGroupedData",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPaginationCriteria",
                    "args": [],
                    "optional": false,
                    "returnType": "PaginationCriteria",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPreferenceCriteriaData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSelectedRowsData",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSortCriteriaData",
                    "args": [],
                    "optional": false,
                    "returnType": "SortCriteria",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getVisibleData",
                    "args": [],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetToInitialState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 337,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColumns",
                    "args": [
                        {
                            "name": "columns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGroupBy",
                    "args": [
                        {
                            "name": "column",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInitialData",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partial<T>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partial<T>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItemsPerPage",
                    "args": [
                        {
                            "name": "pageSize",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageSize",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortBy",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleAllRowsSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleColumnVisibility",
                    "args": [
                        {
                            "name": "columns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleRowSelection",
                    "args": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFilteredData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updatePagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "initialData": {
                    "name": "initialData",
                    "setSignature": {
                        "name": "initialData",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "T[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "T[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "cols",
                                "type": "string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "cols",
                                "type": "string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "groupBy": {
                    "name": "groupBy",
                    "setSignature": {
                        "name": "groupBy",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "column",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "column",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "filterBy": {
                    "name": "filterBy",
                    "setSignature": {
                        "name": "filterBy",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "criteria",
                                "type": "FilterCriteria",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "criteria",
                                "type": "FilterCriteria",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "AdkTablePreferences",
            "id": "directive-AdkTablePreferences-be8ae6481fca2bf351d08fc6b2d2d3f2b03e8c98ab111c5ea8bf41338e28de6c48be00cab8aa419b0276851395afa03f013a4e4977c27461c5e3292038b073b1",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/preferences.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, computed, signal } from '@angular/core';\n\nimport { PreferenceCriteria } from '../models';\n\n@Directive({\n    selector: '[adk-table-preferences]',\n    exportAs: 'adkTablePreferences',\n    standalone: true,\n})\nexport class AdkTablePreferences {\n    @Input() set preferences(value: PreferenceCriteria) {\n        this.setPreferences(value);\n    }\n\n    #state = signal<PreferenceCriteria>({ visibleColumns: [], groupByColumn: '' });\n    readonly state = computed(() => this.#state());\n    readonly visibleColumns = computed(() => this.getVisibleColumns());\n    readonly groupByColumn = computed(() => this.getGroupByColumn());\n\n    setPreferences(preferences: PreferenceCriteria): void {\n        this.#state.set(preferences);\n    }\n\n    setVisibleColumns(visibleColumns: string[]): void {\n        this.#state.set({ ...this.#state(), visibleColumns });\n    }\n\n    getVisibleColumns(): string[] {\n        const { visibleColumns } = this.#state();\n        return visibleColumns;\n    }\n\n    setGroupByColumn(groupByColumn: string): void {\n        this.#state.set({ ...this.#state(), groupByColumn });\n    }\n\n    getGroupByColumn(): string {\n        const { groupByColumn } = this.#state();\n        return groupByColumn;\n    }\n}\n",
            "selector": "[adk-table-preferences]",
            "providers": [],
            "exportAs": "adkTablePreferences",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "preferences",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "PreferenceCriteria",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#state",
                    "defaultValue": "signal<PreferenceCriteria>({ visibleColumns: [], groupByColumn: '' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "groupByColumn",
                    "defaultValue": "computed(() => this.getGroupByColumn())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "computed(() => this.#state())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "visibleColumns",
                    "defaultValue": "computed(() => this.getVisibleColumns())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getGroupByColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVisibleColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setGroupByColumn",
                    "args": [
                        {
                            "name": "groupByColumn",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupByColumn",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPreferences",
                    "args": [
                        {
                            "name": "preferences",
                            "type": "PreferenceCriteria",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "preferences",
                            "type": "PreferenceCriteria",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setVisibleColumns",
                    "args": [
                        {
                            "name": "visibleColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "visibleColumns",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "preferences": {
                    "name": "preferences",
                    "setSignature": {
                        "name": "preferences",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "PreferenceCriteria",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "PreferenceCriteria",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "AdkTooltipDirective",
            "id": "directive-AdkTooltipDirective-5602541a97a575e322e13ce35765e0477f3f00df0bc8f2ca00dcc7e044b665c0a8b5e2bd79219b679674d1a4fcb43375ede6ee8c1b6f579fc9d8789e06385c1c",
            "file": "projects/ng-lib/src/lib/directives/tooltip.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[adkTooltip]',\n    standalone: true,\n})\nexport class AdkTooltipDirective {\n    @Input('adkTooltip') tooltipText: string = '';\n    @Input() tooltipPlacement: string = 'top';\n\n    private tooltipElement!: HTMLElement;\n    private isOverflowing: boolean = false;\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    @HostListener('mouseenter') onMouseEnter() {\n        this.isOverflowing = this.checkOverflow(this.el.nativeElement);\n        if (!this.tooltipElement && this.isOverflowing) {\n            this.showTooltip();\n        }\n    }\n\n    @HostListener('mouseleave') onMouseLeave() {\n        if (this.tooltipElement) {\n            this.hideTooltip();\n        }\n    }\n\n    private showTooltip() {\n        this.tooltipElement = this.renderer.createElement('div');\n        this.renderer.appendChild(document.body, this.tooltipElement);\n        this.applyStyles();\n        this.renderer.setProperty(this.tooltipElement, 'textContent', this.tooltipText);\n        this.updateTooltipPosition();\n    }\n\n    private applyStyles() {\n        this.renderer.addClass(this.tooltipElement, 'tooltip');\n        this.renderer.setStyle(this.tooltipElement, 'position', 'absolute');\n        this.renderer.setStyle(this.tooltipElement, 'z-index', '1050');\n        this.renderer.setStyle(this.tooltipElement, 'background-color', '#000');\n        this.renderer.setStyle(this.tooltipElement, 'color', '#fff');\n        this.renderer.setStyle(this.tooltipElement, 'padding', '0.375rem 0.75rem');\n        this.renderer.setStyle(this.tooltipElement, 'border-radius', '0.375rem');\n        this.renderer.setStyle(this.tooltipElement, 'font-size', '0.875rem');\n        this.renderer.setStyle(this.tooltipElement, 'max-width', '400px');\n        this.renderer.setStyle(this.tooltipElement, 'box-shadow', '0 2px 4px rgba(0,0,0,0.2)');\n    }\n\n    private updateTooltipPosition() {\n        const hostPos = this.el.nativeElement.getBoundingClientRect();\n        const tooltipPos = this.tooltipElement.getBoundingClientRect();\n        let top, left;\n\n        switch (this.tooltipPlacement) {\n            case 'top':\n                top = hostPos.top - tooltipPos.height - 10;\n                left = hostPos.left + hostPos.width / 2 - tooltipPos.width / 2;\n                break;\n            case 'bottom':\n                top = hostPos.bottom + 10;\n                left = hostPos.left + hostPos.width / 2 - tooltipPos.width / 2;\n                break;\n            case 'left':\n                top = hostPos.top + hostPos.height / 2 - tooltipPos.height / 2;\n                left = hostPos.left - tooltipPos.width - 10;\n                break;\n            case 'right':\n                top = hostPos.top + hostPos.height / 2 - tooltipPos.height / 2;\n                left = hostPos.right + 10;\n                break;\n        }\n\n        this.renderer.setStyle(this.tooltipElement, 'top', `${top}px`);\n        this.renderer.setStyle(this.tooltipElement, 'left', `${left}px`);\n    }\n\n    private hideTooltip() {\n        this.renderer.removeChild(document.body, this.tooltipElement);\n        this.tooltipElement = null as any;\n    }\n\n    private checkOverflow(element: HTMLElement): boolean {\n        return element.scrollWidth > element.clientWidth;\n    }\n}\n",
            "selector": "[adkTooltip]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "adkTooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPlacement",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23
                }
            ],
            "propertiesClass": [
                {
                    "name": "isOverflowing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltipElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checkOverflow",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "showTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateTooltipPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AdkExpansionPanelComponent",
            "id": "component-AdkExpansionPanelComponent-360a990e158abe76caa44eca96c12fc6bf743e8d0303d8bf3c31153b46c2eb53561b6ed4ae0b1836cb864254e7e27419531ca2a2f3f06a43a86b4439924c40a9",
            "file": "projects/ng-lib/src/lib/tw-ui/components/expansion-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-expansion-panel",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative mb-3\">\n    <h6 class=\"mb-0\">\n        <button\n            class=\"relative flex items-center w-full p-4 font-semibold text-left transition-all ease-in border-b border-solid cursor-pointer border-slate-100 text-slate-700 rounded-t-1 group text-dark-500\"\n            (click)=\"togglePanel()\"\n        >\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            <i\n                class=\"absolute right-0 pt-1 text-base transition-transform fa fa-chevron-down\"\n                [ngClass]=\"{ 'rotate-180': isOpen.change$ | async }\"\n            ></i>\n        </button>\n    </h6>\n    <div\n        class=\"overflow-hidden transition-all duration-300 ease-in-out\"\n        [ngClass]=\"{\n            'h-0 opacity-0': (isOpen.change$ | async) === false,\n            'h-auto opacity-100': isOpen.change$ | async\n        }\"\n    >\n        <div class=\"p-4 text-sm leading-normal text-blue-gray-500/80\">\n            <ng-container *ngTemplateOutlet=\"bodyTemplate\"></ng-container>\n        </div>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'expansionPanelBody'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'expansionPanelHeader'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "new ImperativeObservable(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "togglePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, CommonModule } from '@angular/common';\nimport { Component, ContentChild, TemplateRef } from '@angular/core';\n\nimport { ImperativeObservable } from '../../utils';\n\n@Component({\n    selector: 'adk-expansion-panel',\n    standalone: true,\n    imports: [CommonModule, AsyncPipe],\n    template: `\n        <div class=\"relative mb-3\">\n            <h6 class=\"mb-0\">\n                <button\n                    class=\"relative flex items-center w-full p-4 font-semibold text-left transition-all ease-in border-b border-solid cursor-pointer border-slate-100 text-slate-700 rounded-t-1 group text-dark-500\"\n                    (click)=\"togglePanel()\"\n                >\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                    <i\n                        class=\"absolute right-0 pt-1 text-base transition-transform fa fa-chevron-down\"\n                        [ngClass]=\"{ 'rotate-180': isOpen.change$ | async }\"\n                    ></i>\n                </button>\n            </h6>\n            <div\n                class=\"overflow-hidden transition-all duration-300 ease-in-out\"\n                [ngClass]=\"{\n                    'h-0 opacity-0': (isOpen.change$ | async) === false,\n                    'h-auto opacity-100': isOpen.change$ | async\n                }\"\n            >\n                <div class=\"p-4 text-sm leading-normal text-blue-gray-500/80\">\n                    <ng-container *ngTemplateOutlet=\"bodyTemplate\"></ng-container>\n                </div>\n            </div>\n        </div>\n    `,\n})\nexport class AdkExpansionPanelComponent {\n    isOpen = new ImperativeObservable(false);\n\n    @ContentChild('expansionPanelHeader') headerTemplate!: TemplateRef<any>;\n    @ContentChild('expansionPanelBody') bodyTemplate!: TemplateRef<any>;\n\n    togglePanel(): void {\n        this.isOpen.value = !this.isOpen.value;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4378805a8d8092af328480e3f30b40cf056a7477bf9b8120ea29e4b5172753f946414f6672038a74af8389d697005282389574f74f9f5edbbf8f79079507cabb",
            "file": "projects/ng-lib/src/lib/tw-ui/components/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-button",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: auto;\n            }\n            button:disabled {\n                cursor: not-allowed;\n                opacity: 0.5;\n            }\n        "
            ],
            "template": "<button\n    [ngClass]=\"getButtonClasses()\"\n    class=\"select-none rounded-lg bg-blue-500 py-2 px-4 text-center align-middle font-sans text-xs font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none w-full {{\n        disabled ? (disabledStyle$ | async) : (color$ | async)\n    }}\"\n    [disabled]=\"disabled\"\n    type=\"button\"\n>\n    <ng-content></ng-content>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "'bg-blue-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"warn\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledEffect",
                    "defaultValue": "'opacity-50 cursor-not-allowed opacity-50 disabled:cursor-not-allowed disabled:opacity-50'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hoverEffect",
                    "defaultValue": "'hover:shadow-lg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'text-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "\"filled\" | \"gradient\" | \"outlined\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "btnStyle",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "colorClasses",
                    "defaultValue": "{\n        primary: 'bg-blue-500',\n        secondary: 'bg-gray-700',\n        success: 'bg-green-500',\n        warn: 'bg-amber-500',\n        danger: 'bg-red-500',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "disabledStyle",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "variantClasses",
                    "defaultValue": "{\n        filled: 'text-white shadow-md shadow-gray-900/10',\n        gradient: 'bg-gradient-to-r from-{color}-500 to-{color}-600 text-white',\n        outlined: 'border border-{color}-500 text-{color}-500 hover:bg-{color}-500 hover:text-white',\n        text: 'text-{color}-500 hover:text-{color}-600',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getButtonClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { CommonModule, NgClass } from '@angular/common';\n\n@Component({\n    selector: 'adk-button',\n    standalone: true,\n    imports: [CommonModule, NgClass],\n    template: `\n        <button\n            [ngClass]=\"getButtonClasses()\"\n            class=\"select-none rounded-lg bg-blue-500 py-2 px-4 text-center align-middle font-sans text-xs font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none w-full {{\n                disabled ? (disabledStyle$ | async) : (color$ | async)\n            }}\"\n            [disabled]=\"disabled\"\n            type=\"button\"\n        >\n            <ng-content></ng-content>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: auto;\n            }\n            button:disabled {\n                cursor: not-allowed;\n                opacity: 0.5;\n            }\n        `,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent implements OnInit, OnChanges {\n    @Input() disabled = false;\n    @Input() variant: 'filled' | 'gradient' | 'outlined' | 'text' = 'filled';\n    @Input() color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger' = 'primary';\n    @Input() type: 'button' | 'submit' | 'reset' = 'button';\n    @Input() customClasses = '';\n    @Input() bgColor = 'bg-blue-500';\n    @Input() textColor = 'text-white';\n    @Input() hoverEffect = 'hover:shadow-lg';\n    @Input() disabledEffect = 'opacity-50 cursor-not-allowed opacity-50 disabled:cursor-not-allowed disabled:opacity-50';\n\n    btnStyle = new BehaviorSubject<string>('');\n    disabledStyle = new BehaviorSubject<string>('');\n\n    get color$(): Observable<string> {\n        return this.btnStyle.asObservable();\n    }\n\n    get disabledStyle$(): Observable<string> {\n        return this.disabledStyle.asObservable();\n    }\n\n    private readonly colorClasses = {\n        primary: 'bg-blue-500',\n        secondary: 'bg-gray-700',\n        success: 'bg-green-500',\n        warn: 'bg-amber-500',\n        danger: 'bg-red-500',\n    };\n\n    private readonly variantClasses = {\n        filled: 'text-white shadow-md shadow-gray-900/10',\n        gradient: 'bg-gradient-to-r from-{color}-500 to-{color}-600 text-white',\n        outlined: 'border border-{color}-500 text-{color}-500 hover:bg-{color}-500 hover:text-white',\n        text: 'text-{color}-500 hover:text-{color}-600',\n    };\n\n    ngOnInit(): void {\n        this.getButtonClasses();\n    }\n\n    ngOnChanges({ disabled, variant, color, customClasses, bgColor, textColor, hoverEffect, disabledEffect }: SimpleChanges) {\n        if (variant || color || customClasses || bgColor || textColor || hoverEffect || disabledEffect || disabled) {\n            this.disabled = disabled ? disabled.currentValue : false;\n            this.getButtonClasses();\n        }\n    }\n\n    getButtonClasses(): string {\n        const baseClasses =\n            'select-none rounded-lg py-2 px-4 text-center align-middle font-sans text-xs font-bold uppercase transition-all w-full';\n        const variantClass = this.variantClasses[this.variant] || this.variantClasses['filled'];\n        const colorClass = this.colorClasses[this.color] || this.colorClasses['primary'];\n        const hoverClass = this.disabled ? '' : this.hoverEffect;\n        const disabledClass = this.disabled ? this.disabledEffect : '';\n\n        return `${baseClasses} ${colorClass} ${variantClass} ${hoverClass} ${disabledClass} ${this.customClasses}`;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: auto;\n            }\n            button:disabled {\n                cursor: not-allowed;\n                opacity: 0.5;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "color$": {
                    "name": "color$",
                    "getSignature": {
                        "name": "color$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 49
                    }
                },
                "disabledStyle$": {
                    "name": "disabledStyle$",
                    "getSignature": {
                        "name": "disabledStyle$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 53
                    }
                }
            }
        },
        {
            "name": "ButtonWrapperComponent",
            "id": "component-ButtonWrapperComponent-3a01ded2d90c4f155273845d26730a890e0edfc8d46ee37b2eb0da9a258726aa4885cec3f605e4add22a45531b5713b099f145cfbec8d6aa345b224bac184602",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<adk-button [disabled]=\"disabled\" [color]=\"color\" [variant]=\"variant\"> Content for ng-content goes here </adk-button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"warn\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"filled\" | \"gradient\" | \"outlined\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "handleButtonRouteLink",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { type Meta, type StoryObj } from '@storybook/angular';\n\nimport { ButtonComponent } from '../button.component';\n\nimport { expect } from '@storybook/jest';\nimport { userEvent, within } from '@storybook/test';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'storybook-button-wrapper',\n    standalone: true,\n    imports: [CommonModule, ButtonComponent],\n    template: ` <adk-button [disabled]=\"disabled\" [color]=\"color\" [variant]=\"variant\"> Content for ng-content goes here </adk-button> `,\n})\nclass ButtonWrapperComponent {\n    @Input() disabled = false;\n    @Input() variant: 'filled' | 'gradient' | 'outlined' | 'text' = 'filled';\n    @Input() color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger' = 'primary';\n    @Output() handleButtonRouteLink = new EventEmitter();\n}\nconst meta: Meta<ButtonWrapperComponent> = {\n    component: ButtonWrapperComponent,\n    title: '(TW) Angular UI / Components / Button',\n    tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonWrapperComponent>;\n\nexport const Primary: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'primary',\n    },\n};\n\nexport const Secondary: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'secondary',\n    },\n};\n\nexport const Success: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'success',\n    },\n};\n\nexport const Danger: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'danger',\n    },\n};\n\nexport const Warn: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'warn',\n    },\n};\n\nexport const ButtonActionsTesting: Story = {\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const button = canvasElement.querySelector('adk-button');\n        if (button) {\n            await userEvent.click(button);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardWrapperComponent",
            "id": "component-CardWrapperComponent-eaa602943608838b0f93c27a616b06f204b880e81f6f3c08b1831ceccd3ce6895c19a6b6624a44b2abed912971b7ecdf89135e18546b91440020622857b79ffc",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-card-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<tw-card>\n    <h5\n        class=\"adk-card-header block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n    >\n        UI/UX Review Check\n    </h5>\n    <p class=\"adk-card-subtitle block font-sans text-base antialiased font-light leading-relaxed text-inherit\">\n        Card content goes here\n    </p>\n    <div class=\"adk-card-body\">Content for ng-content goes here</div>\n    <div class=\"adk-card-footer\">\n        <adk-button> Read More </adk-button>\n    </div>\n</tw-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { type Meta, type StoryObj } from '@storybook/angular';\n\nimport { expect } from '@storybook/jest';\nimport { userEvent, within } from '@storybook/test';\nimport { CommonModule } from '@angular/common';\nimport { TwCardComponent } from '../card/tw-card.component';\nimport { ButtonComponent } from '../button.component';\n\n@Component({\n    selector: 'storybook-card-wrapper',\n    standalone: true,\n    imports: [CommonModule, TwCardComponent, ButtonComponent],\n    template: `\n        <tw-card>\n            <h5\n                class=\"adk-card-header block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n            >\n                UI/UX Review Check\n            </h5>\n            <p class=\"adk-card-subtitle block font-sans text-base antialiased font-light leading-relaxed text-inherit\">\n                Card content goes here\n            </p>\n            <div class=\"adk-card-body\">Content for ng-content goes here</div>\n            <div class=\"adk-card-footer\">\n                <adk-button> Read More </adk-button>\n            </div>\n        </tw-card>\n    `,\n})\nclass CardWrapperComponent {}\nconst meta: Meta<CardWrapperComponent> = {\n    component: CardWrapperComponent,\n    title: '(TW) Angular UI / Components / Card',\n    tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<CardWrapperComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const CardActionsTesting: Story = {\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const card = canvasElement.querySelector('adk-card');\n        if (card) {\n            await userEvent.click(card);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-353ab7df0c90a3f39b9f62d427c12bdb5865e142905ed2607d6f2f80fcf27683591601f3b368841555f41c9dc6845494cd9917dbc200b810aba46c961eec37e9",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-checkbox",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "@if (options.length > 0) {\n<div class=\"flex flex-col gap-4\">\n    @for (option of options; track (option.id)) {\n    <div class=\"inline-flex items-center\">\n        <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\n                [checked]=\"formControl[field.key][option.id].value\"\n                [name]=\"option.label\"\n                [id]=\"option.id\"\n                [value]=\"option.value\"\n                [formControl]=\"formControl[field.key][option.id]\"\n                [ngClass]=\"inputClass\"\n                (change)=\"onCheckChange($event, option.id)\"\n            />\n            <span\n                class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    class=\"h-3.5 w-3.5\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"1\"\n                >\n                    <path\n                        fill-rule=\"evenodd\"\n                        d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                        clip-rule=\"evenodd\"\n                    ></path>\n                </svg>\n            </span>\n        </label>\n        <label class=\"mt-px font-light text-gray-700 cursor-pointer select-none\" htmlFor=\"ripple-on\"> {{ option.label }}</label>\n    </div>\n    }\n</div>\n} @else {\n<div class=\"inline-flex items-center\">\n    <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\n        <input\n            type=\"checkbox\"\n            class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\n            [checked]=\"formControl[field.key].value\"\n            [name]=\"id\"\n            [id]=\"id\"\n            [value]=\"field.value\"\n            [formControl]=\"formControl[field.key]\"\n            [ngClass]=\"inputClass\"\n            (change)=\"onCheckChange($event, id)\"\n        />\n        <span\n            class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\n        >\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"h-3.5 w-3.5\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                stroke=\"currentColor\"\n                stroke-width=\"1\"\n            >\n                <path\n                    fill-rule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                    clip-rule=\"evenodd\"\n                ></path>\n            </svg>\n        </span>\n    </label>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "Field",
                    "decorators": []
                },
                {
                    "name": "isChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 99
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCheckChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { AfterViewInit, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n    standalone: true,\n    selector: 'adk-checkbox',\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        @if (options.length > 0) {\n        <div class=\"flex flex-col gap-4\">\n            @for (option of options; track (option.id)) {\n            <div class=\"inline-flex items-center\">\n                <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\">\n                    <input\n                        type=\"checkbox\"\n                        class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\n                        [checked]=\"formControl[field.key][option.id].value\"\n                        [name]=\"option.label\"\n                        [id]=\"option.id\"\n                        [value]=\"option.value\"\n                        [formControl]=\"formControl[field.key][option.id]\"\n                        [ngClass]=\"inputClass\"\n                        (change)=\"onCheckChange($event, option.id)\"\n                    />\n                    <span\n                        class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\n                    >\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            class=\"h-3.5 w-3.5\"\n                            viewBox=\"0 0 20 20\"\n                            fill=\"currentColor\"\n                            stroke=\"currentColor\"\n                            stroke-width=\"1\"\n                        >\n                            <path\n                                fill-rule=\"evenodd\"\n                                d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                                clip-rule=\"evenodd\"\n                            ></path>\n                        </svg>\n                    </span>\n                </label>\n                <label class=\"mt-px font-light text-gray-700 cursor-pointer select-none\" htmlFor=\"ripple-on\"> {{ option.label }}</label>\n            </div>\n            }\n        </div>\n        } @else {\n        <div class=\"inline-flex items-center\">\n            <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\n                <input\n                    type=\"checkbox\"\n                    class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\n                    [checked]=\"formControl[field.key].value\"\n                    [name]=\"id\"\n                    [id]=\"id\"\n                    [value]=\"field.value\"\n                    [formControl]=\"formControl[field.key]\"\n                    [ngClass]=\"inputClass\"\n                    (change)=\"onCheckChange($event, id)\"\n                />\n                <span\n                    class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        class=\"h-3.5 w-3.5\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        stroke=\"currentColor\"\n                        stroke-width=\"1\"\n                    >\n                        <path\n                            fill-rule=\"evenodd\"\n                            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                            clip-rule=\"evenodd\"\n                        ></path>\n                    </svg>\n                </span>\n            </label>\n        </div>\n        }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class CheckboxComponent implements OnChanges, AfterViewInit {\n    @Input() field!: Field;\n    @Input() isChecked?: boolean;\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n    formControl: { [key: string]: AbstractControl | any } = {};\n\n    get id() {\n        return `${this.field.id}`;\n    }\n\n    get props() {\n        return this.field?.props;\n    }\n\n    get options() {\n        return this.props?.options ?? [];\n    }\n\n    get autocomplete() {\n        return this.props?.autocomplete ?? 'off';\n    }\n\n    get label() {\n        return this.field.label;\n    }\n\n    get description() {\n        return this.field?.description;\n    }\n\n    get placeholder() {\n        return this.field.placeholder ?? '';\n    }\n\n    get class() {\n        return this.props?.class ?? 'sm:col-span-3';\n    }\n\n    get labelClass() {\n        return this.props?.labelClass ?? 'font-medium text-gray-900';\n    }\n\n    get inputClass() {\n        return this.props?.inputClass ?? 'h-4 w-4 rounded border-blue-300 text-blue-600 focus:ring-blue-600';\n    }\n\n    ngAfterViewInit(): void {\n        this.initFormControl();\n    }\n\n    ngOnChanges({ field, isChecked }: SimpleChanges): void {\n        if (field) {\n            this.field = field.currentValue;\n            this.initFormControl();\n        }\n        if (isChecked) {\n            this.formControl[this.field.key].patchValue(isChecked.currentValue);\n        }\n    }\n\n    private initFormControl(): void {\n        this.formControl[this.field.key] = this.field.formControl;\n        if (this.options.length > 0) {\n            this.options.forEach((option: any) => {\n                this.formControl[this.field.key][option.id] = new FormControl(option.value);\n            });\n        } else {\n            this.formControl[this.field.key] = new FormControl(false);\n        }\n    }\n\n    onCheckChange(event: any, id: any) {\n        let value = event.target.checked;\n        if (this.options.length > 0) {\n            this.formControl[this.field.key][id].patchValue(value);\n        } else {\n            value = this.isChecked !== undefined ? this.isChecked : value;\n            this.formControl[this.field.key].patchValue(value);\n        }\n        this.valueChange.emit(this.field.value);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "accessors": {
                "id": {
                    "name": "id",
                    "getSignature": {
                        "name": "id",
                        "type": "",
                        "returnType": "",
                        "line": 101
                    }
                },
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 109
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 113
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 117
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 121
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 125
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 129
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 133
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 137
                    }
                }
            }
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-e1d9b68535e0a4b32e8c2755bc49864a7b5fd66c054774ab5478166a107d3d4444a36d076667a9a6b0449bf42ff1077113169c7920c8fb1019d5c5d221aa11d2",
            "file": "projects/ng-lib/src/lib/tw-ui/components/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-dialog",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "@if(isOpen) {\n<div\n    class=\"fixed inset-0 z-[999] grid h-screen w-screen place-items-center bg-black bg-opacity-60 backdrop-blur-sm transition-opacity duration-300\"\n>\n    <div class=\"relative mx-auto flex w-full max-w-[24rem] flex-col rounded-xl bg-white text-gray-700 shadow-md\">\n        <ng-content></ng-content>\n    </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "isOpenChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'tw-dialog',\n    standalone: true,\n    imports: [CommonModule],\n    template: `\n        @if(isOpen) {\n        <div\n            class=\"fixed inset-0 z-[999] grid h-screen w-screen place-items-center bg-black bg-opacity-60 backdrop-blur-sm transition-opacity duration-300\"\n        >\n            <div class=\"relative mx-auto flex w-full max-w-[24rem] flex-col rounded-xl bg-white text-gray-700 shadow-md\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n        }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DialogComponent {\n    @Input() isOpen = false;\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    closeDialog() {\n        this.isOpen = false;\n        this.isOpenChange.emit(this.isOpen);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "DragDropExampleComponent",
            "id": "component-DragDropExampleComponent-781bdb222dd11abd952275bf3ca0e62a1d6aa6d09fc2e9a55c1f2e2af4481c6b08d6ab6d2b20d619793c3e32ae06ac094b1b335d38b08eb08b83c720139cf645",
            "file": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drag-drop-example",
            "styleUrls": [],
            "styles": [
                "\n            .drag-item {\n                width: 100px;\n                height: 100px;\n                background-color: #f0f0f0;\n                border: 1px solid #ccc;\n                text-align: center;\n                line-height: 100px;\n            }\n            .drop-zone {\n                width: 200px;\n                height: 200px;\n                background-color: #f9f9f9;\n                border: 2px dashed #ccc;\n                margin-top: 20px;\n                text-align: center;\n                line-height: 200px;\n            }\n        "
            ],
            "template": "<div class=\"drag-item\" adkDraggable (dragStart)=\"onDragStart($event)\" (dragEnd)=\"onDragEnd($event)\">Drag me!</div>\n<div class=\"drop-zone\" adkDroppable (drop)=\"onDrop($event)\">\n    {{ droppedItem ? 'Dropped: ' + droppedItem : 'Drop here' }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "droppedItem",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkDraggableDirective",
                    "type": "directive"
                },
                {
                    "name": "AdkDroppableDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkDraggableDirective } from '../drag';\nimport { AdkDroppableDirective } from '../drop';\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-drag-drop-example',\n    template: `\n        <div class=\"drag-item\" adkDraggable (dragStart)=\"onDragStart($event)\" (dragEnd)=\"onDragEnd($event)\">Drag me!</div>\n        <div class=\"drop-zone\" adkDroppable (drop)=\"onDrop($event)\">\n            {{ droppedItem ? 'Dropped: ' + droppedItem : 'Drop here' }}\n        </div>\n    `,\n    styles: [\n        `\n            .drag-item {\n                width: 100px;\n                height: 100px;\n                background-color: #f0f0f0;\n                border: 1px solid #ccc;\n                text-align: center;\n                line-height: 100px;\n            }\n            .drop-zone {\n                width: 200px;\n                height: 200px;\n                background-color: #f9f9f9;\n                border: 2px dashed #ccc;\n                margin-top: 20px;\n                text-align: center;\n                line-height: 200px;\n            }\n        `,\n    ],\n    standalone: true,\n    imports: [CommonModule, AdkDraggableDirective, AdkDroppableDirective],\n})\nexport class DragDropExampleComponent {\n    droppedItem: string | null = null;\n\n    onDragStart(_event: DragEvent) {}\n\n    onDragEnd(_event: DragEvent) {}\n\n    onDrop(_event: DragEvent) {\n        this.droppedItem = 'Item dropped';\n    }\n}\n\nconst meta: Meta<typeof DragDropExampleComponent> = {\n    component: DragDropExampleComponent,\n    title: '(TW) Angular UI / Directives / Draggable Table',\n};\n\nexport default meta;\ntype Story = StoryObj<typeof DragDropExampleComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            .drag-item {\n                width: 100px;\n                height: 100px;\n                background-color: #f0f0f0;\n                border: 1px solid #ccc;\n                text-align: center;\n                line-height: 100px;\n            }\n            .drop-zone {\n                width: 200px;\n                height: 200px;\n                background-color: #f9f9f9;\n                border: 2px dashed #ccc;\n                margin-top: 20px;\n                text-align: center;\n                line-height: 200px;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "DummyTableComponent",
            "id": "component-DummyTableComponent-7778fa202ad12bfedfd939e08174bd70d1b5d0fde11b64afbcf0a1321cc5eb66afc4139707abeccba94bf52e8ea816dd1d8eadc97c2682af7e7218edaec72d31",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dummy-table",
            "styleUrls": [],
            "styles": [
                "\n            .group-header {\n                cursor: pointer;\n                background-color: #f0f0f0;\n            }\n            .group-header:hover {\n                background-color: #e0e0e0;\n            }\n        "
            ],
            "template": "<select [(ngModel)]=\"filterColumn\" (change)=\"onFilterColumnChange($event.target.value)\">\n    <option *ngFor=\"let col of columns\" [value]=\"col\">Filter by {{ col }}</option>\n</select>\n<input [(ngModel)]=\"filterValue\" (input)=\"applyFilter()\" [ngModelOptions]=\"{ standalone: true }\" placeholder=\"Enter filter value\" />\n<select [(ngModel)]=\"groupByColumn\" (change)=\"adkTable.setGroupBy(groupByColumn)\">\n    <option value=\"\">No Grouping</option>\n    <option *ngFor=\"let col of columns\" [value]=\"col\">Group by {{ col }}</option>\n</select>\n<table>\n    <thead>\n        <tr>\n            <th>\n                <input\n                    type=\"checkbox\"\n                    [checked]=\"adkTable.selectedRowsData().length === adkTable.visibleData().length\"\n                    (change)=\"adkTable.toggleAllRowsSelection()\"\n                />\n            </th>\n            <th\n                *ngFor=\"let col of columns; let i = index\"\n                (click)=\"adkTable.sortBy(col)\"\n                draggable=\"true\"\n                (dragstart)=\"adkTable.dragStart(i)\"\n                (dragover)=\"$event.preventDefault()\"\n                (drop)=\"onDragDrop(i)\"\n            >\n                {{ col }}\n                <span *ngIf=\"adkTable.sortCriteriaData().key === col\">\n                    {{ adkTable.sortCriteriaData().direction === 'ascending' ? '▲' : '▼' }}\n                </span>\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <ng-container *ngIf=\"groupByColumn; else flatView\">\n            <ng-container *ngFor=\"let group of adkTable.groupedData() | keyvalue\">\n                <tr (click)=\"toggleGroup(group.key)\" class=\"group-header\">\n                    <td [attr.colspan]=\"columns.length + 1\">\n                        {{ group.key }} ({{ group.value.length }} items)\n                        <span>{{ expandedGroups[group.key] ? '▼' : '▶' }}</span>\n                    </td>\n                </tr>\n                <ng-container *ngIf=\"expandedGroups[group.key]\">\n                    <tr *ngFor=\"let row of group.value\">\n                        <td>\n                            <input\n                                type=\"checkbox\"\n                                [checked]=\"adkTable.selectedRowsData().includes(row)\"\n                                (change)=\"adkTable.toggleRowSelection(row)\"\n                            />\n                        </td>\n                        <td *ngFor=\"let col of columns\">{{ row[col] }}</td>\n                    </tr>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n        <ng-template #flatView>\n            <tr *ngFor=\"let row of adkTable.currentPageData()\">\n                <td>\n                    <input type=\"checkbox\" [checked]=\"adkTable.selected(row)\" (change)=\"adkTable.toggleRowSelection(row)\" />\n                </td>\n                <td *ngFor=\"let col of columns\">{{ row[col] }}</td>\n            </tr>\n        </ng-template>\n    </tbody>\n</table>\n<div>\n    <button\n        (click)=\"adkTable.setPage(adkTable.paginationCriteria().currentPage - 1)\"\n        [disabled]=\"adkTable.paginationCriteria().currentPage === 1\"\n    >\n        Previous\n    </button>\n    <span>Page {{ adkTable.paginationCriteria().currentPage }} of {{ adkTable.paginationCriteria().totalPages }}</span>\n    <button\n        (click)=\"adkTable.setPage(adkTable.paginationCriteria().currentPage + 1)\"\n        [disabled]=\"adkTable.paginationCriteria().currentPage === adkTable.paginationCriteria().totalPages\"\n    >\n        Next\n    </button>\n    <select [(ngModel)]=\"itemsPerPage\" (change)=\"adkTable.setItemsPerPage(itemsPerPage)\">\n        <option [value]=\"5\">5</option>\n        <option [value]=\"10\">10</option>\n        <option [value]=\"25\">25</option>\n    </select>\n    <span>Items per page</span>\n</div>\n<div>\n    <p>Selected rows: {{ adkTable.selectedRowsData().length }}</p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkTable"
                }
            ],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 122,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "adkTable",
                    "defaultValue": "inject(AdkTable, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "expandedGroups",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "filterColumn",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "filterValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "groupByColumn",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "itemsPerPage",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 126
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDragDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFilterColumnChange",
                    "args": [
                        {
                            "name": "column",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemsPerPageChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleGroup",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "AdkTable"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, inject } from '@angular/core';\nimport { Meta, StoryObj, moduleMetadata } from '@storybook/angular';\n\nimport { AdkTable } from '../table';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n    selector: 'app-dummy-table',\n    standalone: true,\n    imports: [CommonModule, FormsModule, AdkTable],\n    hostDirectives: [AdkTable],\n    template: `\n        <select [(ngModel)]=\"filterColumn\" (change)=\"onFilterColumnChange($event.target.value)\">\n            <option *ngFor=\"let col of columns\" [value]=\"col\">Filter by {{ col }}</option>\n        </select>\n        <input [(ngModel)]=\"filterValue\" (input)=\"applyFilter()\" [ngModelOptions]=\"{ standalone: true }\" placeholder=\"Enter filter value\" />\n        <select [(ngModel)]=\"groupByColumn\" (change)=\"adkTable.setGroupBy(groupByColumn)\">\n            <option value=\"\">No Grouping</option>\n            <option *ngFor=\"let col of columns\" [value]=\"col\">Group by {{ col }}</option>\n        </select>\n        <table>\n            <thead>\n                <tr>\n                    <th>\n                        <input\n                            type=\"checkbox\"\n                            [checked]=\"adkTable.selectedRowsData().length === adkTable.visibleData().length\"\n                            (change)=\"adkTable.toggleAllRowsSelection()\"\n                        />\n                    </th>\n                    <th\n                        *ngFor=\"let col of columns; let i = index\"\n                        (click)=\"adkTable.sortBy(col)\"\n                        draggable=\"true\"\n                        (dragstart)=\"adkTable.dragStart(i)\"\n                        (dragover)=\"$event.preventDefault()\"\n                        (drop)=\"onDragDrop(i)\"\n                    >\n                        {{ col }}\n                        <span *ngIf=\"adkTable.sortCriteriaData().key === col\">\n                            {{ adkTable.sortCriteriaData().direction === 'ascending' ? '▲' : '▼' }}\n                        </span>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <ng-container *ngIf=\"groupByColumn; else flatView\">\n                    <ng-container *ngFor=\"let group of adkTable.groupedData() | keyvalue\">\n                        <tr (click)=\"toggleGroup(group.key)\" class=\"group-header\">\n                            <td [attr.colspan]=\"columns.length + 1\">\n                                {{ group.key }} ({{ group.value.length }} items)\n                                <span>{{ expandedGroups[group.key] ? '▼' : '▶' }}</span>\n                            </td>\n                        </tr>\n                        <ng-container *ngIf=\"expandedGroups[group.key]\">\n                            <tr *ngFor=\"let row of group.value\">\n                                <td>\n                                    <input\n                                        type=\"checkbox\"\n                                        [checked]=\"adkTable.selectedRowsData().includes(row)\"\n                                        (change)=\"adkTable.toggleRowSelection(row)\"\n                                    />\n                                </td>\n                                <td *ngFor=\"let col of columns\">{{ row[col] }}</td>\n                            </tr>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <ng-template #flatView>\n                    <tr *ngFor=\"let row of adkTable.currentPageData()\">\n                        <td>\n                            <input type=\"checkbox\" [checked]=\"adkTable.selected(row)\" (change)=\"adkTable.toggleRowSelection(row)\" />\n                        </td>\n                        <td *ngFor=\"let col of columns\">{{ row[col] }}</td>\n                    </tr>\n                </ng-template>\n            </tbody>\n        </table>\n        <div>\n            <button\n                (click)=\"adkTable.setPage(adkTable.paginationCriteria().currentPage - 1)\"\n                [disabled]=\"adkTable.paginationCriteria().currentPage === 1\"\n            >\n                Previous\n            </button>\n            <span>Page {{ adkTable.paginationCriteria().currentPage }} of {{ adkTable.paginationCriteria().totalPages }}</span>\n            <button\n                (click)=\"adkTable.setPage(adkTable.paginationCriteria().currentPage + 1)\"\n                [disabled]=\"adkTable.paginationCriteria().currentPage === adkTable.paginationCriteria().totalPages\"\n            >\n                Next\n            </button>\n            <select [(ngModel)]=\"itemsPerPage\" (change)=\"adkTable.setItemsPerPage(itemsPerPage)\">\n                <option [value]=\"5\">5</option>\n                <option [value]=\"10\">10</option>\n                <option [value]=\"25\">25</option>\n            </select>\n            <span>Items per page</span>\n        </div>\n        <div>\n            <p>Selected rows: {{ adkTable.selectedRowsData().length }}</p>\n        </div>\n    `,\n    styles: [\n        `\n            .group-header {\n                cursor: pointer;\n                background-color: #f0f0f0;\n            }\n            .group-header:hover {\n                background-color: #e0e0e0;\n            }\n        `,\n    ],\n})\nexport class DummyTableComponent implements OnInit {\n    adkTable = inject(AdkTable, { self: true });\n    @Input() set data(value: any[]) {\n        this.adkTable.initialData = value;\n    }\n    @Input() columns: string[] = [];\n\n    groupByColumn: string = '';\n    expandedGroups: { [key: string]: boolean } = {};\n    itemsPerPage: number = 10;\n\n    filterColumn: string = '';\n    filterValue: string = '';\n\n    ngOnInit(): void {\n        if (this.columns.length > 0) {\n            this.filterColumn = this.columns[0];\n        }\n    }\n\n    onFilterColumnChange(column: string) {\n        this.filterColumn = column;\n        this.applyFilter();\n    }\n\n    applyFilter() {\n        this.adkTable.applyFilter({ column: this.filterColumn, value: this.filterValue });\n    }\n\n    toggleGroup(key: string) {\n        this.expandedGroups[key] = !this.expandedGroups[key];\n    }\n\n    onItemsPerPageChange() {\n        this.adkTable.setItemsPerPage(this.itemsPerPage);\n    }\n\n    onDragDrop(index: number) {\n        this.adkTable.dragDrop(index);\n        this.columns = this.adkTable.headers();\n    }\n}\n\nconst meta: Meta<DummyTableComponent> = {\n    title: 'TailwindUI/Components/Directives/AdkTable',\n    component: DummyTableComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [DummyTableComponent],\n        }),\n    ],\n    tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<DummyTableComponent>;\n\nconst sampleData = [\n    { uid: 1, name: 'John Doe', age: 30, department: 'IT' },\n    { uid: 2, name: 'Jane Smith', age: 25, department: 'HR' },\n    { uid: 3, name: 'Bob Johnson', age: 35, department: 'IT' },\n    { uid: 4, name: 'Alice Brown', age: 28, department: 'Finance' },\n    { uid: 5, name: 'Charlie Davis', age: 42, department: 'HR' },\n    { uid: 6, name: 'Eva Wilson', age: 33, department: 'Finance' },\n    { uid: 7, name: 'Frank Miller', age: 39, department: 'IT' },\n];\n\nexport const Default: Story = {\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n};\n\nexport const WithFiltering: Story = {\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n};\n\nexport const WithSorting: Story = {\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const ageHeader = canvas.querySelector('th:nth-child(3)');\n            if (ageHeader) {\n                // @ts-ignore\n                ageHeader.click();\n            }\n        }\n    },\n};\n\nexport const WithPagination: Story = {\n    args: {\n        data: Array(50)\n            .fill(null)\n            .map((_, i) => ({\n                id: i + 1,\n                name: `Person ${i + 1}`,\n                age: 20 + (i % 30),\n                department: ['IT', 'HR', 'Finance'][i % 3],\n            })),\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n};\n\nexport const WithSelection: Story = {\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const checkboxes = canvas.querySelectorAll('input[type=\"checkbox\"]');\n            if (checkboxes.length > 1) {\n                (checkboxes[1] as HTMLInputElement).click();\n                (checkboxes[2] as HTMLInputElement).click();\n            }\n        }\n    },\n};\n\nexport const GroupedByDepartment: Story = {\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const select = canvas.querySelector('select');\n            if (select) {\n                select.value = 'department';\n                select.dispatchEvent(new Event('change'));\n            }\n        }\n    },\n};\n\nexport const WithDragAndDrop: Story = {\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const headers = canvas.querySelectorAll('th');\n            if (headers.length > 2) {\n                const dragEvent = new DragEvent('dragstart', {\n                    bubbles: true,\n                    cancelable: true,\n                });\n                headers[1].dispatchEvent(dragEvent);\n\n                const dropEvent = new DragEvent('drop', {\n                    bubbles: true,\n                    cancelable: true,\n                });\n                headers[3].dispatchEvent(dropEvent);\n            }\n        }\n    },\n};\n\nexport const EmptyTable: Story = {\n    args: {\n        data: [],\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            .group-header {\n                cursor: pointer;\n                background-color: #f0f0f0;\n            }\n            .group-header:hover {\n                background-color: #e0e0e0;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 119,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "EmailComponent",
            "id": "component-EmailComponent-235eceaa84e20a416253566fc0f02fe33bde6bc8b39c8a1b7e4dbcd672bd457470b1be7eefcd88c717495274bd4f652e7ce4ec3d9295dcd4ea82c653b0fdc7ad",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/email.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-email-input",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n    <div class=\"relative w-full min-w-[200px] h-10\">\n        <input\n            type=\"email\"\n            [formControl]=\"formControl[field.key]\"\n            [pattern]=\"pattern\"\n            [placeholder]=\"''\"\n            [id]=\"field.key\"\n            [autocomplete]=\"autocomplete\"\n            [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n            [required]=\"required\"\n            class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 transition-all placeholder-shown:border placeholder-shown:border-gray-200 placeholder-shown:border-t-gray-200 border focus:border-2 border-t-transparent focus:border-t-transparent text-sm px-3 py-2.5 rounded-[7px] border-gray-200 focus:border-gray-900\"\n        />\n        <label\n            class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal !overflow-visible truncate peer-placeholder-shown:text-gray-500 leading-tight peer-focus:leading-tight peer-disabled:text-transparent peer-disabled:peer-placeholder-shown:text-gray-500 transition-all -top-1.5 peer-placeholder-shown:text-sm text-[11px] peer-focus:text-[11px] before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 peer-placeholder-shown:before:border-transparent before:rounded-tl-md before:border-t peer-focus:before:border-t-2 before:border-l peer-focus:before:border-l-2 before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 peer-placeholder-shown:after:border-transparent after:rounded-tr-md after:border-t peer-focus:after:border-t-2 after:border-r peer-focus:after:border-r-2 after:pointer-events-none after:transition-all peer-disabled:after:border-transparent peer-placeholder-shown:leading-[3.75] text-gray-500 peer-focus:text-gray-900 before:border-gray-200 peer-focus:before:!border-gray-900 after:border-gray-200 peer-focus:after:!border-gray-900\"\n            style=\"z-index: 1;\"\n        >\n            {{ label }}\n        </label>\n    </div>\n    @if (description && !formControl[field.key].touched){\n    <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n    </p>\n    } @else {\n    <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n            Must be at least\n            {{ formControl[field.key].errors['minlength'].requiredLength }}\n        </div>\n    </div>\n    }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n    standalone: true,\n    selector: 'adk-email-input',\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        @if (field) {\n        <div [ngClass]=\"class\">\n            <div class=\"relative w-full min-w-[200px] h-10\">\n                <input\n                    type=\"email\"\n                    [formControl]=\"formControl[field.key]\"\n                    [pattern]=\"pattern\"\n                    [placeholder]=\"''\"\n                    [id]=\"field.key\"\n                    [autocomplete]=\"autocomplete\"\n                    [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n                    [required]=\"required\"\n                    class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 transition-all placeholder-shown:border placeholder-shown:border-gray-200 placeholder-shown:border-t-gray-200 border focus:border-2 border-t-transparent focus:border-t-transparent text-sm px-3 py-2.5 rounded-[7px] border-gray-200 focus:border-gray-900\"\n                />\n                <label\n                    class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal !overflow-visible truncate peer-placeholder-shown:text-gray-500 leading-tight peer-focus:leading-tight peer-disabled:text-transparent peer-disabled:peer-placeholder-shown:text-gray-500 transition-all -top-1.5 peer-placeholder-shown:text-sm text-[11px] peer-focus:text-[11px] before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 peer-placeholder-shown:before:border-transparent before:rounded-tl-md before:border-t peer-focus:before:border-t-2 before:border-l peer-focus:before:border-l-2 before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 peer-placeholder-shown:after:border-transparent after:rounded-tr-md after:border-t peer-focus:after:border-t-2 after:border-r peer-focus:after:border-r-2 after:pointer-events-none after:transition-all peer-disabled:after:border-transparent peer-placeholder-shown:leading-[3.75] text-gray-500 peer-focus:text-gray-900 before:border-gray-200 peer-focus:before:!border-gray-900 after:border-gray-200 peer-focus:after:!border-gray-900\"\n                    style=\"z-index: 1;\"\n                >\n                    {{ label }}\n                </label>\n            </div>\n            @if (description && !formControl[field.key].touched){\n            <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n                {{ description }}\n            </p>\n            } @else {\n            <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n                <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n                <div *ngIf=\"formControl[field.key].errors['minlength']\">\n                    Must be at least\n                    {{ formControl[field.key].errors['minlength'].requiredLength }}\n                </div>\n            </div>\n            }\n        </div>\n        }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class EmailComponent implements OnChanges {\n    @Input() field!: Field;\n    formControl: { [key: string]: AbstractControl | any } = {};\n    errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\n\n    get props() {\n        return this.field?.props;\n    }\n\n    get autocomplete() {\n        return this.props?.autocomplete ?? 'off';\n    }\n\n    get label() {\n        return this.field.label;\n    }\n\n    get description() {\n        return this.field.description;\n    }\n\n    get errorMessage() {\n        return this.props?.errorMessage ?? 'Invalid pattern entered';\n    }\n\n    get placeholder() {\n        return this.field.placeholder ?? '';\n    }\n\n    get class() {\n        return this.props?.class ?? 'sm:col-span-3';\n    }\n\n    get labelClass() {\n        return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n    }\n\n    get pattern() {\n        return this.props?.pattern ?? '';\n    }\n\n    get required() {\n        return this.props?.required ?? true;\n    }\n\n    get inputClass() {\n        if (this.props && this.props.inputClass) {\n            return this.props.inputClass;\n        }\n        return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6';\n    }\n\n    ngOnChanges({ field }: SimpleChanges): void {\n        if (field) {\n            this.field = field.currentValue;\n            this.initFormControl();\n        }\n    }\n\n    private initFormControl(): void {\n        this.formControl[this.field.key] = this.field.formControl;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 74
                    }
                },
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 82
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 98
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 102
                    }
                }
            }
        },
        {
            "name": "FieldComponent",
            "id": "component-FieldComponent-f732b9e6f7776bdf8cd1b99ed66aaa23747ce5ca92a2e68b165c37f04ef659500653fcb6ec0ca10efb784495a6e2ab281384da426e720fc2db14b82930326db6",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-field",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "@if(field) { @switch(field.type) { @case('checkbox') {\n<adk-checkbox [field]=\"field\"></adk-checkbox>\n} @case('radio') {\n<adk-radio [field]=\"field\"></adk-radio>\n} @case('textarea') {\n<adk-textarea [field]=\"field\"></adk-textarea>\n} @case('password') {\n<adk-password-input [field]=\"field\"></adk-password-input>\n} @case('email') {\n<adk-email-input [field]=\"field\"></adk-email-input>\n}@case('select') {\n<adk-select [field]=\"field\"></adk-select>\n}@case('custom-select') {\n<adk-multi-select [field]=\"field\"></adk-multi-select>\n} @default {\n<adk-input [field]=\"field\" (fieldValueChange)=\"emitValueChange($event)\"></adk-input>\n} } }\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldValueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "components",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { CheckboxComponent } from './types/checkbox.component';\nimport { CommonModule } from '@angular/common';\nimport { EmailComponent } from './types/email.component';\nimport { Field } from '../models';\nimport { InputComponent } from './types/input.component';\nimport { MultiSelectComponent } from './types/multi-select.component';\nimport { PasswordComponent } from './types/password.component';\nimport { RadioComponent } from './types/radio.component';\nimport { SelectComponent } from './types/select.component';\nimport { TextareaComponent } from './types/textarea.component';\n\nconst components = [\n    InputComponent,\n    CheckboxComponent,\n    RadioComponent,\n    TextareaComponent,\n    PasswordComponent,\n    SelectComponent,\n    MultiSelectComponent,\n    SelectComponent,\n    EmailComponent,\n];\n\n@Component({\n    standalone: true,\n    selector: 'adk-field',\n    imports: [CommonModule, components],\n    template: `\n        @if(field) { @switch(field.type) { @case('checkbox') {\n        <adk-checkbox [field]=\"field\"></adk-checkbox>\n        } @case('radio') {\n        <adk-radio [field]=\"field\"></adk-radio>\n        } @case('textarea') {\n        <adk-textarea [field]=\"field\"></adk-textarea>\n        } @case('password') {\n        <adk-password-input [field]=\"field\"></adk-password-input>\n        } @case('email') {\n        <adk-email-input [field]=\"field\"></adk-email-input>\n        }@case('select') {\n        <adk-select [field]=\"field\"></adk-select>\n        }@case('custom-select') {\n        <adk-multi-select [field]=\"field\"></adk-multi-select>\n        } @default {\n        <adk-input [field]=\"field\" (fieldValueChange)=\"emitValueChange($event)\"></adk-input>\n        } } }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class FieldComponent implements OnChanges {\n    @Input() field!: Field;\n    @Output() fieldValueChange = new EventEmitter<string>();\n    get props() {\n        return this.field?.props;\n    }\n\n    get steps() {\n        return this.props?.['steps'] ?? [];\n    }\n\n    ngOnChanges({ field }: SimpleChanges): void {\n        if (field) this.field = field.currentValue;\n    }\n\n    emitValueChange(value: string) {\n        this.fieldValueChange.emit(value);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "steps": {
                    "name": "steps",
                    "getSignature": {
                        "name": "steps",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            }
        },
        {
            "name": "FieldDirectiveComponent",
            "id": "component-FieldDirectiveComponent-6d8d6e1bb73265eb8348fa54bcddb4cdd20758e64cb863748c4a393baa289ae6131175c2bac8ac4aeb851be0e7e904ed91ee9eca7d6d3385bfb1ffbb5f655758",
            "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFields"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkFields } from '../field';\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [AdkFields],\n})\nclass FieldDirectiveComponent {}\n\nconst meta: Meta<FieldDirectiveComponent> = {\n    component: FieldDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Form / Field',\n};\nexport default meta;\ntype Story = StoryObj<FieldDirectiveComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "FieldListDirective",
            "id": "component-FieldListDirective-2daaf7d566e0f635b5eb641ecd0efaf719af7b4baa8a7634c22841c1cfc37481f95357b88b42cfbd185ed3d9b95b8667f1c1d977e8112c8fe1d80b9c9b35aa00",
            "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkFieldList } from '../field-list';\n/* eslint-disable @angular-eslint/component-class-suffix */\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [AdkFieldList],\n})\nclass FieldListDirective {}\n\nconst meta: Meta<FieldListDirective> = {\n    component: FieldListDirective,\n    title: '(TW) Angular UI / Directives / Form / Field List',\n};\nexport default meta;\ntype Story = StoryObj<FieldListDirective>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "FieldsComponent",
            "id": "component-FieldsComponent-edb45dc2f7e3eb8d449b4a2ef016273f79a1f7f089ef05f59e7a6cf6d4aee070cea6f9af1b23caaffd74e8bf8d96d9e473e702ff01f36684dda9072e4b639b6f",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/fields.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-fields",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<div [class]=\"wrapperClass\">\n    @for (field of fields.fields(); track (field.id)) {\n    <adk-field [field]=\"field\"> </adk-field>\n    }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                },
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "fieldConfig",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "Field[]",
                    "decorators": []
                },
                {
                    "name": "wrapperClass",
                    "defaultValue": "'w-full'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fields",
                    "defaultValue": "inject(AdkFieldList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\n\nimport { AdkFieldList } from '../../directives';\nimport { AdkFormGroup } from '../../directives/form-group';\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../models';\nimport { FieldComponent } from './field.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n    standalone: true,\n    selector: 'adk-fields',\n    imports: [CommonModule, ReactiveFormsModule, FieldComponent],\n    hostDirectives: [AdkFieldList, AdkFormGroup],\n    template: `\n        <div [class]=\"wrapperClass\">\n            @for (field of fields.fields(); track (field.id)) {\n            <adk-field [field]=\"field\"> </adk-field>\n            }\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class FieldsComponent implements OnChanges {\n    fields = inject(AdkFieldList, { self: true });\n\n    @Input() fieldConfig: Field[] = [];\n    @Input() wrapperClass = 'w-full';\n\n    ngOnChanges({ fieldConfig }: SimpleChanges): void {\n        if (fieldConfig) {\n            this.fields.clear();\n            this.fields.add(...fieldConfig.currentValue);\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "HttpClientDirectiveComponent",
            "id": "component-HttpClientDirectiveComponent-0913bcdf9c5c65e7ffe9b23924d9b3333975214306aa2ce79407319f8eb91684828cafeead0fdb30077e6636427fad22de1ec7482f2bad3a8f6077e3744730d6",
            "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkHttpClient",
                    "inputs": [
                        "adkUrl"
                    ],
                    "outputs": []
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkHttpClient } from '../http-client';\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [{ directive: AdkHttpClient, inputs: ['adkUrl'] }],\n})\nclass HttpClientDirectiveComponent {}\n\nconst meta: Meta<HttpClientDirectiveComponent> = {\n    component: HttpClientDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Http Client',\n};\nexport default meta;\ntype Story = StoryObj<HttpClientDirectiveComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-23fecb275071e6d193856af3b3f526702d2e7502c9084fe4df45c0f614f40d1678872c588189bb75944924c95f7eadb27c2832c1f6832e05494b955743758150",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/icon-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-icon-button",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "<button\n    class=\"relative align-middle select-none font-sans font-medium text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none w-8 max-w-[32px] h-8 max-h-[32px] rounded-lg text-xs text-blue-gray-500 hover:bg-blue-gray-500/10 active:bg-blue-gray-500/30\"\n    type=\"button\"\n>\n    <span class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform\"\n        ><svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            class=\"h-5 w-5\"\n        >\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\"></path></svg\n    ></span>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'adk-icon-button',\n    standalone: true,\n    imports: [],\n    template: `\n        <button\n            class=\"relative align-middle select-none font-sans font-medium text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none w-8 max-w-[32px] h-8 max-h-[32px] rounded-lg text-xs text-blue-gray-500 hover:bg-blue-gray-500/10 active:bg-blue-gray-500/30\"\n            type=\"button\"\n        >\n            <span class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform\"\n                ><svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"2\"\n                    class=\"h-5 w-5\"\n                >\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\"></path></svg\n            ></span>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class IconButtonComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-6daca6e47cbbd8e0bf2e1dc545fde87c4dc72270127eb2b2b0b49163c34c6277cc43b90754fe0a2bbb09543b662b579685f9ac0f861d02be57ddca92f8dfcdd4",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-input",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n    <div class=\"relative w-full min-w-[200px] h-10\">\n        <input\n            type=\"text\"\n            [formControl]=\"formControl[field.key]\"\n            [pattern]=\"pattern\"\n            [placeholder]=\"''\"\n            [id]=\"field.key\"\n            [autocomplete]=\"autocomplete\"\n            [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n            [required]=\"required\"\n            class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 transition-all placeholder-shown:border placeholder-shown:border-gray-200 placeholder-shown:border-t-gray-200 border focus:border-2 border-t-transparent focus:border-t-transparent text-sm px-3 py-2.5 rounded-[7px] border-gray-200 focus:border-gray-900\"\n        />\n        <label\n            class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal !overflow-visible truncate peer-placeholder-shown:text-gray-500 leading-tight peer-focus:leading-tight peer-disabled:text-transparent peer-disabled:peer-placeholder-shown:text-gray-500 transition-all -top-1.5 peer-placeholder-shown:text-sm text-[11px] peer-focus:text-[11px] before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 peer-placeholder-shown:before:border-transparent before:rounded-tl-md before:border-t peer-focus:before:border-t-2 before:border-l peer-focus:before:border-l-2 before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 peer-placeholder-shown:after:border-transparent after:rounded-tr-md after:border-t peer-focus:after:border-t-2 after:border-r peer-focus:after:border-r-2 after:pointer-events-none after:transition-all peer-disabled:after:border-transparent peer-placeholder-shown:leading-[3.75] text-gray-500 peer-focus:text-gray-900 before:border-gray-200 peer-focus:before:!border-gray-900 after:border-gray-200 peer-focus:after:!border-gray-900\"\n            style=\"z-index: 1;\"\n        >\n            {{ label }}\n        </label>\n    </div>\n    @if (description && !formControl[field.key].touched){\n    <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n    </p>\n    } @else {\n    <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n            Must be at least\n            {{ formControl[field.key].errors['minlength'].requiredLength }}\n        </div>\n    </div>\n    }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldValueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "'mt-1 block w-full px-3 py-2 bg-white border border-red-500 rounded-md text-sm shadow-sm placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-red-500 invalid:text-red-600 focus:invalid:border-red-500 focus:invalid:ring-red-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n    standalone: true,\n    selector: 'adk-input',\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        @if (field) {\n        <div [ngClass]=\"class\">\n            <div class=\"relative w-full min-w-[200px] h-10\">\n                <input\n                    type=\"text\"\n                    [formControl]=\"formControl[field.key]\"\n                    [pattern]=\"pattern\"\n                    [placeholder]=\"''\"\n                    [id]=\"field.key\"\n                    [autocomplete]=\"autocomplete\"\n                    [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n                    [required]=\"required\"\n                    class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 transition-all placeholder-shown:border placeholder-shown:border-gray-200 placeholder-shown:border-t-gray-200 border focus:border-2 border-t-transparent focus:border-t-transparent text-sm px-3 py-2.5 rounded-[7px] border-gray-200 focus:border-gray-900\"\n                />\n                <label\n                    class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal !overflow-visible truncate peer-placeholder-shown:text-gray-500 leading-tight peer-focus:leading-tight peer-disabled:text-transparent peer-disabled:peer-placeholder-shown:text-gray-500 transition-all -top-1.5 peer-placeholder-shown:text-sm text-[11px] peer-focus:text-[11px] before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 peer-placeholder-shown:before:border-transparent before:rounded-tl-md before:border-t peer-focus:before:border-t-2 before:border-l peer-focus:before:border-l-2 before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 peer-placeholder-shown:after:border-transparent after:rounded-tr-md after:border-t peer-focus:after:border-t-2 after:border-r peer-focus:after:border-r-2 after:pointer-events-none after:transition-all peer-disabled:after:border-transparent peer-placeholder-shown:leading-[3.75] text-gray-500 peer-focus:text-gray-900 before:border-gray-200 peer-focus:before:!border-gray-900 after:border-gray-200 peer-focus:after:!border-gray-900\"\n                    style=\"z-index: 1;\"\n                >\n                    {{ label }}\n                </label>\n            </div>\n            @if (description && !formControl[field.key].touched){\n            <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n                {{ description }}\n            </p>\n            } @else {\n            <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n                <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n                <div *ngIf=\"formControl[field.key].errors['minlength']\">\n                    Must be at least\n                    {{ formControl[field.key].errors['minlength'].requiredLength }}\n                </div>\n            </div>\n            }\n        </div>\n        }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputComponent implements OnChanges {\n    @Input() field!: Field;\n    @Output() fieldValueChange = new EventEmitter<string>();\n\n    formControl: { [key: string]: AbstractControl | any } = {};\n    errorClass =\n        'mt-1 block w-full px-3 py-2 bg-white border border-red-500 rounded-md text-sm shadow-sm placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-red-500 invalid:text-red-600 focus:invalid:border-red-500 focus:invalid:ring-red-500';\n\n    get props() {\n        return this.field?.props;\n    }\n\n    get autocomplete() {\n        return this.props?.autocomplete ?? 'off';\n    }\n\n    get label() {\n        return this.field.label;\n    }\n\n    get description() {\n        return this.field.description;\n    }\n\n    get placeholder() {\n        return this.field.placeholder ?? '';\n    }\n\n    get class() {\n        return this.props?.class ?? 'flex flex-row gap-2 w-full flex-wrap z-[20000] mb-2';\n    }\n\n    get labelClass() {\n        return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n    }\n\n    get pattern() {\n        return this.props?.pattern ?? '';\n    }\n\n    get required() {\n        return this.props?.required ?? true;\n    }\n\n    get inputClass() {\n        if (this.props && this.props.inputClass) {\n            return this.props.inputClass;\n        }\n        return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6';\n    }\n\n    ngOnChanges({ field }: SimpleChanges): void {\n        if (field) {\n            this.field = field.currentValue;\n            this.initFormControl();\n        }\n        this.formControl[this.field.key].valueChanges.subscribe((value: string) => {\n            this.emitValueChange(value);\n        });\n    }\n\n    private initFormControl(): void {\n        this.formControl[this.field.key] = this.field.formControl;\n    }\n\n    emitValueChange(value: string) {\n        this.fieldValueChange.emit(value);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 83
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 103
                    }
                }
            }
        },
        {
            "name": "ListDirectiveComponent",
            "id": "component-ListDirectiveComponent-d218c91701ea9c25eba6097b62f3c3fcbfa03b02bcabd5c018443e6ddcb4986f1f0b36a8ea54eed7f61f8617a9312c9d5fa1c8c44850dccc84c359a30440039f",
            "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkList"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkList } from '../list';\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [AdkList],\n})\nclass ListDirectiveComponent {}\n\nconst meta: Meta<ListDirectiveComponent> = {\n    component: ListDirectiveComponent,\n    title: '(TW) Angular UI / Directives / List',\n};\nexport default meta;\ntype Story = StoryObj<ListDirectiveComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-36ed36b6ff7433700e63b3fa4c06d1ab22a1de485b2164bf0c11ddeda8b7978ac4353e06893fdccd226bd4ea0bc6b59f92ef8ee93f7d7a3e4de5673fe2eefc4e",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-multi-select",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n                position: relative;\n            }\n\n            .dropdown {\n                position: absolute;\n                width: 100%;\n                background-color: #fff;\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n                max-height: 400px;\n                overflow-y: auto;\n                z-index: 2000;\n            }\n        "
            ],
            "template": "@if (field && this.options.length) {\n<div *ngIf=\"filteredOptions.change$ | async as filteredOptions\" class=\"w-full flex items-center justify-center\">\n    <div class=\"w-full relative\">\n        <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n        <div\n            (click)=\"toggle()\"\n            tabindex=\"0\"\n            aria-expanded=\"true\"\n            [id]=\"field.id\"\n            class=\"mt-2 m-auto flex text-sm cursor-pointer text-gray-500 border border-gray-300 rounded shadow-sm transition-all duration-300 focus:outline-none bg-white hover:border-gray-400 focus:border-purple-500 focus:ring focus:ring-purple-500/20\"\n        >\n            <div class=\"grow pl-2.5 py-2 pr-2 flex flex-wrap gap-1\">\n                @if(isMultipleTag) { @for (option of (selectedOptions.change$ | async); track $index) {\n                <div class=\"bg-gray-200 border rounded-sm flex space-x-1 pl-1 items-center\">\n                    <p class=\"truncate cursor-default select-none\">\n                        {{ option.label }}\n                    </p>\n                    <div\n                        (click)=\"toggleOption(option)\"\n                        class=\"flex items-center px-1 cursor-pointer rounded-r-sm hover:bg-red-200 hover:text-red-600\"\n                    >\n                        <span class=\"material-symbols-outlined text-sm\"> close </span>\n                    </div>\n                </div>\n                } } @else {\n                <p class=\"truncate cursor-default select-none self-center\">\n                    @if (filteredOptions[0]){\n                    {{ filteredOptions[0].label }}\n                    }\n                </p>\n                }\n            </div>\n            <div class=\"flex flex-none items-center gap-1 py-1.5 px-1\">\n                <div (click)=\"clearOption()\" class=\"mt-1\">\n                    <span class=\"cursor-pointer p-0 !m-auto material-symbols-outlined\"> restart_alt </span>\n                </div>\n                <div class=\"h-full w-px bg-gray-300 inline-block\"></div>\n                <span class=\"material-symbols-outlined\"> @if (isOpen) { expand_less } @else { expand_more } </span>\n            </div>\n        </div>\n        @if (isOpen) {\n        <div\n            class=\"dropdown absolute z-10 w-full bg-white shadow-lg border rounded py-1 mt-1.5 text-sm text-gray-700\"\n            tabindex=\"-1\"\n            style=\"position: relative; top: 0; left: 0; width: 100%; z-index: 2000; display: block;\"\n        >\n            <div class=\"relative py-1 px-2.5\">\n                <span class=\"absolute w-5 h-5 mt-2.5 pb-0.5 ml-2 text-gray-500 material-symbols-outlined\"> search </span>\n                <input\n                    #searchInput\n                    type=\"text\"\n                    name=\"Search\"\n                    id=\"Search\"\n                    [formControl]=\"searchText\"\n                    (input)=\"onSearchChange()\"\n                    placeholder=\"Search...\"\n                    class=\"w-full py-2 pl-8 text-sm text-gray-500 bg-gray-100 border border-gray-200 rounded focus:border-gray-200 focus:ring-0 focus:outline-none\"\n                />\n            </div>\n            <div role=\"option\" class=\"max-h-72 overflow-y-auto\">\n                @if (filteredOptions.length) { @for (option of filteredOptions; track $index) {\n                <div class=\"px-2.5 last:border-0 border-b-[1px] py-2 border-gray-200\">\n                    @if (option.category) {\n                    <div class=\"pr-2 py-2 cursor-default select-none truncate font-bold text-gray-700\">\n                        {{ option.category }}\n                    </div>\n                    }\n                    <li\n                        class=\"block transition duration-200 px-2 py-2 cursor-pointer select-none truncate rounded text-gray-500 hover:bg-blue-100 hover:text-blue-500\"\n                        role=\"option\"\n                        aria-selected=\"false\"\n                        (click)=\"toggleOption(option)\"\n                    >\n                        {{ option.label }}\n                    </li>\n                </div>\n                } } @else {\n                <div class=\"px-2 py-2 cursor-not-allowed truncate text-gray-400 select-none\">No options found</div>\n                }\n            </div>\n        </div>\n\n        }\n    </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clearOptionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "clearOptionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "required": false
                },
                {
                    "name": "filteredOptions",
                    "defaultValue": "new ImperativeObservable<FieldOptions[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "searchText",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "output<FieldOptions[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "selectedOptions",
                    "defaultValue": "new ImperativeObservable<FieldOptions[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                }
            ],
            "methodsClass": [
                {
                    "name": "clearOption",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "FieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "FieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AfterViewInit, Component, Input, OnChanges, SimpleChanges, output } from '@angular/core';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { Field, FieldOptions } from '../../models';\n\nimport { ImperativeObservable } from '../../../utils';\n\n@Component({\n    standalone: true,\n    selector: 'adk-multi-select',\n    imports: [CommonModule, AsyncPipe, FormsModule, ReactiveFormsModule],\n    template: `\n        @if (field && this.options.length) {\n        <div *ngIf=\"filteredOptions.change$ | async as filteredOptions\" class=\"w-full flex items-center justify-center\">\n            <div class=\"w-full relative\">\n                <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n                <div\n                    (click)=\"toggle()\"\n                    tabindex=\"0\"\n                    aria-expanded=\"true\"\n                    [id]=\"field.id\"\n                    class=\"mt-2 m-auto flex text-sm cursor-pointer text-gray-500 border border-gray-300 rounded shadow-sm transition-all duration-300 focus:outline-none bg-white hover:border-gray-400 focus:border-purple-500 focus:ring focus:ring-purple-500/20\"\n                >\n                    <div class=\"grow pl-2.5 py-2 pr-2 flex flex-wrap gap-1\">\n                        @if(isMultipleTag) { @for (option of (selectedOptions.change$ | async); track $index) {\n                        <div class=\"bg-gray-200 border rounded-sm flex space-x-1 pl-1 items-center\">\n                            <p class=\"truncate cursor-default select-none\">\n                                {{ option.label }}\n                            </p>\n                            <div\n                                (click)=\"toggleOption(option)\"\n                                class=\"flex items-center px-1 cursor-pointer rounded-r-sm hover:bg-red-200 hover:text-red-600\"\n                            >\n                                <span class=\"material-symbols-outlined text-sm\"> close </span>\n                            </div>\n                        </div>\n                        } } @else {\n                        <p class=\"truncate cursor-default select-none self-center\">\n                            @if (filteredOptions[0]){\n                            {{ filteredOptions[0].label }}\n                            }\n                        </p>\n                        }\n                    </div>\n                    <div class=\"flex flex-none items-center gap-1 py-1.5 px-1\">\n                        <div (click)=\"clearOption()\" class=\"mt-1\">\n                            <span class=\"cursor-pointer p-0 !m-auto material-symbols-outlined\"> restart_alt </span>\n                        </div>\n                        <div class=\"h-full w-px bg-gray-300 inline-block\"></div>\n                        <span class=\"material-symbols-outlined\"> @if (isOpen) { expand_less } @else { expand_more } </span>\n                    </div>\n                </div>\n                @if (isOpen) {\n                <div\n                    class=\"dropdown absolute z-10 w-full bg-white shadow-lg border rounded py-1 mt-1.5 text-sm text-gray-700\"\n                    tabindex=\"-1\"\n                    style=\"position: relative; top: 0; left: 0; width: 100%; z-index: 2000; display: block;\"\n                >\n                    <div class=\"relative py-1 px-2.5\">\n                        <span class=\"absolute w-5 h-5 mt-2.5 pb-0.5 ml-2 text-gray-500 material-symbols-outlined\"> search </span>\n                        <input\n                            #searchInput\n                            type=\"text\"\n                            name=\"Search\"\n                            id=\"Search\"\n                            [formControl]=\"searchText\"\n                            (input)=\"onSearchChange()\"\n                            placeholder=\"Search...\"\n                            class=\"w-full py-2 pl-8 text-sm text-gray-500 bg-gray-100 border border-gray-200 rounded focus:border-gray-200 focus:ring-0 focus:outline-none\"\n                        />\n                    </div>\n                    <div role=\"option\" class=\"max-h-72 overflow-y-auto\">\n                        @if (filteredOptions.length) { @for (option of filteredOptions; track $index) {\n                        <div class=\"px-2.5 last:border-0 border-b-[1px] py-2 border-gray-200\">\n                            @if (option.category) {\n                            <div class=\"pr-2 py-2 cursor-default select-none truncate font-bold text-gray-700\">\n                                {{ option.category }}\n                            </div>\n                            }\n                            <li\n                                class=\"block transition duration-200 px-2 py-2 cursor-pointer select-none truncate rounded text-gray-500 hover:bg-blue-100 hover:text-blue-500\"\n                                role=\"option\"\n                                aria-selected=\"false\"\n                                (click)=\"toggleOption(option)\"\n                            >\n                                {{ option.label }}\n                            </li>\n                        </div>\n                        } } @else {\n                        <div class=\"px-2 py-2 cursor-not-allowed truncate text-gray-400 select-none\">No options found</div>\n                        }\n                    </div>\n                </div>\n\n                }\n            </div>\n        </div>\n        }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n                position: relative;\n            }\n\n            .dropdown {\n                position: absolute;\n                width: 100%;\n                background-color: #fff;\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n                max-height: 400px;\n                overflow-y: auto;\n                z-index: 2000;\n            }\n        `,\n    ],\n})\nexport class MultiSelectComponent implements OnChanges, AfterViewInit {\n    @Input() field!: Field;\n\n    formControl: { [key: string]: AbstractControl | any } = {};\n    isOpen = false;\n    selectedOptions = new ImperativeObservable<FieldOptions[]>([]);\n    filteredOptions = new ImperativeObservable<FieldOptions[]>([]);\n    selectedOptionChange = output<FieldOptions[]>();\n    clearOptionChange = output();\n    searchText = new FormControl('');\n\n    get props() {\n        return this.field?.props;\n    }\n\n    get isMultipleTag() {\n        return this.props?.isMultipleTag ?? false;\n    }\n\n    get options() {\n        return this.props?.options ?? [];\n    }\n\n    get autocomplete() {\n        return this.props?.autocomplete ?? 'off';\n    }\n\n    get label() {\n        return this.field.label;\n    }\n\n    get description() {\n        return this.field?.description;\n    }\n\n    get placeholder() {\n        return this.field.placeholder ?? '';\n    }\n\n    get class() {\n        return this.props?.class ?? 'sm:col-span-3';\n    }\n\n    get labelClass() {\n        return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n    }\n\n    get inputClass() {\n        return (\n            this.props?.inputClass ??\n            'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6'\n        );\n    }\n\n    ngAfterViewInit(): void {\n        this.filteredOptions.value = this.options;\n        this.initFormControl();\n        this.searchText.valueChanges.subscribe((value) => {\n            const searchVal = value ?? '';\n            this.filteredOptions.value = this.options.filter((opt) => opt.label.toLowerCase().includes(searchVal.toLowerCase()));\n        });\n    }\n\n    ngOnChanges({ field }: SimpleChanges): void {\n        if (field && field.firstChange) {\n            const searchVal = this.searchText.value ?? '';\n            this.field = field.currentValue;\n            this.filteredOptions.value = this.field?.props?.options\n                ? this.field?.props?.options.filter((opt) => opt.label.toLowerCase().includes(searchVal.toLowerCase()))\n                : [];\n            this.initFormControl();\n        }\n    }\n\n    onOptionSelected(value: string) {\n        this.formControl[this.field.key].setValue(value);\n    }\n\n    private initFormControl(): void {\n        this.formControl[this.field.key] = this.field.formControl;\n    }\n\n    onSearchChange() {\n        const searchValue = this.searchText.value ?? '';\n        if (!searchValue || searchValue === '') {\n            this.filteredOptions.value = this.options;\n        } else {\n            this.filteredOptions.value = this.options.filter((opt) => opt.label.toLowerCase().includes(searchValue.toLowerCase()));\n        }\n    }\n\n    toggle() {\n        this.isOpen = !this.isOpen;\n    }\n\n    toggleOption(option: FieldOptions) {\n        if (this.isMultipleTag) {\n            if (this.selectedOptions.value.includes(option)) {\n                this.selectedOptions.value = this.selectedOptions.value.filter((value) => value !== option);\n                this.filteredOptions.value.push(option);\n                const selectedOptionVal = this.selectedOptions.value.map((opt) => opt.value);\n                this.formControl[this.field.key].setValue(selectedOptionVal);\n            } else {\n                this.selectedOptions.value.push(option);\n                this.filteredOptions.value = this.filteredOptions.value.filter((value) => value !== option);\n                const selectedOptionVal = this.selectedOptions.value.map((opt) => opt.value);\n                this.formControl[this.field.key].setValue(selectedOptionVal);\n            }\n        } else {\n            this.selectedOptions.value = [option];\n            this.filteredOptions.value = this.options.filter((value) => value !== option);\n            const selectedOptionVal = option.value;\n            this.formControl[this.field.key].setValue(selectedOptionVal);\n        }\n\n        this.selectedOptionChange.emit(this.selectedOptions.value);\n    }\n\n    clearOption() {\n        this.filteredOptions.value = this.filteredOptions.value.concat(this.selectedOptions.value);\n        this.selectedOptions.value = [];\n        this.selectedOptionChange.emit(this.selectedOptions.value);\n        this.formControl[this.field.key].setValue('');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n                position: relative;\n            }\n\n            .dropdown {\n                position: absolute;\n                width: 100%;\n                background-color: #fff;\n                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n                max-height: 400px;\n                overflow-y: auto;\n                z-index: 2000;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 131
                    }
                },
                "isMultipleTag": {
                    "name": "isMultipleTag",
                    "getSignature": {
                        "name": "isMultipleTag",
                        "type": "",
                        "returnType": "",
                        "line": 135
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 139
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 143
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 147
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 151
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 155
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 159
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 163
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 167
                    }
                }
            }
        },
        {
            "name": "PaginationDirectiveComponent",
            "id": "component-PaginationDirectiveComponent-34272366e15244801d1bc213f1962c5862c3e6c6a87d9c5a463285656ab168b6cddf90f125a04e508bb5f04563eb1fcaa8df4438683d1ad87111937c49403fe8",
            "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkPagination"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkPagination } from '../pagination';\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [AdkPagination],\n})\nclass PaginationDirectiveComponent {}\n\nconst meta: Meta<PaginationDirectiveComponent> = {\n    component: PaginationDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Pagination',\n};\nexport default meta;\ntype Story = StoryObj<PaginationDirectiveComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PasswordComponent",
            "id": "component-PasswordComponent-9b5adc62fb2a24f01dbdee741c1e9f2e6fc2b4b42979cb1a2510b848ef21b6ea0c75ebe1d0708f196987397ac59ce37f21cbdc0a14b2b08d40cc32de26006c28",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-password-input",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n    <div class=\"relative w-full min-w-[200px] h-10\">\n        <input\n            type=\"password\"\n            [formControl]=\"formControl[field.key]\"\n            [pattern]=\"pattern\"\n            [placeholder]=\"''\"\n            [id]=\"field.key\"\n            [autocomplete]=\"autocomplete\"\n            [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n            [required]=\"required\"\n            class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 transition-all placeholder-shown:border placeholder-shown:border-gray-200 placeholder-shown:border-t-gray-200 border focus:border-2 border-t-transparent focus:border-t-transparent text-sm px-3 py-2.5 rounded-[7px] border-gray-200 focus:border-gray-900\"\n        />\n        <label\n            class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal !overflow-visible truncate peer-placeholder-shown:text-gray-500 leading-tight peer-focus:leading-tight peer-disabled:text-transparent peer-disabled:peer-placeholder-shown:text-gray-500 transition-all -top-1.5 peer-placeholder-shown:text-sm text-[11px] peer-focus:text-[11px] before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 peer-placeholder-shown:before:border-transparent before:rounded-tl-md before:border-t peer-focus:before:border-t-2 before:border-l peer-focus:before:border-l-2 before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 peer-placeholder-shown:after:border-transparent after:rounded-tr-md after:border-t peer-focus:after:border-t-2 after:border-r peer-focus:after:border-r-2 after:pointer-events-none after:transition-all peer-disabled:after:border-transparent peer-placeholder-shown:leading-[3.75] text-gray-500 peer-focus:text-gray-900 before:border-gray-200 peer-focus:before:!border-gray-900 after:border-gray-200 peer-focus:after:!border-gray-900\"\n            style=\"z-index: 1;\"\n        >\n            {{ label }}\n        </label>\n    </div>\n    @if (description && !formControl[field.key].touched){\n    <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n    </p>\n    } @else {\n    <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n            Must be at least\n            {{ formControl[field.key].errors['minlength'].requiredLength }}\n        </div>\n    </div>\n    }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n    standalone: true,\n    selector: 'adk-password-input',\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        @if (field) {\n        <div [ngClass]=\"class\">\n            <div class=\"relative w-full min-w-[200px] h-10\">\n                <input\n                    type=\"password\"\n                    [formControl]=\"formControl[field.key]\"\n                    [pattern]=\"pattern\"\n                    [placeholder]=\"''\"\n                    [id]=\"field.key\"\n                    [autocomplete]=\"autocomplete\"\n                    [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n                    [required]=\"required\"\n                    class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 transition-all placeholder-shown:border placeholder-shown:border-gray-200 placeholder-shown:border-t-gray-200 border focus:border-2 border-t-transparent focus:border-t-transparent text-sm px-3 py-2.5 rounded-[7px] border-gray-200 focus:border-gray-900\"\n                />\n                <label\n                    class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal !overflow-visible truncate peer-placeholder-shown:text-gray-500 leading-tight peer-focus:leading-tight peer-disabled:text-transparent peer-disabled:peer-placeholder-shown:text-gray-500 transition-all -top-1.5 peer-placeholder-shown:text-sm text-[11px] peer-focus:text-[11px] before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 peer-placeholder-shown:before:border-transparent before:rounded-tl-md before:border-t peer-focus:before:border-t-2 before:border-l peer-focus:before:border-l-2 before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 peer-placeholder-shown:after:border-transparent after:rounded-tr-md after:border-t peer-focus:after:border-t-2 after:border-r peer-focus:after:border-r-2 after:pointer-events-none after:transition-all peer-disabled:after:border-transparent peer-placeholder-shown:leading-[3.75] text-gray-500 peer-focus:text-gray-900 before:border-gray-200 peer-focus:before:!border-gray-900 after:border-gray-200 peer-focus:after:!border-gray-900\"\n                    style=\"z-index: 1;\"\n                >\n                    {{ label }}\n                </label>\n            </div>\n            @if (description && !formControl[field.key].touched){\n            <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n                {{ description }}\n            </p>\n            } @else {\n            <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n                <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n                <div *ngIf=\"formControl[field.key].errors['minlength']\">\n                    Must be at least\n                    {{ formControl[field.key].errors['minlength'].requiredLength }}\n                </div>\n            </div>\n            }\n        </div>\n        }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class PasswordComponent implements OnChanges {\n    @Input() field!: Field;\n    formControl: { [key: string]: AbstractControl | any } = {};\n    errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\n\n    get props() {\n        return this.field?.props;\n    }\n\n    get autocomplete() {\n        return this.props?.autocomplete ?? 'off';\n    }\n\n    get label() {\n        return this.field.label;\n    }\n\n    get description() {\n        return this.field.description;\n    }\n\n    get placeholder() {\n        return this.field.placeholder ?? '';\n    }\n\n    get class() {\n        return this.props?.class ?? 'sm:col-span-3';\n    }\n\n    get labelClass() {\n        return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n    }\n\n    get pattern() {\n        return this.props?.pattern ?? '';\n    }\n\n    get required() {\n        return this.props?.required ?? true;\n    }\n\n    get inputClass() {\n        if (this.props && this.props.inputClass) {\n            return this.props.inputClass;\n        }\n        return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6';\n    }\n\n    showPassword = false;\n\n    ngOnChanges({ field }: SimpleChanges): void {\n        if (field) {\n            this.field = field.currentValue;\n            this.initFormControl();\n        }\n    }\n\n    private initFormControl(): void {\n        this.formControl[this.field.key] = this.field.formControl;\n    }\n\n    togglePasswordVisibility(): void {\n        this.showPassword = !this.showPassword;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 74
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 82
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 98
                    }
                }
            }
        },
        {
            "name": "PillComponent",
            "id": "component-PillComponent-7ac74f6b3122e5fbc75b2ef700bf6b8bdb7da036f85f6f55c33b6e46a5c5076fc557aa30afcab3b44d33a0eabbee460a3874f81b638b4521a04645ece84a8c78",
            "file": "projects/ng-lib/src/lib/tw-ui/components/pill.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-pill",
            "styleUrls": [],
            "styles": [],
            "template": "<span class=\"badge badge-pill mr-0.5 text-white\" [ngClass]=\"getRandomColor()\">\n  <ng-content></ng-content>\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-amber-500', 'bg-indigo-500', 'bg-purple-500', 'bg-pink-500']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CommonModule, NgClass } from '@angular/common';\n\n@Component({\n  selector: 'adk-pill',\n  standalone: true,\n  imports: [CommonModule, NgClass],\n  template: `\n    <span class=\"badge badge-pill mr-0.5 text-white\" [ngClass]=\"getRandomColor()\">\n      <ng-content></ng-content>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PillComponent {\n  colors = ['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-amber-500', 'bg-indigo-500', 'bg-purple-500', 'bg-pink-500'];\n\n  getRandomColor() {\n    return this.colors[Math.floor(Math.random() * this.colors.length)];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PillWrapperComponent",
            "id": "component-PillWrapperComponent-33560d008a1a86bc3b69b9d1f234433877119fd13f64f280cdab3b9de0e82e7fdadb8b1e639fa296dac5b067af145003f2810a4834b2a12ac32c683db6087414",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<adk-pill> This is a pill </adk-pill>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PillComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { type Meta, type StoryObj } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\nimport { PillComponent } from '../pill.component';\n\n@Component({\n    selector: 'storybook-button-wrapper',\n    standalone: true,\n    imports: [CommonModule, PillComponent],\n    template: ` <adk-pill> This is a pill </adk-pill> `,\n})\nclass PillWrapperComponent {}\nconst meta: Meta<PillWrapperComponent> = {\n    component: PillWrapperComponent,\n    title: '(TW) Angular UI / Components / Pill',\n    tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<PillWrapperComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-76f08b39378eaf4d53913985cd2d3e9195c85497efbdf55c734af0e18bf3f7094edca08e54df26e31c02a3f57e133c00af97a3103a67d2838e7c4fbf5f6d2234",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-radio",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  @for (option of options; track option; let i = $index) {\n  <div class=\"relative flex gap-x-3 mt-2\">\n    <div class=\"flex items-center gap-x-3\">\n      <input type=\"radio\" [id]=\"option.id\" [value]=\"option.value\" [formControl]=\"formControl[field.key]\" [ngClass]=\"inputClass\" />\n    </div>\n    <div class=\"text-sm leading-6\">\n      <label [for]=\"option.id\" [ngClass]=\"labelClass\">{{ option.label }}</label>\n      <p *ngIf=\"option.description\" class=\"text-gray-500\">{{ option.description }}</p>\n    </div>\n  </div>\n  }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n  standalone: true,\n  selector: 'adk-radio',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    @if (field) {\n    <div [ngClass]=\"class\">\n      @for (option of options; track option; let i = $index) {\n      <div class=\"relative flex gap-x-3 mt-2\">\n        <div class=\"flex items-center gap-x-3\">\n          <input type=\"radio\" [id]=\"option.id\" [value]=\"option.value\" [formControl]=\"formControl[field.key]\" [ngClass]=\"inputClass\" />\n        </div>\n        <div class=\"text-sm leading-6\">\n          <label [for]=\"option.id\" [ngClass]=\"labelClass\">{{ option.label }}</label>\n          <p *ngIf=\"option.description\" class=\"text-gray-500\">{{ option.description }}</p>\n        </div>\n      </div>\n      }\n    </div>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class RadioComponent implements OnChanges {\n  @Input() field!: Field;\n  formControl: { [key: string]: AbstractControl | any } = {};\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get options() {\n    return this.props?.options ?? [];\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field?.description;\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'sm:col-span-3';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get inputClass() {\n    return this.props?.inputClass ?? 'h-4 w-4 border-gray-300 text-gray-600 focus:ring-gray-600';\n  }\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.initFormControl();\n    }\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                }
            }
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-e418b4b89e44d5073aaa055aae70f3faf47eeeeef7ab48a2dd3a57468a52ecf788cb5b486ab09633702cdfe24069b9641b281be4aa4cfead561c673888e2b404",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-select",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                position: relative;\n            }\n        "
            ],
            "template": "@if (field) {\n<div class=\"relative w-full min-w-[200px] h-10\">\n    <button\n        type=\"button\"\n        #dropdownButton\n        class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal text-left outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 disabled:cursor-not-allowed transition-all border-2 text-sm px-3 py-2.5 rounded-[7px] border-gray-500 border-t-transparent\"\n        aria-expanded=\"true\"\n        aria-haspopup=\"listbox\"\n        role=\"combobox\"\n        aria-controls=\":r1l:\"\n        (click)=\"toggleDropdown()\"\n    >\n        <span class=\"absolute top-2/4 -translate-y-2/4 left-3 pt-0.5\">{{ value | titlecase }}</span>\n        <div\n            class=\"grid place-items-center absolute top-2/4 right-2 pt-px w-5 h-5 text-gray-400 rotate-0 -translate-y-2/4 transition-all rotate-180 mt-px\"\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path\n                    fill-rule=\"evenodd\"\n                    d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                    clip-rule=\"evenodd\"\n                ></path>\n            </svg>\n        </div>\n    </button>\n    <label\n        class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal transition-all -top-1.5 before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 before:rounded-tl-md before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 after:rounded-tr-md after:pointer-events-none after:transition-all peer-disabled:after:border-transparent text-[11px] peer-disabled:text-transparent before:border-t-2 before:border-l-2 after:border-t-2 after:border-r-2 leading-tight text-gray-500 before:border-gray-500 after:border-gray-500\"\n    >\n        {{ label | titlecase }}\n    </label>\n    @if (isOpen) {\n    <ul\n        #dropdownList\n        tabindex=\"-1\"\n        role=\"listbox\"\n        class=\"w-full max-h-96 bg-white p-3 border border-gray-50 rounded-md shadow-lg shadow-gray-500/10 font-sans text-sm font-normal text-blue-gray-500 overflow-auto focus:outline-none\"\n        [ngStyle]=\"{ top: dropdownTop, left: dropdownLeft, width: dropdownWidth, position: 'absolute', zIndex: '1000' }\"\n        id=\":r1l:\"\n        aria-orientation=\"vertical\"\n    >\n        @for (option of options; track $index) {\n        <li\n            [id]=\"'material-tailwind-select-' + option.value\"\n            role=\"option\"\n            class=\"pt-[9px] pb-2 px-3 rounded-md leading-tight cursor-pointer select-none hover:bg-blue-gray-50 focus:bg-gray-50 hover:bg-opacity-80 focus:bg-opacity-80 hover:text-blue-gray-900 focus:text-blue-gray-900 outline outline-0 transition-all\"\n            [ngClass]=\"{ 'bg-blue-gray-50': option.value === field.value }\"\n            [attr.tabindex]=\"option.value === field.value ? 0 : -1\"\n            [attr.aria-selected]=\"option.value === field.value\"\n            (click)=\"selectOption(option.value)\"\n        >\n            {{ option.label | titlecase }}\n        </li>\n        }\n    </ul>\n    }\n    <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-blue-gray-600\">\n        {{ description }}\n    </p>\n    <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldValueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dropdownButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdownButton'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "dropdownLeft",
                    "defaultValue": "'0px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "dropdownList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdownList'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "dropdownTop",
                    "defaultValue": "'0px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "dropdownWidth",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number | boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number | boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDropdownPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n    standalone: true,\n    selector: 'adk-select',\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        @if (field) {\n        <div class=\"relative w-full min-w-[200px] h-10\">\n            <button\n                type=\"button\"\n                #dropdownButton\n                class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal text-left outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 disabled:cursor-not-allowed transition-all border-2 text-sm px-3 py-2.5 rounded-[7px] border-gray-500 border-t-transparent\"\n                aria-expanded=\"true\"\n                aria-haspopup=\"listbox\"\n                role=\"combobox\"\n                aria-controls=\":r1l:\"\n                (click)=\"toggleDropdown()\"\n            >\n                <span class=\"absolute top-2/4 -translate-y-2/4 left-3 pt-0.5\">{{ value | titlecase }}</span>\n                <div\n                    class=\"grid place-items-center absolute top-2/4 right-2 pt-px w-5 h-5 text-gray-400 rotate-0 -translate-y-2/4 transition-all rotate-180 mt-px\"\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                        <path\n                            fill-rule=\"evenodd\"\n                            d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                            clip-rule=\"evenodd\"\n                        ></path>\n                    </svg>\n                </div>\n            </button>\n            <label\n                class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal transition-all -top-1.5 before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 before:rounded-tl-md before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 after:rounded-tr-md after:pointer-events-none after:transition-all peer-disabled:after:border-transparent text-[11px] peer-disabled:text-transparent before:border-t-2 before:border-l-2 after:border-t-2 after:border-r-2 leading-tight text-gray-500 before:border-gray-500 after:border-gray-500\"\n            >\n                {{ label | titlecase }}\n            </label>\n            @if (isOpen) {\n            <ul\n                #dropdownList\n                tabindex=\"-1\"\n                role=\"listbox\"\n                class=\"w-full max-h-96 bg-white p-3 border border-gray-50 rounded-md shadow-lg shadow-gray-500/10 font-sans text-sm font-normal text-blue-gray-500 overflow-auto focus:outline-none\"\n                [ngStyle]=\"{ top: dropdownTop, left: dropdownLeft, width: dropdownWidth, position: 'absolute', zIndex: '1000' }\"\n                id=\":r1l:\"\n                aria-orientation=\"vertical\"\n            >\n                @for (option of options; track $index) {\n                <li\n                    [id]=\"'material-tailwind-select-' + option.value\"\n                    role=\"option\"\n                    class=\"pt-[9px] pb-2 px-3 rounded-md leading-tight cursor-pointer select-none hover:bg-blue-gray-50 focus:bg-gray-50 hover:bg-opacity-80 focus:bg-opacity-80 hover:text-blue-gray-900 focus:text-blue-gray-900 outline outline-0 transition-all\"\n                    [ngClass]=\"{ 'bg-blue-gray-50': option.value === field.value }\"\n                    [attr.tabindex]=\"option.value === field.value ? 0 : -1\"\n                    [attr.aria-selected]=\"option.value === field.value\"\n                    (click)=\"selectOption(option.value)\"\n                >\n                    {{ option.label | titlecase }}\n                </li>\n                }\n            </ul>\n            }\n            <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-blue-gray-600\">\n                {{ description }}\n            </p>\n            <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n                <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n            </div>\n        </div>\n        }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                position: relative;\n            }\n        `,\n    ],\n})\nexport class SelectComponent implements OnChanges {\n    @Input() field!: Field;\n    @Output() fieldValueChange = new EventEmitter<string>();\n    @ViewChild('dropdownButton') dropdownButton!: ElementRef;\n    @ViewChild('dropdownList') dropdownList!: ElementRef;\n\n    formControl: { [key: string]: AbstractControl | any } = {};\n    isOpen = false;\n    dropdownTop = '0px';\n    dropdownLeft = '0px';\n    dropdownWidth = '100%';\n\n    get props() {\n        return this.field?.props;\n    }\n\n    get options() {\n        return this.props?.options ?? [];\n    }\n\n    get label() {\n        return this.field.label;\n    }\n\n    get value(): string {\n        return `${this.field.value}`;\n    }\n\n    get description() {\n        return this.field.description;\n    }\n\n    ngOnChanges({ field }: SimpleChanges): void {\n        if (field) {\n            this.field = field.currentValue;\n            this.initFormControl();\n        }\n\n        this.formControl[this.field.key].valueChanges.subscribe((value: string) => {\n            this.emitValueChange(value);\n        });\n    }\n\n    private initFormControl(): void {\n        this.formControl[this.field.key] = this.field.formControl;\n    }\n\n    toggleDropdown() {\n        this.isOpen = !this.isOpen;\n        if (this.isOpen) {\n            this.updateDropdownPosition();\n        }\n    }\n\n    selectOption(value: string | number | boolean) {\n        this.field.value = value as string;\n        this.formControl[this.field.key].patchValue(value);\n        this.isOpen = false;\n    }\n\n    emitValueChange(value: string) {\n        this.fieldValueChange.emit(value);\n    }\n\n    private updateDropdownPosition() {\n        const buttonRect = this.dropdownButton.nativeElement.getBoundingClientRect();\n        this.dropdownTop = `${buttonRect.height}px`;\n        this.dropdownLeft = `0px`;\n        this.dropdownWidth = `${buttonRect.width}px`;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                position: relative;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 101
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 109
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 113
                    }
                }
            }
        },
        {
            "name": "SettingsIconComponent",
            "id": "component-SettingsIconComponent-5de47f2a8a494c8348bae6ec95ec6c6d5bf109583c73e700197a2c7ad521b29b8e6bdc7d8f3163903e6359ef4e3bd41b3d0154133023ff0ee09efb8b3b200d83",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/settings-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-settings-icon",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<div class=\"flex items-center gap-3 cursor-pointer\">\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n        data-slot=\"icon\"\n        stroke-width=\"2\"\n        class=\"h-4 w-4\"\n        style=\"\"\n    >\n        <path\n            d=\"M17.004 10.407c.138.435-.216.842-.672.842h-3.465a.75.75 0 0 1-.65-.375l-1.732-3c-.229-.396-.053-.907.393-1.004a5.252 5.252 0 0 1 6.126 3.537ZM8.12 8.464c.307-.338.838-.235 1.066.16l1.732 3a.75.75 0 0 1 0 .75l-1.732 3c-.229.397-.76.5-1.067.161A5.23 5.23 0 0 1 6.75 12a5.23 5.23 0 0 1 1.37-3.536ZM10.878 17.13c-.447-.098-.623-.608-.394-1.004l1.733-3.002a.75.75 0 0 1 .65-.375h3.465c.457 0 .81.407.672.842a5.252 5.252 0 0 1-6.126 3.539Z\"\n        ></path>\n        <path\n            fill-rule=\"evenodd\"\n            d=\"M21 12.75a.75.75 0 1 0 0-1.5h-.783a8.22 8.22 0 0 0-.237-1.357l.734-.267a.75.75 0 1 0-.513-1.41l-.735.268a8.24 8.24 0 0 0-.689-1.192l.6-.503a.75.75 0 1 0-.964-1.149l-.6.504a8.3 8.3 0 0 0-1.054-.885l.391-.678a.75.75 0 1 0-1.299-.75l-.39.676a8.188 8.188 0 0 0-1.295-.47l.136-.77a.75.75 0 0 0-1.477-.26l-.136.77a8.36 8.36 0 0 0-1.377 0l-.136-.77a.75.75 0 1 0-1.477.26l.136.77c-.448.121-.88.28-1.294.47l-.39-.676a.75.75 0 0 0-1.3.75l.392.678a8.29 8.29 0 0 0-1.054.885l-.6-.504a.75.75 0 1 0-.965 1.149l.6.503a8.243 8.243 0 0 0-.689 1.192L3.8 8.216a.75.75 0 1 0-.513 1.41l.735.267a8.222 8.222 0 0 0-.238 1.356h-.783a.75.75 0 0 0 0 1.5h.783c.042.464.122.917.238 1.356l-.735.268a.75.75 0 0 0 .513 1.41l.735-.268c.197.417.428.816.69 1.191l-.6.504a.75.75 0 0 0 .963 1.15l.601-.505c.326.323.679.62 1.054.885l-.392.68a.75.75 0 0 0 1.3.75l.39-.679c.414.192.847.35 1.294.471l-.136.77a.75.75 0 0 0 1.477.261l.137-.772a8.332 8.332 0 0 0 1.376 0l.136.772a.75.75 0 1 0 1.477-.26l-.136-.771a8.19 8.19 0 0 0 1.294-.47l.391.677a.75.75 0 0 0 1.3-.75l-.393-.679a8.29 8.29 0 0 0 1.054-.885l.601.504a.75.75 0 0 0 .964-1.15l-.6-.503c.261-.375.492-.774.69-1.191l.735.267a.75.75 0 1 0 .512-1.41l-.734-.267c.115-.439.195-.892.237-1.356h.784Zm-2.657-3.06a6.744 6.744 0 0 0-1.19-2.053 6.784 6.784 0 0 0-1.82-1.51A6.705 6.705 0 0 0 12 5.25a6.8 6.8 0 0 0-1.225.11 6.7 6.7 0 0 0-2.15.793 6.784 6.784 0 0 0-2.952 3.489.76.76 0 0 1-.036.098A6.74 6.74 0 0 0 5.251 12a6.74 6.74 0 0 0 3.366 5.842l.009.005a6.704 6.704 0 0 0 2.18.798l.022.003a6.792 6.792 0 0 0 2.368-.004 6.704 6.704 0 0 0 2.205-.811 6.785 6.785 0 0 0 1.762-1.484l.009-.01.009-.01a6.743 6.743 0 0 0 1.18-2.066c.253-.707.39-1.469.39-2.263a6.74 6.74 0 0 0-.408-2.309Z\"\n            clip-rule=\"evenodd\"\n        ></path>\n    </svg>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'adk-settings-icon',\n    standalone: true,\n    template: `\n        <div class=\"flex items-center gap-3 cursor-pointer\">\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n                aria-hidden=\"true\"\n                data-slot=\"icon\"\n                stroke-width=\"2\"\n                class=\"h-4 w-4\"\n                style=\"\"\n            >\n                <path\n                    d=\"M17.004 10.407c.138.435-.216.842-.672.842h-3.465a.75.75 0 0 1-.65-.375l-1.732-3c-.229-.396-.053-.907.393-1.004a5.252 5.252 0 0 1 6.126 3.537ZM8.12 8.464c.307-.338.838-.235 1.066.16l1.732 3a.75.75 0 0 1 0 .75l-1.732 3c-.229.397-.76.5-1.067.161A5.23 5.23 0 0 1 6.75 12a5.23 5.23 0 0 1 1.37-3.536ZM10.878 17.13c-.447-.098-.623-.608-.394-1.004l1.733-3.002a.75.75 0 0 1 .65-.375h3.465c.457 0 .81.407.672.842a5.252 5.252 0 0 1-6.126 3.539Z\"\n                ></path>\n                <path\n                    fill-rule=\"evenodd\"\n                    d=\"M21 12.75a.75.75 0 1 0 0-1.5h-.783a8.22 8.22 0 0 0-.237-1.357l.734-.267a.75.75 0 1 0-.513-1.41l-.735.268a8.24 8.24 0 0 0-.689-1.192l.6-.503a.75.75 0 1 0-.964-1.149l-.6.504a8.3 8.3 0 0 0-1.054-.885l.391-.678a.75.75 0 1 0-1.299-.75l-.39.676a8.188 8.188 0 0 0-1.295-.47l.136-.77a.75.75 0 0 0-1.477-.26l-.136.77a8.36 8.36 0 0 0-1.377 0l-.136-.77a.75.75 0 1 0-1.477.26l.136.77c-.448.121-.88.28-1.294.47l-.39-.676a.75.75 0 0 0-1.3.75l.392.678a8.29 8.29 0 0 0-1.054.885l-.6-.504a.75.75 0 1 0-.965 1.149l.6.503a8.243 8.243 0 0 0-.689 1.192L3.8 8.216a.75.75 0 1 0-.513 1.41l.735.267a8.222 8.222 0 0 0-.238 1.356h-.783a.75.75 0 0 0 0 1.5h.783c.042.464.122.917.238 1.356l-.735.268a.75.75 0 0 0 .513 1.41l.735-.268c.197.417.428.816.69 1.191l-.6.504a.75.75 0 0 0 .963 1.15l.601-.505c.326.323.679.62 1.054.885l-.392.68a.75.75 0 0 0 1.3.75l.39-.679c.414.192.847.35 1.294.471l-.136.77a.75.75 0 0 0 1.477.261l.137-.772a8.332 8.332 0 0 0 1.376 0l.136.772a.75.75 0 1 0 1.477-.26l-.136-.771a8.19 8.19 0 0 0 1.294-.47l.391.677a.75.75 0 0 0 1.3-.75l-.393-.679a8.29 8.29 0 0 0 1.054-.885l.601.504a.75.75 0 0 0 .964-1.15l-.6-.503c.261-.375.492-.774.69-1.191l.735.267a.75.75 0 1 0 .512-1.41l-.734-.267c.115-.439.195-.892.237-1.356h.784Zm-2.657-3.06a6.744 6.744 0 0 0-1.19-2.053 6.784 6.784 0 0 0-1.82-1.51A6.705 6.705 0 0 0 12 5.25a6.8 6.8 0 0 0-1.225.11 6.7 6.7 0 0 0-2.15.793 6.784 6.784 0 0 0-2.952 3.489.76.76 0 0 1-.036.098A6.74 6.74 0 0 0 5.251 12a6.74 6.74 0 0 0 3.366 5.842l.009.005a6.704 6.704 0 0 0 2.18.798l.022.003a6.792 6.792 0 0 0 2.368-.004 6.704 6.704 0 0 0 2.205-.811 6.785 6.785 0 0 0 1.762-1.484l.009-.01.009-.01a6.743 6.743 0 0 0 1.18-2.066c.253-.707.39-1.469.39-2.263a6.74 6.74 0 0 0-.408-2.309Z\"\n                    clip-rule=\"evenodd\"\n                ></path>\n            </svg>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class SettingsIconComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-e3a52b34089a80efcedae508ffd10731616c0aca01975b8cb85817bd9a55f257032348a137f2a2faa4fd63ed0d5bd2592ae156bbe353d2fda64b41f362820f35",
            "file": "projects/ng-lib/src/lib/tw-ui/components/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-sidebar",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative flex h-[calc(100vh-3rem)] w-screen flex-row\">\n    @if (isExpanded) {\n    <div\n        class=\"relative flex h-full w-full max-w-[20rem] flex-col rounded-xl bg-white bg-clip-border p-4 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n    >\n        <div class=\"p-4 mb-2\">\n            <div class=\"flex flex-row\">\n                <h5 class=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n                    {{ title }}\n                </h5>\n                <span class=\"flex-auto\"></span>\n                <button\n                    type=\"button\"\n                    class=\"flex items-center w-[60px] p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                    (click)=\"toggleSidebar()\"\n                >\n                    <span class=\"material-symbols-outlined\"> menu </span>\n                </button>\n            </div>\n        </div>\n        <nav class=\"flex min-w-[240px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n            @for (nav of navigation; track nav.link) {\n            <div\n                role=\"button\"\n                class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                [routerLink]=\"[nav.link]\"\n                [routerLinkActive]=\"'active'\"\n            >\n                <div class=\"grid mr-4 place-items-center\">\n                    <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n                </div>\n                {{ nav.text | titlecase }}\n            </div>\n            }\n        </nav>\n    </div>\n    } @else {\n    <div\n        class=\"relative flex h-full w-full max-w-[5rem] flex-col rounded-xl bg-white bg-clip-border p-2 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n    >\n        <div class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-center font-normal text-blue-gray-700\">\n            <button\n                type=\"button\"\n                class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                (click)=\"toggleSidebar()\"\n            >\n                <span class=\"material-symbols-outlined\"> arrow_forward_ios </span>\n            </button>\n        </div>\n        <nav class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n            @for (nav of navigation; track nav.link) {\n            <div\n                role=\"button\"\n                class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                [routerLink]=\"[nav.link]\"\n                [routerLinkActive]=\"'active'\"\n            >\n                <div class=\"grid mr-4 place-items-center\">\n                    <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n                </div>\n            </div>\n            }\n        </nav>\n    </div>\n    }\n    <div class=\"relative h-full w-full\">\n        <ng-content [select]=\"'.sidebar-content'\"></ng-content>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "navigation",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Sidebar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "toggleSidebar",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n    selector: 'adk-sidebar',\n    standalone: true,\n    imports: [CommonModule, RouterModule],\n    template: `\n        <div class=\"relative flex h-[calc(100vh-3rem)] w-screen flex-row\">\n            @if (isExpanded) {\n            <div\n                class=\"relative flex h-full w-full max-w-[20rem] flex-col rounded-xl bg-white bg-clip-border p-4 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n            >\n                <div class=\"p-4 mb-2\">\n                    <div class=\"flex flex-row\">\n                        <h5 class=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n                            {{ title }}\n                        </h5>\n                        <span class=\"flex-auto\"></span>\n                        <button\n                            type=\"button\"\n                            class=\"flex items-center w-[60px] p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                            (click)=\"toggleSidebar()\"\n                        >\n                            <span class=\"material-symbols-outlined\"> menu </span>\n                        </button>\n                    </div>\n                </div>\n                <nav class=\"flex min-w-[240px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n                    @for (nav of navigation; track nav.link) {\n                    <div\n                        role=\"button\"\n                        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                        [routerLink]=\"[nav.link]\"\n                        [routerLinkActive]=\"'active'\"\n                    >\n                        <div class=\"grid mr-4 place-items-center\">\n                            <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n                        </div>\n                        {{ nav.text | titlecase }}\n                    </div>\n                    }\n                </nav>\n            </div>\n            } @else {\n            <div\n                class=\"relative flex h-full w-full max-w-[5rem] flex-col rounded-xl bg-white bg-clip-border p-2 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n            >\n                <div class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-center font-normal text-blue-gray-700\">\n                    <button\n                        type=\"button\"\n                        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                        (click)=\"toggleSidebar()\"\n                    >\n                        <span class=\"material-symbols-outlined\"> arrow_forward_ios </span>\n                    </button>\n                </div>\n                <nav class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n                    @for (nav of navigation; track nav.link) {\n                    <div\n                        role=\"button\"\n                        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                        [routerLink]=\"[nav.link]\"\n                        [routerLinkActive]=\"'active'\"\n                    >\n                        <div class=\"grid mr-4 place-items-center\">\n                            <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n                        </div>\n                    </div>\n                    }\n                </nav>\n            </div>\n            }\n            <div class=\"relative h-full w-full\">\n                <ng-content [select]=\"'.sidebar-content'\"></ng-content>\n            </div>\n        </div>\n    `,\n})\nexport class SidebarComponent implements OnChanges {\n    @Input() title = 'Sidebar';\n    @Input() navigation: { link: string; icon: string; text: string }[] = [];\n\n    isExpanded = true;\n    toggleSidebar = () => {\n        ('SidebarComponent: toggleSidebar');\n        this.isExpanded = !this.isExpanded;\n    };\n\n    ngOnChanges({ title, navigation }: SimpleChanges) {\n        if (title) this.title = title.currentValue;\n        if (navigation) this.navigation = navigation.currentValue;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "SortableIconComponent",
            "id": "component-SortableIconComponent-142e654b18d14a74113357c3ee39c4f935a18f04ca4c928c4d30b00a81b38cf9a43a472c44eca517cfc1c990f96e9c6c7bb8ed8ce2f7bcecda48fb14fb2c476b",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sortable-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-sortable-icon",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: inline-block;\n            }\n        "
            ],
            "template": "<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke-width=\"2\"\n    stroke=\"currentColor\"\n    aria-hidden=\"true\"\n    class=\"w-4 h-4\"\n>\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9\"></path>\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'tw-sortable-icon',\n    standalone: true,\n    template: `\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"2\"\n            stroke=\"currentColor\"\n            aria-hidden=\"true\"\n            class=\"w-4 h-4\"\n        >\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9\"></path>\n        </svg>\n    `,\n    styles: [\n        `\n            :host {\n                display: inline-block;\n            }\n        `,\n    ],\n})\nexport class SortableIconComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: inline-block;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "SortableTableExampleComponent",
            "id": "component-SortableTableExampleComponent-8913ec05226a02bfa27ea59c7944e6cee7f50d4f1c1788fe3097560f7a488e04f156a290a703fd2a23ce563998878b7196c1cba0165bd6eaf55925ed25cf4b82",
            "file": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sortable-table-example",
            "styleUrls": [],
            "styles": [],
            "template": "<table>\n    <thead>\n        <tr>\n            <th (click)=\"sort('name')\">Name</th>\n            <th (click)=\"sort('age')\">Age</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let item of sortedItems\">\n            <td>{{ item.name }}</td>\n            <td>{{ item.age }}</td>\n        </tr>\n    </tbody>\n</table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentSortDirection",
                    "defaultValue": "'asc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"asc\" | \"desc\"",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "currentSortKey",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "items",
                    "defaultValue": "[\n        { name: 'John Doe', age: 28 },\n        { name: 'Jane Smith', age: 34 },\n        { name: 'Sam Green', age: 22 },\n        { name: 'Emily Brown', age: 42 },\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sortedItems",
                    "defaultValue": "[...this.items]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\ninterface Item {\n    name: string;\n    age: number;\n}\n\n@Component({\n    selector: 'app-sortable-table-example',\n    template: `\n        <table>\n            <thead>\n                <tr>\n                    <th (click)=\"sort('name')\">Name</th>\n                    <th (click)=\"sort('age')\">Age</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let item of sortedItems\">\n                    <td>{{ item.name }}</td>\n                    <td>{{ item.age }}</td>\n                </tr>\n            </tbody>\n        </table>\n    `,\n    standalone: true,\n    imports: [CommonModule],\n})\nexport class SortableTableExampleComponent {\n    items: Item[] = [\n        { name: 'John Doe', age: 28 },\n        { name: 'Jane Smith', age: 34 },\n        { name: 'Sam Green', age: 22 },\n        { name: 'Emily Brown', age: 42 },\n    ];\n\n    sortedItems: Item[] = [...this.items];\n    currentSortKey: keyof Item = 'name';\n    currentSortDirection: 'asc' | 'desc' = 'asc';\n\n    sort(key: keyof Item): void {\n        if (this.currentSortKey === key) {\n            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.currentSortDirection = 'asc';\n        }\n        this.currentSortKey = key;\n        this.sortedItems.sort((a, b) => {\n            if (a[key] < b[key]) return this.currentSortDirection === 'asc' ? -1 : 1;\n            if (a[key] > b[key]) return this.currentSortDirection === 'asc' ? 1 : -1;\n            return 0;\n        });\n    }\n}\n\nconst meta: Meta<SortableTableExampleComponent> = {\n    component: SortableTableExampleComponent,\n    title: '(TW) Angular UI / Directives / Sortable Table',\n};\nexport default meta;\ntype Story = StoryObj<SortableTableExampleComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-ddbcb784788edcf4ad0ec15ccbfc49bef526f427e265fdb1fdd7b54c277c3481bfdef8b78315f007196fd98d517a2edb163791ff83b86b3c10bc64648b65513c",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n            .material-symbols-outlined {\n                font-size: 16px !important;\n            }\n        "
            ],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkTable"
                },
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "actionButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "actionColName",
                    "defaultValue": "'Actions'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "RowData[]",
                    "decorators": []
                },
                {
                    "name": "isActionButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSearchable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isWrapped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tableHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "adkTable",
                    "defaultValue": "inject(AdkTable)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "expandedGroups",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "field",
                    "defaultValue": "new ImperativeObservable<Field | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "itemsPerPage",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "rowFocus",
                    "defaultValue": "new ImperativeObservable<RowData | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methodsClass": [
                {
                    "name": "isCellFieldObject",
                    "args": [
                        {
                            "name": "value",
                            "type": "Field | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Field | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCellValArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRowFocused",
                    "args": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDragDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFormValueChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemsPerPageChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRowClick",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSettingsCriteria",
                    "args": [
                        {
                            "name": "event",
                            "type": "SettingCriteria",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "SettingCriteria",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setField",
                    "args": [
                        {
                            "name": "column",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "imports"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AdkFormGroup, AdkSelection } from '../../../../directives';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { Component, Input, OnInit, inject } from '@angular/core';\nimport { Field, FieldsComponent, RowData } from '../../../../tw-form-ui';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AdkExpansionPanelComponent } from '../../expansion-panel.component';\nimport { AdkTable } from '../directives/table';\nimport { AdkTooltipDirective } from '../../../../directives/tooltip';\nimport { ButtonComponent } from '../../button.component';\nimport { CheckboxComponent } from 'projects/ng-lib/src/public-api';\nimport { ImperativeObservable } from '../../../../utils';\nimport { SettingCriteria } from '../models';\nimport { SortableIconComponent } from '../utils';\nimport { TableHeaderComponent } from './table-header.component';\nimport { TwCardComponent } from '../../card/tw-card.component';\nimport { TwTableSettingsDialogComponent } from './tw-table-settings-dialog.component';\nimport { TwTypographyComponent } from '../../typography.component';\nimport { searchColumnSelector } from './fields.controls';\n\nconst imports = [\n    CommonModule,\n    ReactiveFormsModule,\n    AdkSelection,\n    AdkTooltipDirective,\n    AdkExpansionPanelComponent,\n    AsyncPipe,\n    TableHeaderComponent,\n    TwTypographyComponent,\n    TwCardComponent,\n    CheckboxComponent,\n    SortableIconComponent,\n    FieldsComponent,\n    AdkTable,\n    FormsModule,\n    ButtonComponent,\n    TwTableSettingsDialogComponent,\n];\n\n@Component({\n    selector: 'tw-table',\n    standalone: true,\n    imports: [...imports],\n    hostDirectives: [AdkTable, AdkFormGroup],\n    templateUrl: './table.component.html',\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n            .material-symbols-outlined {\n                font-size: 16px !important;\n            }\n        `,\n    ],\n})\nexport class TableComponent implements OnInit {\n    #formGroup = inject(AdkFormGroup, { self: true });\n    adkTable = inject(AdkTable);\n    @Input() isWrapped = false;\n    @Input() set data(value: RowData[]) {\n        this.adkTable.initialData = value;\n    }\n    @Input() columns: string[] = [];\n    @Input() isDraggable = false;\n    @Input() isSelectable = false;\n    @Input() isSortable = false;\n    @Input() isSearchable = false;\n    @Input() isActionButton = false;\n    @Input() actionColName: string = 'Actions';\n    @Input() actionButtons: { icon?: string; label: string; color: string; onClick: (rowData: any) => void }[] = [];\n    @Input() tableHeader!: { title: string; subtitle: string; isSearchable: boolean; buttons: any[] };\n\n    get formGroup() {\n        return this.#formGroup.formGroup();\n    }\n\n    rowFocus = new ImperativeObservable<RowData | null>(null);\n\n    expandedGroups: { [key: string]: boolean } = {};\n    itemsPerPage: number = 10;\n\n    field = new ImperativeObservable<Field | undefined>(undefined);\n\n    ngOnInit(): void {\n        this.field.value = this.setField(this.adkTable.headers()[0]);\n        this.#formGroup.setFormGroup([this.field.value]);\n        this.onFormValueChanges();\n    }\n\n    onRowClick(rowData: any) {\n        console.log('Row clicked:', rowData);\n    }\n\n    onItemsPerPageChange() {\n        this.adkTable.setItemsPerPage(this.itemsPerPage);\n    }\n\n    isSelected(row: RowData): boolean {\n        const rowStr = JSON.stringify(row);\n        return this.adkTable.selectedRowsData().includes(rowStr);\n    }\n\n    isRowFocused(row: RowData): boolean {\n        const selectedRowStr = JSON.stringify(this.rowFocus.value);\n        const rowStr = JSON.stringify(row);\n        return selectedRowStr === rowStr;\n    }\n\n    isCellValArray(value: string | []) {\n        return Array.isArray(value);\n    }\n\n    isCellFieldObject(value: Field | any) {\n        if (typeof value === 'object') return true;\n        return false;\n    }\n\n    onDragDrop(index: number) {\n        this.adkTable.dragDrop(index);\n        this.columns = this.adkTable.headers();\n    }\n\n    onSettingsCriteria(event: SettingCriteria) {\n        this.adkTable.setGroupBy(event.groupByColumn);\n        this.adkTable.setColumns(event.visibleColumns);\n        this.columns = event.visibleColumns;\n        if (event.column) this.adkTable.applyFilter({ column: event.column, value: '' });\n        this.field.value = this.setField(event.column);\n        this.#formGroup.setFormGroup([this.field.value]);\n        this.onFormValueChanges();\n    }\n\n    setField(column: string | undefined): Field {\n        this.resetField();\n        setTimeout(() => {\n            console.info('Timed column value update');\n        }, 1000);\n        return searchColumnSelector(column ?? '');\n    }\n\n    onFormValueChanges() {\n        this.formGroup.valueChanges.subscribe((e) => {\n            this.adkTable.filterColumns(e['searchColumn']);\n        });\n    }\n\n    private resetField(): void {\n        this.field.value = undefined;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n            .material-symbols-outlined {\n                font-size: 16px !important;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "RowData[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "RowData[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                }
            },
            "templateData": "@if(adkTable) {\n@if(isWrapped && tableHeader) {\n<tw-card>\n  <div class=\"adk-card-header\">\n    <ng-container *ngTemplateOutlet=\"tableWrapperHeader; context: {adkTable, tableHeader}\"></ng-container>\n  </div>\n  <div class=\"adk-card-body\">\n    <ng-container *ngTemplateOutlet=\"tableContent; context: {adkTable, groupByColumn: groupByColumn}\"></ng-container>\n  </div>\n  @if (adkTable.visibleData().length > 5) {\n  <div class=\"adk-card-footer\">\n    <!-- <tw-table-footer (actionButtonClicked)=\"actionButtonTriggered()\"></tw-table-footer> -->\n  </div>\n  }\n</tw-card>\n} @else {\n<ng-container *ngTemplateOutlet=\"tableContent; context: {adkTable, groupByColumn: groupByColumn}\"></ng-container>\n}\n}\n\n<!-- Table -->\n<ng-template #tableContent let-adkTable=\"adkTable\" let-groupByColumn=\"groupByColumn\">\n  <table aria-hidden=\"true\" class=\"w-full text-left table-auto min-w-max\">\n    <thead>\n      <ng-container *ngTemplateOutlet=\"\n                   renderThead;\n                   context: {\n                       groupData: adkTable.groupedData(),\n                       columns: adkTable?.headers(),\n                       isSelectable,\n                       sortDataSource: adkTable.currentPageData()\n                   }\n               \">\n      </ng-container>\n    </thead>\n    <tbody>\n      @if(columns.length > 0) {\n      <ng-container *ngIf=\"adkTable.preferenceCriteria().groupByColumn; else flatView\">\n        @for(group of adkTable.groupedData() | keyvalue; track $index) {\n        <ng-container *ngTemplateOutlet=\"\n                       groupByRender;\n                       context: { group, columns: adkTable?.headers(), isSelectable }\n                   \"></ng-container>\n        }\n      </ng-container>\n      <ng-template #flatView>\n        @for(rowData of adkTable.currentPageData(); track $index) {\n        <ng-container\n          *ngTemplateOutlet=\"renderRow; context: { columns: adkTable?.headers(), rowData, rowIndex: $index, isSelectable }\"></ng-container>\n        }\n      </ng-template>\n      }\n    </tbody>\n  </table>\n</ng-template>\n\n<!-- Render Table Header -->\n<ng-template #renderThead let-groupData=\"groupData\" let-columns=\"columns\" let-isSelectable=\"isSelectable\"\n  let-sortDataSource=\"sortDataSource\">\n  <tr>\n    @if(isSelectable && columns.length > 0) {\n    <th id=\"checkAll\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-1 max-w-[10px]\">\n      <ng-container\n        *ngTemplateOutlet=\"checkbox; context: { adkTable, groupData, rowData: undefined, isCheckAll: true }\"></ng-container>\n    </th>\n    } @for(col of columns; track $index) {\n    <th [id]=\"col\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-3 cursor-pointer\" [attr.key]=\"col\"\n      [ngClass]=\"{ 'border-b border-blue-gray-100 bg-blue-gray-50 p-3 cursor-pointer': true }\"\n      [attr.draggable]=\"isDraggable\" (dragstart)=\"adkTable.dragStart($index)\" (dragover)=\"adkTable.dragOver($event)\"\n      (drop)=\"adkTable.dragDrop($index, $event)\" scope=\"col\">\n      <tw-typography [variant]=\"'small'\"\n        [classStyle]=\"'flex items-center justify-between gap-2 font-normal leading-none opacity-70'\">\n        {{ col ?? ' ' | uppercase }}\n        <div class=\"flex flex-row gap-2\">\n          @if($index !== columns.length && isSortable) {\n          <tw-sortable-icon (click)=\"adkTable.sortBy(col)\" (keydown)=\"sortRows(col)\"></tw-sortable-icon>\n          } @if(adkTable?.sortCriteriaData().key === col) {\n          <span>{{ sortDataSource.direction === 'ascending' ? '🔼' : '🔽' }}</span>\n          }\n        </div>\n      </tw-typography>\n    </th>\n    }@if(isActionButton) {\n    <th scope=\"col\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-3 text-right\">\n      <tw-typography [variant]=\"'small'\" [color]=\"'blue-gray'\" [classStyle]=\"'font-normal'\">\n        {{ actionColName ?? 'Actions' }}\n      </tw-typography>\n    </th>\n    }\n  </tr>\n</ng-template>\n\n<!-- Group By Render -->\n<ng-template #groupByRender let-group=\"group\" let-columns=\"columns\" let-isSelectable=\"isSelectable\"\n  let-actionButton=\"actionButton\">\n  <tr>\n    <td [colSpan]=\"columns.length + (isSelectable ? 1 : 0) + (actionButton ? 1 : 0)\" class=\"w-full\">\n      <adk-expansion-panel class=\"full\">\n        <ng-template #expansionPanelHeader>\n          <span class=\"min-w-[200px] max-w-[200px] truncate\">\n            ({{ group.value.length }})\n            {{ group.key }}\n          </span>\n        </ng-template>\n        <ng-template #expansionPanelBody>\n          <table aria-hidden=\"true\" class=\"w-full min-w-max table-auto text-left\">\n            <thead>\n              <tr>\n                @if(isSelectable) {\n                <th class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-1 max-w-[10px]\"></th>\n                }\n                @for(col of columns; track $index) {\n                <th class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-3\">\n                  <tw-typography [variant]=\"'small'\" [color]=\"'blue-gray'\" [classStyle]=\"'font-normal'\">\n                    {{ col | uppercase }}\n                  </tw-typography>\n                </th>\n                }\n                @if(isActionButton) {\n                <th class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-3 text-right\">\n                  <tw-typography [variant]=\"'small'\" [color]=\"'blue-gray'\" [classStyle]=\"'font-normal'\">\n                    {{ actionColName ?? 'Actions' }}\n                  </tw-typography>\n                </th>\n                }\n              </tr>\n            </thead>\n            <tbody>\n              @for(rowData of group.value; track $index) {\n              <ng-container\n                *ngTemplateOutlet=\"renderRow; context: { columns, rowData, rowIndex: $index, isSelectable, adkTable, actionButton }\">\n              </ng-container>\n              }\n            </tbody>\n          </table>\n        </ng-template>\n      </adk-expansion-panel>\n    </td>\n  </tr>\n</ng-template>\n\n<!-- Render Row Table Cells -->\n<ng-template #renderRow let-columns=\"columns\" let-rowData=\"rowData\" let-rowIndex=\"rowIndex\"\n  let-isSelectable=\"isSelectable\">\n  <tr [ngClass]=\"isRowFocused(rowData) ? 'bg-light-blue-50' : ''\" (keypress)=\"rowFocus.value = rowData\"\n    (click)=\"rowFocus.value = rowData\">\n    @if(isSelectable) {\n    <td [ngClass]=\"isSelectable ? 'p-1' : 'p-4'\" class=\"border-b border-blue-gray-50 p-1 max-h-[38px] max-w-[15px]\">\n      <ng-container\n        *ngTemplateOutlet=\"checkbox; context: { adkTable, groupData: undefined, rowData, isCheckAll: false }\"></ng-container>\n    </td>\n    }\n    @for (col of columns; track $index) {\n    <td [ngClass]=\"isSelectable ? 'p-1' : 'p-2'\"\n      class=\"border-b border-blue-gray-50 min-h-[48.5px] min-w-[60px] max-w-[60px] truncate\">\n      <div [adkTooltip]=\"rowData[col]\" tooltipPlacement=\"bottom\" [ngStyle]=\"{ cursor: 'text' }\">\n        @if(isCellValArray(rowData[col])) { @if(isSelectable && isMultiSelectField){\n        <adk-field *ngIf=\"adkTable.selected(rowData) && (cellMultiSelector(rowIndex, rowData[col]) | async) as field\"\n          [field]=\"field\"></adk-field>\n        } @else {\n        <tw-typography [variant]=\"'small'\" class=\"font-normal ml-2\">\n          {{ rowData[col].join(', ') }}\n        </tw-typography>\n        } } @else {\n        @if (isCellFieldObject(rowData[col])) {\n        <adk-field [field]=\"rowData[col]\"></adk-field>\n        } @else {\n        <tw-typography [variant]=\"'small'\" class=\"font-normal ml-2\">\n          {{ rowData[col] }}\n        </tw-typography>\n        } }\n      </div>\n    </td>\n    }\n    @if (isActionButton) {\n    <td class=\"border-b border-blue-gray-50 min-h-[48.5px] w-auto max-w-[120px] p-3\">\n      <div class=\"flex items-center gap-3 cursor-pointer flex-wrap justify-end\">\n        @for(action of actionButtons; track $index) {\n        <adk-button class=\"min-w-[60px] max-w-[100px] flex-grow\" [color]=\"action.color\"\n          (click)=\"action.onClick(rowData)\">\n          <span class=\"flex items-center gap-2\">\n            @if(action.icon) {\n            <span class=\"material-symbols-outlined\">{{ action.icon }}</span>\n            } {{ action.label }}\n          </span>\n        </adk-button>\n        }\n      </div>\n    </td>\n    }\n  </tr>\n</ng-template>\n\n<!-- Checkbox Render -->\n<ng-template #checkbox let-isCheckAll=\"isCheckAll\" let-groupData=\"groupData\" let-rowData=\"rowData\">\n  @if(isCheckAll) {\n  <div class=\"inline-flex items-center\">\n    <label for=\"selectAllCheckbox\" class=\"relative flex items-center p-3 rounded-full cursor-pointer\">\n      <input type=\"checkbox\"\n        class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10 w-4 h-4\"\n        id=\"selectAllCheckbox\" name=\"selectAllCheckbox\"\n        [checked]=\"adkTable.selectedRowsData().length === adkTable.visibleData().length\"\n        (change)=\"adkTable.toggleAllRowsSelection()\" />\n      <span\n        class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3.5 w-3.5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n          stroke=\"currentColor\" stroke-width=\"1\">\n          <path fill-rule=\"evenodd\"\n            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n            clip-rule=\"evenodd\"></path>\n        </svg>\n      </span>\n    </label>\n  </div>\n  } @else {\n  <div class=\"inline-flex items-center\">\n    <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\n      <input type=\"checkbox\"\n        class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10 w-4 h-4\"\n        [checked]=\"isSelected(rowData)\" (change)=\"adkTable.toggleRowSelection(rowData)\" />\n      <span\n        class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3.5 w-3.5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n          stroke=\"currentColor\" stroke-width=\"1\">\n          <path fill-rule=\"evenodd\"\n            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n            clip-rule=\"evenodd\"></path>\n        </svg>\n      </span>\n    </label>\n  </div>\n  }\n</ng-template>\n\n<ng-template #tableWrapperHeader let-adkTable=\"adkTable\" let-tableHeader=\"tableHeader\">\n  <div class=\"relative bg-clip-border mt-4 mx-4 bg-white text-gray-700 rounded-none overflow-visible\">\n    <div class=\"mb-2 flex items-center justify-between gap-8\">\n      <div>\n        @if(tableHeader.title){\n        <tw-typography variant=\"h5\" color=\"blue-gray\"\n          classStyle=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">{{\n          tableHeader.title }}</tw-typography>\n        } @if(tableHeader.subtitle){\n        <tw-typography color=\"gray\" classStyle=\"mt-1 font-normal\">{{ tableHeader.subtitle }}</tw-typography>\n        }\n      </div>\n      <div class=\"flex shrink-0 flex-col gap-2 sm:flex-row\">\n        @if(tableHeader.buttons && tableHeader.buttons.length > 0){ @for(button of tableHeader.buttons; track $index){\n        <div class=\"flex items-center gap-3 cursor-pointer\" (click)=\"button.onClick()\">\n          <adk-button [color]=\"button.color\" (click)=\"button.onClick()\">\n            <span class=\"flex items-center gap-2\">\n              @if(button.icon){\n              <span class=\"material-symbols-outlined\">{{ button.icon }}</span> }{{ button.label }}</span>\n          </adk-button>\n        </div>\n        } }\n        <div class=\"flex items-center gap-3 cursor-pointer\">\n          <tw-table-settings-dialog [headers]=\"adkTable.headers()\"\n            (settingsCriteria)=\"onSettingsCriteria($event)\"></tw-table-settings-dialog>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"flex flex-col items-center justify-between gap-4 md:flex-row\">\n      <!-- @if(tabs?.length){ -->\n      <!-- <Tabs value=\"{tabs.length\">\n                0 ? tabs[0].value : ''} class=\"w-full md:w-max\">\n                <TabsHeader>\n                    {tabs.map(({ label, value }) => (\n                    <Tab key=\"{value}\" value=\"{value}\"> &nbsp;&nbsp;{label}&nbsp;&nbsp; </Tab>\n                    ))}\n                </TabsHeader>\n            </Tabs> -->\n      <!-- } -->\n    </div>\n    @if(isSearchable){\n    <form *ngIf=\"field.change$ | async as field\" [formGroup]=\"formGroup\"\n      class=\"flex flex-row gap-2 w-full flex-wrap z-[20000]\">\n      <adk-fields [fieldConfig]=\"[field]\"></adk-fields>\n    </form>\n    }\n  </div>\n</ng-template>\n"
        },
        {
            "name": "TableExampleComponent",
            "id": "component-TableExampleComponent-0ca1ef03e795b6cf06947eed6c061c32a8852c1c7af72cfcc962c0fc8e2620894262e298f24d9090ca697fd8133a1a59be60e56cf5ba26d5d7b948d03404e500",
            "file": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-example",
            "styleUrls": [],
            "styles": [],
            "template": "<div adk-selection #selection=\"adkSelection\">\n    <table>\n        <thead>\n            <tr>\n                <th>\n                    <input type=\"checkbox\" (change)=\"toggleSelectAll($event)\" />\n                </th>\n                <th>Item</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let item of items\">\n                <td>\n                    <input type=\"checkbox\" [checked]=\"selection.selected(item)\" (change)=\"toggleSelectItem(item)\" />\n                </td>\n                <td>{{ item }}</td>\n            </tr>\n        </tbody>\n    </table>\n    <p>Selected items: {{ selection.count() }}</p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "['item1', 'item2', 'item3', 'item4']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selection', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkSelection"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkSelection } from '../selection';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'app-table-example',\n    template: `\n        <div adk-selection #selection=\"adkSelection\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>\n                            <input type=\"checkbox\" (change)=\"toggleSelectAll($event)\" />\n                        </th>\n                        <th>Item</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let item of items\">\n                        <td>\n                            <input type=\"checkbox\" [checked]=\"selection.selected(item)\" (change)=\"toggleSelectItem(item)\" />\n                        </td>\n                        <td>{{ item }}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <p>Selected items: {{ selection.count() }}</p>\n        </div>\n    `,\n    standalone: true,\n    imports: [CommonModule, AdkSelection],\n})\nexport class TableExampleComponent {\n    @ViewChild('selection', { static: true }) selection: any;\n    items = ['item1', 'item2', 'item3', 'item4'];\n\n    toggleSelectAll(event: Event): void {\n        const isChecked = (event.target as HTMLInputElement).checked;\n        if (isChecked) {\n            this.items.forEach((item) => this.selection.select(item));\n        } else {\n            this.selection.clear();\n        }\n    }\n\n    toggleSelectItem(item: string): void {\n        if (this.selection.selected(item)) {\n            this.selection.deselect(item);\n        } else {\n            this.selection.select(item);\n        }\n    }\n}\n\nconst meta: Meta<TableExampleComponent> = {\n    component: TableExampleComponent,\n    title: '(TW) Angular UI / Directives / Selection',\n};\nexport default meta;\ntype Story = StoryObj<TableExampleComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TableHeaderComponent",
            "id": "component-TableHeaderComponent-3dc6913398a3f50914cf0943fa82253f6bae1c0469664c0a302a6f36b40b2b7b86a52abfbfe115e5ca0e4bf6e5e647b33a1c57633c3a03a93f4d78653cb20c00",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-header",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n            .material-symbols-outlined {\n                font-size: 16px !important;\n            }\n        "
            ],
            "template": "<div class=\"relative bg-clip-border mt-4 mx-4 bg-white text-gray-700 rounded-none overflow-visible\">       <div class=\"mb-2 flex items-center justify-between gap-8\">\n           <div>\n               @if(title){\n               <tw-typography\n                   variant=\"h5\"\n                   color=\"blue-gray\"\n                   classStyle=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n                   >{{ title }}</tw-typography\n               >\n               } @if(subtitle){\n               <tw-typography color=\"gray\" classStyle=\"mt-1 font-normal\">{{ subtitle }}</tw-typography>\n               }\n           </div>\n           <div class=\"flex shrink-0 flex-col gap-2 sm:flex-row\">\n               @if(buttons && buttons.length > 0){ @for(button of buttons; track $index){\n               <div class=\"flex items-center gap-3 cursor-pointer\" (click)=\"button.onClick()\">\n                   <adk-button [color]=\"button.color\" (click)=\"button.onClick()\">\n                       <span class=\"flex items-center gap-2\">\n                           @if(button.icon){\n                           <span class=\"material-symbols-outlined\">{{ button.icon }}</span> }{{ button.label }}</span\n                       >\n                   </adk-button>\n               </div>\n               } }\n               <div class=\"flex items-center gap-3 cursor-pointer\">\n                   <!-- <tw-table-settings-dialog (triggerUpdate)=\"handlePreferences()\"></tw-table-settings-dialog> -->\n               </div>\n           </div>\n       </div>\n\n       <div class=\"flex flex-col items-center justify-between gap-4 md:flex-row\">\n           <!-- @if(tabs?.length){ -->\n           <!-- <Tabs value=\"{tabs.length\">\n               0 ? tabs[0].value : ''} class=\"w-full md:w-max\">\n               <TabsHeader>\n                   {tabs.map(({ label, value }) => (\n                   <Tab key=\"{value}\" value=\"{value}\"> &nbsp;&nbsp;{label}&nbsp;&nbsp; </Tab>\n                   ))}\n               </TabsHeader>\n           </Tabs> -->\n           <!-- } -->\n       </div>\n       @if((searchColumn.change$ | async) && isSearchable){\n       <form *ngIf=\"field.change$ | async as field\" [formGroup]=\"formGroup\" class=\"flex flex-row gap-2 w-full flex-wrap z-[20000]\">\n           <adk-fields [fieldConfig]=\"[field]\"></adk-fields>\n       </form>\n       }\n   </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "buttons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "isSearchable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchColumnValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visibleColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "filterCriteria",
                    "defaultValue": "new EventEmitter<FilterCriteria>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "EventEmitter"
                },
                {
                    "name": "preferenceCriteria",
                    "defaultValue": "new EventEmitter<PreferenceCriteria>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "field",
                    "defaultValue": "new ImperativeObservable<Field | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "isFirstChange",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "searchColumn",
                    "defaultValue": "new ImperativeObservable<string | null>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 101
                }
            ],
            "methodsClass": [
                {
                    "name": "handleFiltering",
                    "args": [
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePreferences",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setField",
                    "args": [
                        {
                            "name": "column",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FieldsComponent",
                    "type": "component"
                },
                {
                    "name": "AdkTable"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { Field, FieldsComponent } from '../../../../tw-form-ui';\nimport { FilterCriteria, PreferenceCriteria } from '../models';\n\nimport { AdkFormGroup } from '../../../../directives';\nimport { AdkTable } from '../directives/table';\nimport { ButtonComponent } from '../../button.component';\nimport { ImperativeObservable } from 'projects/ng-lib/src/lib/utils';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TwTypographyComponent } from '../../typography.component';\nimport { searchColumnSelector } from '../utils';\n\n// TODO: get values to output to parent component\n// wondering if I should add all to one component and have controls to turn certain features on and off\n// or if I should have separate components for each feature\n@Component({\n    selector: 'tw-table-header',\n    standalone: true,\n    imports: [CommonModule, ReactiveFormsModule, AsyncPipe, TwTypographyComponent, ButtonComponent, FieldsComponent, AdkTable],\n    hostDirectives: [AdkFormGroup],\n    template: ` <div class=\"relative bg-clip-border mt-4 mx-4 bg-white text-gray-700 rounded-none overflow-visible\">\n        <div class=\"mb-2 flex items-center justify-between gap-8\">\n            <div>\n                @if(title){\n                <tw-typography\n                    variant=\"h5\"\n                    color=\"blue-gray\"\n                    classStyle=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n                    >{{ title }}</tw-typography\n                >\n                } @if(subtitle){\n                <tw-typography color=\"gray\" classStyle=\"mt-1 font-normal\">{{ subtitle }}</tw-typography>\n                }\n            </div>\n            <div class=\"flex shrink-0 flex-col gap-2 sm:flex-row\">\n                @if(buttons && buttons.length > 0){ @for(button of buttons; track $index){\n                <div class=\"flex items-center gap-3 cursor-pointer\" (click)=\"button.onClick()\">\n                    <adk-button [color]=\"button.color\" (click)=\"button.onClick()\">\n                        <span class=\"flex items-center gap-2\">\n                            @if(button.icon){\n                            <span class=\"material-symbols-outlined\">{{ button.icon }}</span> }{{ button.label }}</span\n                        >\n                    </adk-button>\n                </div>\n                } }\n                <div class=\"flex items-center gap-3 cursor-pointer\">\n                    <!-- <tw-table-settings-dialog (triggerUpdate)=\"handlePreferences()\"></tw-table-settings-dialog> -->\n                </div>\n            </div>\n        </div>\n\n        <div class=\"flex flex-col items-center justify-between gap-4 md:flex-row\">\n            <!-- @if(tabs?.length){ -->\n            <!-- <Tabs value=\"{tabs.length\">\n                0 ? tabs[0].value : ''} class=\"w-full md:w-max\">\n                <TabsHeader>\n                    {tabs.map(({ label, value }) => (\n                    <Tab key=\"{value}\" value=\"{value}\"> &nbsp;&nbsp;{label}&nbsp;&nbsp; </Tab>\n                    ))}\n                </TabsHeader>\n            </Tabs> -->\n            <!-- } -->\n        </div>\n        @if((searchColumn.change$ | async) && isSearchable){\n        <form *ngIf=\"field.change$ | async as field\" [formGroup]=\"formGroup\" class=\"flex flex-row gap-2 w-full flex-wrap z-[20000]\">\n            <adk-fields [fieldConfig]=\"[field]\"></adk-fields>\n        </form>\n        }\n    </div>`,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n            .material-symbols-outlined {\n                font-size: 16px !important;\n            }\n        `,\n    ],\n})\nexport class TableHeaderComponent implements OnInit, AfterViewInit {\n    #formGroup = inject(AdkFormGroup, { self: true });\n    // adkTable = inject(AdkTable);\n\n    @Input() title?: string;\n    @Input() subtitle?: string;\n    @Input() isSearchable = false;\n    @Input() searchColumnValue?: string;\n    @Input() visibleColumns: string[] = [];\n    @Input() buttons: {\n        label: string;\n        onClick: () => void;\n        color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger';\n        icon: string;\n    }[] = [];\n    @Output() preferenceCriteria = new EventEmitter<PreferenceCriteria>();\n    @Output() filterCriteria = new EventEmitter<FilterCriteria>();\n\n    searchColumn = new ImperativeObservable<string | null>('');\n    field = new ImperativeObservable<Field | undefined>(undefined);\n    isFirstChange = true;\n\n    get formGroup() {\n        return this.#formGroup.formGroup();\n    }\n\n    ngAfterViewInit(): void {\n        this.searchColumn.value = this.visibleColumns[0];\n        this.searchColumn.change$.subscribe((e: any) => {\n            this.#formGroup.reset();\n            this.field.value = this.setField(e);\n            this.#formGroup.setFormGroup([this.field.value]);\n            this.formGroup.valueChanges.subscribe((e) => {\n                this.handleFiltering(e);\n            });\n        });\n    }\n    ngOnInit(): void {\n        this.filterCriteria.emit({ column: this.visibleColumns[0], value: this.searchColumnValue ?? '' });\n    }\n\n    handlePreferences(event: any): void {\n        console.log('handlePreferences', event);\n        // this.searchColumn.value = this.visibleColumns[0];\n        // this.actionKeyPress.emit(true);\n    }\n\n    handleFiltering({ searchColumn }: any): void {\n        console.log('handleFiltering', searchColumn);\n        // this.adkTable.applyFilter({ column: this.searchColumn.value ?? '', value: searchColumn });\n        // this.actionKeyPress.emit(true);\n    }\n\n    setField(column: string | undefined): Field {\n        this.resetField();\n        setTimeout(() => {\n            console.info('Timed column value update');\n        }, 1000);\n        return searchColumnSelector(column ?? '');\n    }\n\n    private resetField(): void {\n        this.field.value = undefined;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n            .material-symbols-outlined {\n                font-size: 16px !important;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                }
            }
        },
        {
            "name": "TableWrapperComponent",
            "id": "component-TableWrapperComponent-1618016ef5c0001bed212b87b75ebc0397364bc1982f74233e9331b5d25a995ef3e63f9eef3a0a19418ecac34c8082583f2bf8cb06b28a965265545ad764911a",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-wrapper",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<tw-card>\n    <div class=\"adk-card-header\">\n        <tw-table-header\n            [title]=\"tableHeader.title\"\n            [subtitle]=\"tableHeader.subtitle\"\n            [isSearchable]=\"tableHeader.isSearchable\"\n            [buttons]=\"tableHeader.buttons\"\n        ></tw-table-header>\n    </div>\n    <div class=\"adk-card-body\">\n        <tw-table\n            #table\n            [data]=\"data\"\n            [columns]=\"columns\"\n            [isSelectable]=\"isSelectable\"\n            [isDraggable]=\"isDraggable\"\n            [isSortable]=\"isSortable\"\n        ></tw-table>\n    </div>\n    @if (data.length > 5) {\n    <div class=\"adk-card-footer\">\n        <!-- <tw-table-footer (actionButtonClicked)=\"actionButtonTriggered()\"></tw-table-footer> -->\n    </div>\n    }\n</tw-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkTable"
                }
            ],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "RowData[]",
                    "decorators": []
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tableHeader",
                    "defaultValue": "{\n        title: 'Table Header',\n        subtitle: 'Table Subtitle',\n        isSearchable: false,\n        buttons: [],\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableComponent",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'table'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "TableComponent",
                    "type": "component"
                },
                {
                    "name": "TableHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "AdkTable"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\n\nimport { AdkTable } from '../directives/table';\nimport { CommonModule } from '@angular/common';\nimport { RowData } from '../../../../tw-form-ui';\nimport { TableComponent } from './table.component';\nimport { TableHeaderComponent } from './table-header.component';\nimport { TwCardComponent } from '../../card/tw-card.component';\n\n@Component({\n    selector: 'tw-table-wrapper',\n    standalone: true,\n    imports: [CommonModule, TwCardComponent, TableComponent, TableHeaderComponent, AdkTable],\n    hostDirectives: [AdkTable],\n    template: `\n        <tw-card>\n            <div class=\"adk-card-header\">\n                <tw-table-header\n                    [title]=\"tableHeader.title\"\n                    [subtitle]=\"tableHeader.subtitle\"\n                    [isSearchable]=\"tableHeader.isSearchable\"\n                    [buttons]=\"tableHeader.buttons\"\n                ></tw-table-header>\n            </div>\n            <div class=\"adk-card-body\">\n                <tw-table\n                    #table\n                    [data]=\"data\"\n                    [columns]=\"columns\"\n                    [isSelectable]=\"isSelectable\"\n                    [isDraggable]=\"isDraggable\"\n                    [isSortable]=\"isSortable\"\n                ></tw-table>\n            </div>\n            @if (data.length > 5) {\n            <div class=\"adk-card-footer\">\n                <!-- <tw-table-footer (actionButtonClicked)=\"actionButtonTriggered()\"></tw-table-footer> -->\n            </div>\n            }\n        </tw-card>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TableWrapperComponent {\n    @ViewChild('table') table!: TableComponent;\n    @Input() data: RowData[] = [];\n    @Input() columns: string[] = [];\n    @Input() isDraggable = false;\n    @Input() isSelectable = false;\n    @Input() isSortable = false;\n\n    @Input() tableHeader: { title: string; subtitle: string; isSearchable: boolean; buttons: any[] } = {\n        title: 'Table Header',\n        subtitle: 'Table Subtitle',\n        isSearchable: false,\n        buttons: [],\n    };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-333e1b80d5a62ecfe754e244ec1cc7d43b31a6d38a9b60ed0e002a34c54542e86a4590310a469249143f22a72aa3a4947bc1c17ba2823b91dcf7243b9c9aa20b",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-textarea",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "<div [ngClass]=\"class\">\n  <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  <div class=\"mt-2\">\n    <textarea\n      [formControl]=\"formControl[field.key]\"\n      [pattern]=\"pattern\"\n      [placeholder]=\"placeholder\"\n      [name]=\"field.key\"\n      [id]=\"field.key\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    ></textarea>\n  </div>\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    <div *ngIf=\"formControl[field.key].errors['minlength']\">\n      Must be at least\n      {{ formControl[field.key].errors['minlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n      Must not exceed\n      {{ formControl[field.key].errors['maxlength'].requiredLength }}\n      characters\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n  standalone: true,\n  selector: 'adk-textarea',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    <div [ngClass]=\"class\">\n      <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n      <div class=\"mt-2\">\n        <textarea\n          [formControl]=\"formControl[field.key]\"\n          [pattern]=\"pattern\"\n          [placeholder]=\"placeholder\"\n          [name]=\"field.key\"\n          [id]=\"field.key\"\n          [autocomplete]=\"autocomplete\"\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n          [required]=\"required\"\n        ></textarea>\n      </div>\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n      </p>\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n          Must be at least\n          {{ formControl[field.key].errors['minlength'].requiredLength }}\n          characters\n        </div>\n        <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n          Must not exceed\n          {{ formControl[field.key].errors['maxlength'].requiredLength }}\n          characters\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class TextareaComponent implements OnChanges {\n  @Input() field!: Field;\n  formControl: { [key: string]: AbstractControl | any } = {};\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field.description;\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'col-span-full';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get required() {\n    return this.props?.required ?? true;\n  }\n\n  get pattern() {\n    return this.props?.pattern ?? '';\n  }\n\n  get inputClass() {\n    return (\n        this.props?.inputClass ??\n        'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6'\n    );\n  }\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.initFormControl();\n    }\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 85
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                }
            }
        },
        {
            "name": "TooltipButtonComponent",
            "id": "component-TooltipButtonComponent-c7f2720b01ddc8e993b8e426f2074b35e4044a54af021ecea63140e6b284100a6af62b342bbd25cb6b7230cec9b1ca5ab1ef18161142205ade8e19848492c7e4",
            "file": "projects/ng-lib/src/lib/tw-ui/components/tooltip-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-tooltip-button",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n            .tooltip {\n                position: absolute;\n                z-index: 50;\n                white-space: normal;\n                break-words: break-word;\n                border-radius: 0.375rem; /* rounded-lg */\n                background-color: #000; /* bg-black */\n                padding: 0.375rem 0.75rem; /* py-1.5 px-3 */\n                font-family: 'sans-serif'; /* font-sans */\n                font-size: 0.875rem; /* text-sm */\n                font-weight: 400; /* font-normal */\n                color: #fff; /* text-white */\n                box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* shadow-md */\n            }\n        "
            ],
            "template": "<div class=\"relative\">\n    <button\n        [attr.data-ripple-light]=\"rippleLight\"\n        [adkTooltip]=\"tooltipText\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        class=\"select-none rounded-lg bg-gray-900 py-3 px-6 text-center align-middle font-sans text-xs font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none\"\n    >\n        {{ buttonText }}\n    </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rippleLight",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tooltipPlacement",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipText",
                    "defaultValue": "'Material Tailwind'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkTooltipDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { AdkTooltipDirective } from '../../directives/tooltip';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'tw-tooltip-button',\n    standalone: true,\n    imports: [CommonModule, AdkTooltipDirective],\n    template: `\n        <div class=\"relative\">\n            <button\n                [attr.data-ripple-light]=\"rippleLight\"\n                [adkTooltip]=\"tooltipText\"\n                [tooltipPlacement]=\"tooltipPlacement\"\n                class=\"select-none rounded-lg bg-gray-900 py-3 px-6 text-center align-middle font-sans text-xs font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none\"\n            >\n                {{ buttonText }}\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n            .tooltip {\n                position: absolute;\n                z-index: 50;\n                white-space: normal;\n                break-words: break-word;\n                border-radius: 0.375rem; /* rounded-lg */\n                background-color: #000; /* bg-black */\n                padding: 0.375rem 0.75rem; /* py-1.5 px-3 */\n                font-family: 'sans-serif'; /* font-sans */\n                font-size: 0.875rem; /* text-sm */\n                font-weight: 400; /* font-normal */\n                color: #fff; /* text-white */\n                box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* shadow-md */\n            }\n        `,\n    ],\n})\nexport class TooltipButtonComponent {\n    @Input() tooltipText: string = 'Material Tailwind';\n    @Input() buttonText: string = 'Button';\n    @Input() tooltipPlacement: string = 'top';\n    @Input() rippleLight: boolean = true;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n            .tooltip {\n                position: absolute;\n                z-index: 50;\n                white-space: normal;\n                break-words: break-word;\n                border-radius: 0.375rem; /* rounded-lg */\n                background-color: #000; /* bg-black */\n                padding: 0.375rem 0.75rem; /* py-1.5 px-3 */\n                font-family: 'sans-serif'; /* font-sans */\n                font-size: 0.875rem; /* text-sm */\n                font-weight: 400; /* font-normal */\n                color: #fff; /* text-white */\n                box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* shadow-md */\n            }\n        \n",
            "extends": []
        },
        {
            "name": "TwCardComponent",
            "id": "component-TwCardComponent-813374fed5069e110698665f20d6945c1df96b0ff4ad15dc26b9288037023477d93dd3bb55367cd120a7331f12b01bfb4ac08de05dd5c672f2c458ec97ffaec9",
            "file": "projects/ng-lib/src/lib/tw-ui/components/card/tw-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-card",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    [ngClass]=\"isHeaderWrapped ? 'gap-4' : ''\"\n    class=\"relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-md bg-clip-border\"\n>\n    <div [ngClass]=\"isHeaderWrapped ? 'p-6 pb-1 gap-4' : ''\" class=\"flex flex-col\">\n        <ng-content select=\".adk-card-header\"></ng-content>\n        <ng-content select=\".adk-card-subtitle\"></ng-content>\n        <ng-content select=\".adk-card-body\"></ng-content>\n    </div>\n    <div [ngClass]=\"isFooterWrapped ? 'p-6 pt-0' : ''\">\n        <ng-content select=\".adk-card-footer\"></ng-content>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isFooterWrapped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isHeaderWrapped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'tw-card',\n    standalone: true,\n    imports: [CommonModule],\n    template: `\n        <div\n            [ngClass]=\"isHeaderWrapped ? 'gap-4' : ''\"\n            class=\"relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-md bg-clip-border\"\n        >\n            <div [ngClass]=\"isHeaderWrapped ? 'p-6 pb-1 gap-4' : ''\" class=\"flex flex-col\">\n                <ng-content select=\".adk-card-header\"></ng-content>\n                <ng-content select=\".adk-card-subtitle\"></ng-content>\n                <ng-content select=\".adk-card-body\"></ng-content>\n            </div>\n            <div [ngClass]=\"isFooterWrapped ? 'p-6 pt-0' : ''\">\n                <ng-content select=\".adk-card-footer\"></ng-content>\n            </div>\n        </div>\n    `,\n})\nexport class TwCardComponent implements OnChanges {\n    @Input() isHeaderWrapped = false;\n    @Input() isFooterWrapped = false;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['isHeaderWrapped']) this.isHeaderWrapped = changes['isHeaderWrapped'].currentValue;\n        if (changes['isFooterWrapped']) this.isFooterWrapped = changes['isFooterWrapped'].currentValue;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "TwDefaultTableComponent",
            "id": "component-TwDefaultTableComponent-9f4f42de8b9782162663059b1cbd795db9f6519fd5946822655d43e642ce7c9691b5b61abe2e510f32ce43dbbca159e44936ec8be3a283d9e2ed4501694ed801",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-default-table",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "templateUrl": [
                "./tw-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "actionButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "TemplateRef<any> | string",
                    "decorators": []
                },
                {
                    "name": "actionColName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "groupBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasFields",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "isActionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isPaginationAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "RowData[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionButtonSelectionEmit",
                    "defaultValue": "new EventEmitter<any | any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "buttonClickEmit",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedRowsEmit",
                    "defaultValue": "new EventEmitter<RowData[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datasource",
                    "defaultValue": "this.tdss.get('dataSource')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "groupData",
                    "defaultValue": "new ImperativeObservable<{ [key: string]: RowData[] }>({ key: this.tdss.get('dataSource') })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "selectedIndex",
                    "defaultValue": "new ImperativeObservable<number>(this.tdss.get('draggedColIndex') ?? 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "selectedRow",
                    "defaultValue": "new ImperativeObservable<RowData | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selection', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableDataSourceService",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methodsClass": [
                {
                    "name": "actionButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cellMultiSelector",
                    "args": [
                        {
                            "name": "index",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Field>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitSelectedRows",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "groupByData",
                    "args": [
                        {
                            "name": "array",
                            "type": "RowData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "RowData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragStart",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Drag and Drop Handlers\n",
                    "description": "<p> Drag and Drop Handlers</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7633,
                                "end": 7638,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7627,
                                "end": 7632,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCellFieldObject",
                    "args": [
                        {
                            "name": "value",
                            "type": "Field | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Field | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCellValArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | ",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapSelectedRows",
                    "args": [],
                    "optional": false,
                    "returnType": "{ selectedRows: any; formGroupValues: any; }",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "objectKeysGroupData",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortRows",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groupKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nisSelectable actions\n",
                    "description": "<p>isSelectable actions</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6432,
                                "end": 6437,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6426,
                                "end": 6431,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6452,
                                "end": 6460,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "groupKey"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6446,
                                "end": 6451,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleSelectItem",
                    "args": [
                        {
                            "name": "row",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGroupData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkSelection"
                },
                {
                    "name": "AdkTooltipDirective",
                    "type": "directive"
                },
                {
                    "name": "AdkExpansionPanelComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "SortableIconComponent",
                    "type": "component"
                },
                {
                    "name": "FieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AdkFormGroup, AdkSelection } from '../../../directives';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    inject,\n} from '@angular/core';\nimport { Field, RowData } from '../../../tw-form-ui';\nimport { SortableIconComponent, cellSelector } from './utils';\n\nimport { AdkExpansionPanelComponent } from '../expansion-panel.component';\nimport { AdkTooltipDirective } from '../../../directives/tooltip';\nimport { CheckboxComponent } from '../../../tw-form-ui/components/types/checkbox.component';\nimport { FieldComponent } from '../../../tw-form-ui/components/field.component';\nimport { ImperativeObservable } from '../../../utils';\nimport { Observable } from 'rxjs';\nimport { TableDataSourceService } from './table-datasource.service';\nimport { TwTypographyComponent } from '../typography.component';\n\n//TODO: attach to selected values if selectable string array value should change to what values are selected\n//TODO: reset when deselected\n@Component({\n    selector: 'tw-default-table',\n    templateUrl: './tw-table.component.html',\n    standalone: true,\n    imports: [\n        CommonModule,\n        AdkSelection,\n        AdkTooltipDirective,\n        AdkExpansionPanelComponent,\n        AsyncPipe,\n        TwTypographyComponent,\n        CheckboxComponent,\n        SortableIconComponent,\n        FieldComponent,\n    ],\n    hostDirectives: [AdkFormGroup],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TwDefaultTableComponent implements OnChanges, OnDestroy {\n    #formGroup = inject(AdkFormGroup, { self: true });\n    @ViewChild('selection', { static: true }) selection: any;\n    @Input() isSelectable = false;\n    @Input() hasFields = false;\n    @Input() isSortable = false;\n    @Input() isDraggable = false;\n    @Input() headers: string[] = [];\n    @Input() actionColName?: string;\n    @Input() actionButton?: TemplateRef<any> | string;\n    @Input() rows: RowData[] = [];\n    @Input() groupBy = '';\n    @Input() isPaginationAction?: boolean;\n    @Input() isActionChange?: boolean;\n\n    @Output() selectedRowsEmit = new EventEmitter<RowData[]>();\n    @Output() actionButtonSelectionEmit = new EventEmitter<any | any[]>();\n    @Output() buttonClickEmit = new EventEmitter();\n\n    get formGroup() {\n        return this.#formGroup.formGroup();\n    }\n\n    tdss: TableDataSourceService = inject(TableDataSourceService);\n    datasource = this.tdss.get('dataSource');\n    groupData = new ImperativeObservable<{ [key: string]: RowData[] }>({ key: this.tdss.get('dataSource') });\n    selectedRow = new ImperativeObservable<RowData | null>(null);\n    selectedIndex = new ImperativeObservable<number>(this.tdss.get('draggedColIndex') ?? 0);\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['headers']) this.tdss.setHeaders(changes['headers'].currentValue);\n        if (changes['rows']) this.tdss.setTableDataSource(changes['rows'].currentValue);\n        if (changes['isActionChange']) {\n            if (!changes['isActionChange'].firstChange) {\n                this.headers = this.tdss.get('headers');\n                this.rows = this.tdss.get('dataSource');\n            }\n        }\n        if (changes['isPaginationAction'])\n            this.groupData.value = this.groupByData(this.tdss.get('dataSource'), this.tdss.get('preferences').groupBy ?? '');\n        if (changes['isSelectable']) this.isSelectable = changes['isSelectable'].currentValue;\n        if (changes['hasFields']) this.hasFields = changes['hasFields'].currentValue;\n        if (changes['isSortable']) this.isSortable = changes['isSortable'].currentValue;\n        if (changes['isDraggable']) this.isDraggable = changes['isDraggable'].currentValue;\n        if (changes['groupBy']) this.tdss.setGroupBy(changes['groupBy'].currentValue);\n        this.updateGroupData();\n        this.sortRows('');\n    }\n\n    ngOnDestroy(): void {\n        this.tdss.clear();\n    }\n\n    cellMultiSelector(index: number | string, value: string[]): Observable<Field> {\n        const field = new ImperativeObservable<Field>(cellSelector(index, value));\n        return field.change$;\n    }\n\n    isCellValArray(value: string | []) {\n        return Array.isArray(value);\n    }\n\n    isCellFieldObject(value: Field | any) {\n        if (typeof value === 'object') return true;\n        return false;\n    }\n\n    mapSelectedRows() {\n        return {\n            selectedRows: this.tdss.get('selectedRows'),\n            formGroupValues: this.formGroup.value,\n        };\n    }\n\n    private updateGroupData(): void {\n        const groupByVar = this.tdss.get('preferences').groupBy;\n        const groupData =\n            groupByVar && groupByVar !== ''\n                ? this.groupByData(this.tdss.get('dataSource'), groupByVar)\n                : ({ key: this.tdss.get('dataSource') } as { [key: string]: RowData[] });\n        this.groupData.value = { ...groupData };\n    }\n\n    objectKeysGroupData(obj: any): any {\n        return Object.keys(obj);\n    }\n\n    private groupByData(array: RowData[], key: string): { [key: string]: RowData[] } {\n        const gKey = key.toLowerCase();\n        return array.reduce((result, currentValue) => {\n            const normalizedCurrentValue: RowData = Object.keys(currentValue).reduce((acc, k) => {\n                acc[k.toLowerCase()] = currentValue[k];\n                return acc;\n            }, {} as RowData);\n\n            const groupKey = normalizedCurrentValue[gKey] as string;\n            if (!result[groupKey]) {\n                result[groupKey] = [];\n            }\n            result[groupKey].push(currentValue);\n            return result;\n        }, {} as { [key: string]: RowData[] });\n    }\n\n    isSelected(row: RowData): boolean {\n        const selectedRowStr = JSON.stringify(this.selectedRow.value);\n        const rowStr = JSON.stringify(row);\n        return selectedRowStr === rowStr;\n    }\n\n    get allRowsSelected(): boolean {\n        const dataSource = this.tdss.get('dataSource');\n        const selectedRows = this.tdss.get('selectedRows');\n        return dataSource.length > 0 && selectedRows.length === dataSource.length;\n    }\n\n    /**\n     * isSelectable actions\n     * @param event\n     * @param groupKey\n     */\n    toggleSelectAll(event: Event, groupKey: string): void {\n        const isChecked = (event.target as HTMLInputElement).checked;\n        if (isChecked) {\n            this.tdss.toggleSelectedAllRows();\n            this.groupData.value[groupKey].forEach((item) => this.selection.select(item));\n        } else {\n            this.tdss.toggleSelectedAllRows();\n            this.selection.clear();\n        }\n        this.emitSelectedRows();\n    }\n\n    toggleSelectItem(row: object): void {\n        const itemStr = JSON.stringify(row);\n        if (this.selection.selected(itemStr)) {\n            this.selection.deselect(itemStr);\n        } else {\n            this.selection.select(itemStr);\n        }\n        this.tdss.setSelectedRows(row);\n        this.emitSelectedRows();\n    }\n\n    sortRows(key: string): void {\n        const currentDirection = this.tdss.get('sortDataSource').direction;\n        const newDirection: 'ascending' | 'descending' = currentDirection === 'ascending' ? 'descending' : 'ascending';\n        this.tdss.sortDataSource({ key, direction: newDirection });\n        this.updateGroupData();\n    }\n    /**\n     *  Drag and Drop Handlers\n     * @param index\n     */\n    handleDragStart(index: number): void {\n        this.tdss.dragStart(index);\n    }\n\n    handleDragOver(event: DragEvent): void {\n        event.preventDefault();\n    }\n\n    handleDrop(index: number, event: DragEvent): void {\n        event.preventDefault();\n        this.tdss.dragDrop(index);\n        this.headers = this.tdss.get('headers');\n        this.groupData.value = this.groupByData(this.tdss.get('dataSource'), this.groupBy);\n    }\n\n    actionButtonClicked() {\n        this.actionButtonSelectionEmit.emit(this.mapSelectedRows());\n    }\n\n    emitSelectedRows(): void {\n        this.selectedRowsEmit.emit(this.tdss.get('selectedRows'));\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "allRowsSelected": {
                    "name": "allRowsSelected",
                    "getSignature": {
                        "name": "allRowsSelected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 166
                    }
                }
            },
            "templateData": "<div adk-selection #selection=\"adkSelection\">\n  <table *ngIf=\"(groupData.change$ | async) as groupData\" aria-hidden=\"true\"\n    class=\"w-full text-left table-auto min-w-max\">\n    <thead>\n      <ng-container\n        *ngTemplateOutlet=\"renderThead; context: { groupData, headers: tdss.get('headers'), isSelectable, sortDataSource: tdss.get('sortDataSource')}, selection\"></ng-container>\n    </thead>\n    <tbody>\n      @for(groupKey of objectKeysGroupData(groupData); track $index){\n      @if(groupBy && groupKey !== '') {\n      <ng-container\n        *ngTemplateOutlet=\"groupByRender; context: { groupData, headers, isSelectable, groupKey, selection }\"></ng-container>\n      } @else {\n      @for(rowData of groupData[groupKey]; track $index) {\n      <ng-container\n        *ngTemplateOutlet=\"renderRow; context: { headers, rowData, rowIndex: $index, isSelectable, selection }\"></ng-container>\n      }\n      }\n      }\n    </tbody>\n  </table>\n</div>\n\n<!-- Render Table Header -->\n<ng-template #renderThead let-groupData=\"groupData\" let-header=\"headers\" let-isSelectable=\"isSelectable\"\n  let-sortDataSource=\"sortDataSource\" let-selection=\"selection\">\n  <tr>\n    @if(isSelectable) {\n    <th id=\"checkAll\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-1 max-w-[10px]\">\n      <ng-container\n        *ngTemplateOutlet=\"checkBox; context: {selection, groupData, rowData: undefined, isCheckAll: true}\"></ng-container>\n    </th>\n    }\n    @for(header of headers; track $index) {\n    <th [id]=\"header\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-3 cursor-pointer\" [attr.key]=\"header\"\n      [ngClass]=\"{'border-b border-blue-gray-100 bg-blue-gray-50 p-3 cursor-pointer': true}\"\n      [attr.draggable]=\"isDraggable\" (dragstart)=\"handleDragStart($index)\" (dragover)=\"handleDragOver($event)\"\n      (drop)=\"handleDrop($index, $event)\" (drop)=\"handleDrop($index, $event)\" scope=\"col\">\n      <tw-typography [variant]=\"'small'\"\n        [classStyle]=\"'flex items-center justify-between gap-2 font-normal leading-none opacity-70'\">\n        {{ header ?? ' ' | uppercase}}\n        <div class=\"flex flex-row gap-2\">\n          @if($index !== headers.length && isSortable) {\n          <tw-sortable-icon (click)=\"sortRows(header)\" (keydown)=\"sortRows(header)\"></tw-sortable-icon>\n          } @if(tdss.get('sortDataSource').key === header && isSortable) {\n          <span>{{ sortDataSource.direction === 'ascending' ? '🔼' : '🔽' }}</span>\n          }\n        </div>\n      </tw-typography>\n    </th>\n    }\n  </tr>\n</ng-template>\n\n<!-- Group By Render -->\n<ng-template #groupByRender let-groupData=\"groupData\" let-headers=\"headers\" let-isSelectable=\"isSelectable\"\n  let-groupKey=\"groupKey\" let-selection=\"selection\">\n  <tr>\n    <td [colSpan]=\"headers.length + (isSelectable ? 1 : 0) + (actionButton ? 1 : 0)\">\n      <adk-expansion-panel>\n        <ng-template #expansionPanelHeader>\n          {{groupKey}}\n        </ng-template>\n        <ng-template #expansionPanelBody>\n          <table aria-hidden=\"true\" class=\"w-full min-w-max table-auto text-left\">\n            <tbody>\n              @for(rowData of groupData[groupKey]; track $index) {\n              <ng-container\n                *ngTemplateOutlet=\"renderRow; context: { headers, rowData, rowIndex: $index, isSelectable, selection }\">\n              </ng-container>\n              }\n            </tbody>\n          </table>\n        </ng-template>\n      </adk-expansion-panel>\n    </td>\n  </tr>\n</ng-template>\n\n<!-- Render Row Table Cells -->\n<ng-template #renderRow let-header=\"headers\" let-rowData=\"rowData\" let-rowIndex=\"rowIndex\"\n  let-isSelectable=\"isSelectable\" let-selection=\"selection\">\n  <tr [ngClass]=\"isSelected(rowData) ? 'bg-light-blue-50': ''\" (click)=\"selectedRow.value = rowData\">\n    @if(isSelectable) {\n    <td [ngClass]=\"isSelectable ? 'p-1' : 'p-4'\" class=\"border-b border-blue-gray-50 p-1 max-h-[38px] max-w-[15px]\">\n      <ng-container\n        *ngTemplateOutlet=\"checkBox; context: {selection, groupData: undefined, rowData, isCheckAll: false}\"></ng-container>\n    </td>\n    }\n    @for (header of headers; track $index) {\n    <td [ngClass]=\"isSelectable ? 'p-1' : 'p-2'\"\n      class=\"border-b border-blue-gray-50 min-h-[48.5px] min-w-[60px] max-w-[60px] truncate\">\n      <div [adkTooltip]=\"rowData[header]\" tooltipPlacement=\"bottom\" [ngStyle]=\"{'cursor': 'text'}\">\n        @if(isCellValArray(rowData[header])) {\n        @if(isSelectable && isMultiSelectField){\n        <adk-field\n          *ngIf=\"selection.selectedObj(rowData) && (cellMultiSelector(rowIndex, rowData[header]) | async) as field\"\n          [field]=\"field\"></adk-field>\n        } @else {\n        <tw-typography [variant]=\"'small'\" class=\"font-normal ml-2\">\n          {{ rowData[header].join(', ') }}\n        </tw-typography>\n        }\n        } @else {\n        @if (isCellFieldObject(rowData[header])) {\n        <adk-field [field]=\"rowData[header]\"></adk-field>\n        } @else {\n        <tw-typography [variant]=\"'small'\" class=\"font-normal ml-2\">\n          {{ rowData[header] }}\n        </tw-typography>\n        }\n        }\n      </div>\n    </td>\n    }\n  </tr>\n</ng-template>\n\n<!-- Checkbox Render -->\n<ng-template #checkBox let-isCheckAll=\"isCheckAll\" let-selection=\"selection\" let-groupData=\"groupData\"\n  let-rowData=\"rowData\">\n  @if(isCheckAll) {\n  <div class=\"inline-flex items-center\">\n    <label for=\"selectAllCheckbox\" class=\"relative flex items-center p-3 rounded-full cursor-pointer\">\n      <input type=\"checkbox\"\n        class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10 w-4 h-4\"\n        id=\"selectAllCheckbox\" name=\"selectAllCheckbox\" [checked]=\"allRowsSelected\"\n        (change)=\"toggleSelectAll($event, objectKeysGroupData(groupData))\" />\n      <span\n        class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3.5 w-3.5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n          stroke=\"currentColor\" stroke-width=\"1\">\n          <path fill-rule=\"evenodd\"\n            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n            clip-rule=\"evenodd\"></path>\n        </svg>\n      </span>\n    </label>\n  </div>\n  } @else {\n  <div class=\"inline-flex items-center\">\n    <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\n      <input type=\"checkbox\"\n        class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10 w-4 h-4\"\n        [checked]=\"selection.selected(rowData)\" (change)=\"toggleSelectItem(rowData)\" />\n      <span\n        class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-3.5 w-3.5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n          stroke=\"currentColor\" stroke-width=\"1\">\n          <path fill-rule=\"evenodd\"\n            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n            clip-rule=\"evenodd\"></path>\n        </svg>\n      </span>\n    </label>\n  </div>\n  }\n</ng-template>"
        },
        {
            "name": "TwTableCardComponent",
            "id": "component-TwTableCardComponent-5594fce563958353d8f7ff1dfa037809512f9941cb88e5c805692371d027b4b2d127a976b76a9d1d2e246bf0ee31863f14281ddf960253f4205b4d7a85084bca",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-card",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<tw-card>\n    <div class=\"adk-card-header\">\n        <tw-table-card-header\n            [title]=\"title\"\n            [subtitle]=\"subtitle\"\n            [isSearchable]=\"isSearchable\"\n            [buttons]=\"buttons\"\n            (actionKeyPress)=\"isActionChange = !isActionChange\"\n        ></tw-table-card-header>\n    </div>\n    <div class=\"adk-card-body\">\n        <tw-default-table\n            [headers]=\"headers\"\n            [rows]=\"rows\"\n            [isSelectable]=\"isSelectable\"\n            [hasFields]=\"hasFields\"\n            [isSortable]=\"isSortable\"\n            [isDraggable]=\"isDraggable\"\n            [groupBy]=\"this.tdss.get('preferences').groupBy ?? ''\"\n            [actionColName]=\"actionColName\"\n            [actionButton]=\"actionButton\"\n            [isPaginationAction]=\"paginationAction\"\n            [isActionChange]=\"isActionChange\"\n            (selectedRowsChange)=\"selectedRowsChangeHandler($event)\"\n        ></tw-default-table>\n    </div>\n    @if (rows.length > 5) {\n    <div class=\"adk-card-footer\">\n        <tw-table-footer (actionButtonClicked)=\"actionButtonTriggered()\"></tw-table-footer>\n    </div>\n    }\n</tw-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "TemplateRef<any> | string",
                    "decorators": []
                },
                {
                    "name": "actionColName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "groupBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasFields",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSearchable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "RowData[]",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionKeyPress",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedRowsChange",
                    "defaultValue": "new EventEmitter<RowData[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isActionChange",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "paginationAction",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "actionButtonTriggered",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isActionTriggered",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectedRowsChangeHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "RowData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "RowData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "TwDefaultTableComponent",
                    "type": "component"
                },
                {
                    "name": "TwTableHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "TwTableFooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef, inject } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { RowData } from '../../../tw-form-ui/models';\nimport { TableDataSourceService } from './table-datasource.service';\nimport { TwCardComponent } from '../card/tw-card.component';\nimport { TwDefaultTableComponent } from './tw-table.component';\nimport { TwTableFooterComponent } from './tw-table-footer.component';\nimport { TwTableHeaderComponent } from './tw-table-header.component';\n\n@Component({\n    selector: 'tw-table-card',\n    standalone: true,\n    imports: [CommonModule, TwCardComponent, TwDefaultTableComponent, TwTableHeaderComponent, TwTableFooterComponent],\n    template: `\n        <tw-card>\n            <div class=\"adk-card-header\">\n                <tw-table-card-header\n                    [title]=\"title\"\n                    [subtitle]=\"subtitle\"\n                    [isSearchable]=\"isSearchable\"\n                    [buttons]=\"buttons\"\n                    (actionKeyPress)=\"isActionChange = !isActionChange\"\n                ></tw-table-card-header>\n            </div>\n            <div class=\"adk-card-body\">\n                <tw-default-table\n                    [headers]=\"headers\"\n                    [rows]=\"rows\"\n                    [isSelectable]=\"isSelectable\"\n                    [hasFields]=\"hasFields\"\n                    [isSortable]=\"isSortable\"\n                    [isDraggable]=\"isDraggable\"\n                    [groupBy]=\"this.tdss.get('preferences').groupBy ?? ''\"\n                    [actionColName]=\"actionColName\"\n                    [actionButton]=\"actionButton\"\n                    [isPaginationAction]=\"paginationAction\"\n                    [isActionChange]=\"isActionChange\"\n                    (selectedRowsChange)=\"selectedRowsChangeHandler($event)\"\n                ></tw-default-table>\n            </div>\n            @if (rows.length > 5) {\n            <div class=\"adk-card-footer\">\n                <tw-table-footer (actionButtonClicked)=\"actionButtonTriggered()\"></tw-table-footer>\n            </div>\n            }\n        </tw-card>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TwTableCardComponent {\n    tdss = inject(TableDataSourceService);\n    @Input() isSelectable = false;\n    @Input() hasFields = false;\n    @Input() isSortable = false;\n    @Input() isDraggable = false;\n    @Input() isSearchable = false;\n    @Input() headers: string[] = [];\n    @Input() actionColName?: string;\n    @Input() actionButton?: TemplateRef<any> | string;\n    @Input() rows: RowData[] = [];\n    @Input() groupBy = '';\n    @Input() title?: string;\n    @Input() subtitle?: string;\n    @Input() buttons: {\n        label: string;\n        onClick: () => void;\n        color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger';\n        icon: string;\n    }[] = [];\n    @Output() actionKeyPress = new EventEmitter<boolean>();\n    @Output() selectedRowsChange = new EventEmitter<RowData[]>();\n\n    paginationAction = false;\n    isActionChange = false;\n\n    isActionTriggered() {\n        this.isActionChange = !this.isActionChange;\n    }\n\n    actionButtonTriggered() {\n        this.paginationAction = !this.paginationAction;\n    }\n\n    selectedRowsChangeHandler(event: RowData[]) {\n        this.selectedRowsChange.emit(event);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "TwTableFooterComponent",
            "id": "component-TwTableFooterComponent-58da299d6fc6198714177ea21f5d5cb67809bcd0bff020c939c4cbbf0fc8d7d1c2ce4a01e4987af7edcb0d969dd29fb96a2cb82fd1e9324181d324326fce1f4b",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-footer",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<div class=\"flex items-center justify-between border-t border-gray-50 p-4\">\n    <tw-typography variant=\"small\" color=\"gray\" class=\"w-full\" classStyle=\"flex flex-row font-normal\">\n        <span class=\"flex flex-col justify-center mr-2\" style=\"white-space: 'nowrap'\">\n            Page {{ currentPage.change$ | async }} of {{ totalPages.change$ | async }}\n        </span>\n        <adk-select [field]=\"field\" (fieldValueChange)=\"handlePageSizeChange($event)\"></adk-select>\n    </tw-typography>\n    @if((totalPages.change$ | async) ?? 0 > 1){\n    <div class=\"flex gap-2\">\n        <adk-button size=\"sm\" color=\"primary\" [disabled]=\"isPreviousDisabled()\" (click)=\"handlePreviousClick()\">\n            Previous\n        </adk-button>\n        <adk-button size=\"sm\" color=\"primary\" [disabled]=\"isNextDisabled()\" (click)=\"handleNextClick()\"> Next </adk-button>\n    </div>\n    }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "actionButtonClicked",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "new ImperativeObservable<number>(this.tdss.get('pagination')['currentPage'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "field",
                    "defaultValue": "paginationSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "totalPages",
                    "defaultValue": "new ImperativeObservable<number>(this.tdss.get('pagination')['totalPages'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "handleInitialPagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleNextClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePageSizeChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePreviousClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isNextDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isPreviousDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, CommonModule } from '@angular/common';\nimport { Component, EventEmitter, OnInit, Output, inject } from '@angular/core';\n\nimport { ButtonComponent } from '../button.component';\nimport { ImperativeObservable } from '../../../utils';\nimport { SelectComponent } from '../../../tw-form-ui/components/types/select.component';\nimport { TableDataSourceService } from './table-datasource.service';\nimport { TwTypographyComponent } from '../typography.component';\nimport { paginationSelector } from './utils';\n\n@Component({\n    selector: 'tw-table-footer',\n    standalone: true,\n    template: `\n        <div class=\"flex items-center justify-between border-t border-gray-50 p-4\">\n            <tw-typography variant=\"small\" color=\"gray\" class=\"w-full\" classStyle=\"flex flex-row font-normal\">\n                <span class=\"flex flex-col justify-center mr-2\" style=\"white-space: 'nowrap'\">\n                    Page {{ currentPage.change$ | async }} of {{ totalPages.change$ | async }}\n                </span>\n                <adk-select [field]=\"field\" (fieldValueChange)=\"handlePageSizeChange($event)\"></adk-select>\n            </tw-typography>\n            @if((totalPages.change$ | async) ?? 0 > 1){\n            <div class=\"flex gap-2\">\n                <adk-button size=\"sm\" color=\"primary\" [disabled]=\"isPreviousDisabled()\" (click)=\"handlePreviousClick()\">\n                    Previous\n                </adk-button>\n                <adk-button size=\"sm\" color=\"primary\" [disabled]=\"isNextDisabled()\" (click)=\"handleNextClick()\"> Next </adk-button>\n            </div>\n            }\n        </div>\n    `,\n    imports: [CommonModule, AsyncPipe, TwTypographyComponent, ButtonComponent, SelectComponent],\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TwTableFooterComponent implements OnInit {\n    tdss = inject(TableDataSourceService);\n    @Output() actionButtonClicked = new EventEmitter<boolean>();\n    currentPage = new ImperativeObservable<number>(this.tdss.get('pagination')['currentPage']);\n    totalPages = new ImperativeObservable<number>(this.tdss.get('pagination')['totalPages']);\n\n    field = paginationSelector;\n\n    ngOnInit(): void {\n        this.handleInitialPagination();\n    }\n\n    isNextDisabled() {\n        return this.currentPage.value >= this.totalPages.value;\n    }\n\n    isPreviousDisabled() {\n        return this.currentPage.value <= 1;\n    }\n\n    handleInitialPagination(): void {\n        this.tdss.setPaginationState({ currentPage: 1, pageSize: 5 });\n        this.updateValues();\n        this.actionButtonClicked.emit();\n    }\n\n    handlePageSizeChange(e: any): void {\n        const pageSize = typeof e === 'string' ? parseInt(e, 10) : e;\n        this.tdss.setPaginationState({ currentPage: 1, pageSize });\n        this.updateValues();\n\n        this.actionButtonClicked.emit(true);\n    }\n\n    handleNextClick(): void {\n        if (!this.isNextDisabled()) this.tdss.setPaginationState({ currentPage: this.currentPage.value + 1 });\n        this.updateValues();\n        this.actionButtonClicked.emit(true);\n    }\n\n    handlePreviousClick(): void {\n        if (!this.isPreviousDisabled()) this.tdss.setPaginationState({ currentPage: this.currentPage.value - 1 });\n        this.updateValues();\n        this.actionButtonClicked.emit(true);\n    }\n\n    private updateValues() {\n        this.currentPage.value = this.tdss.get('pagination')['currentPage'];\n        this.totalPages.value = this.tdss.get('pagination')['totalPages'];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TwTableHeaderComponent",
            "id": "component-TwTableHeaderComponent-48dd251d34af4bc3ca4c54bc1bd84a69f86f5ba14cfd2cfaed094e4f417be783a2cad5af23e94515f493a033e71b754363d1eb21ac4159a410b2fe5b385a71ef",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-card-header",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n        width: 100%;\n      }\n      .material-symbols-outlined {\n        font-size: 16px !important;\n      }\n    "
            ],
            "template": "<div class=\"relative bg-clip-border mt-4 mx-4 bg-white text-gray-700 rounded-none overflow-visible\">   <div class=\"mb-2 flex items-center justify-between gap-8\">\n     <div>\n       @if(title){\n       <tw-typography\n         variant=\"h5\"\n         color=\"blue-gray\"\n         classStyle=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n         >{{ title }}</tw-typography\n       >\n       } @if(subtitle){\n       <tw-typography color=\"gray\" classStyle=\"mt-1 font-normal\">{{ subtitle }}</tw-typography>\n       }\n     </div>\n     <div class=\"flex shrink-0 flex-col gap-2 sm:flex-row\">\n       @if(buttons && buttons.length > 0){ @for(button of buttons; track $index){\n       <div class=\"flex items-center gap-3 cursor-pointer\" (click)=\"button.onClick()\">\n         <adk-button [color]=\"button.color\" (click)=\"button.onClick()\">\n           <span class=\"flex items-center gap-2\">\n             @if(button.icon){\n             <span class=\"material-symbols-outlined\">{{ button.icon }}</span> }{{ button.label }}</span\n           >\n         </adk-button>\n       </div>\n       } }\n       <div class=\"flex items-center gap-3 cursor-pointer\">\n         <tw-table-settings-dialog (triggerUpdate)=\"handlePreferences()\"></tw-table-settings-dialog>\n       </div>\n     </div>\n   </div>\n\n   <div class=\"flex flex-col items-center justify-between gap-4 md:flex-row\">\n     <!-- @if(tabs?.length){ -->\n     <!-- <Tabs value=\"{tabs.length\">\n               0 ? tabs[0].value : ''} class=\"w-full md:w-max\">\n               <TabsHeader>\n                   {tabs.map(({ label, value }) => (\n                   <Tab key=\"{value}\" value=\"{value}\"> &nbsp;&nbsp;{label}&nbsp;&nbsp; </Tab>\n                   ))}\n               </TabsHeader>\n           </Tabs> -->\n     <!-- } -->\n   </div>\n   @if((searchColumn.change$ | async) && isSearchable){\n   <form *ngIf=\"field.change$ | async as field\" [formGroup]=\"formGroup\" class=\"flex flex-row gap-2 w-full flex-wrap z-[20000]\">\n     <adk-fields [fieldConfig]=\"[field]\"></adk-fields>\n   </form>\n   }\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "buttons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "isSearchable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchColumnValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionKeyPress",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "field",
                    "defaultValue": "new ImperativeObservable<Field | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "isFirstChange",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "searchColumn",
                    "defaultValue": "new ImperativeObservable<string | null>(this.tdss.get('filterDataSource').column)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methodsClass": [
                {
                    "name": "handleFiltering",
                    "args": [
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setField",
                    "args": [
                        {
                            "name": "column",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FieldsComponent",
                    "type": "component"
                },
                {
                    "name": "TwTableSettingsDialogComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AdkFormGroup, Field, FieldsComponent } from '../../../tw-form-ui';\nimport { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\nimport { AsyncPipe, CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from '../button.component';\nimport { ImperativeObservable } from '../../../utils';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TableDataSourceService } from './table-datasource.service';\nimport { TwTableSettingsDialogComponent } from './tw-table-settings-dialog.component';\nimport { TwTypographyComponent } from '../typography.component';\nimport { searchColumnSelector } from './utils';\n\n@Component({\n  selector: 'tw-table-card-header',\n  standalone: true,\n  template: ` <div class=\"relative bg-clip-border mt-4 mx-4 bg-white text-gray-700 rounded-none overflow-visible\">\n    <div class=\"mb-2 flex items-center justify-between gap-8\">\n      <div>\n        @if(title){\n        <tw-typography\n          variant=\"h5\"\n          color=\"blue-gray\"\n          classStyle=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n          >{{ title }}</tw-typography\n        >\n        } @if(subtitle){\n        <tw-typography color=\"gray\" classStyle=\"mt-1 font-normal\">{{ subtitle }}</tw-typography>\n        }\n      </div>\n      <div class=\"flex shrink-0 flex-col gap-2 sm:flex-row\">\n        @if(buttons && buttons.length > 0){ @for(button of buttons; track $index){\n        <div class=\"flex items-center gap-3 cursor-pointer\" (click)=\"button.onClick()\">\n          <adk-button [color]=\"button.color\" (click)=\"button.onClick()\">\n            <span class=\"flex items-center gap-2\">\n              @if(button.icon){\n              <span class=\"material-symbols-outlined\">{{ button.icon }}</span> }{{ button.label }}</span\n            >\n          </adk-button>\n        </div>\n        } }\n        <div class=\"flex items-center gap-3 cursor-pointer\">\n          <tw-table-settings-dialog (triggerUpdate)=\"handlePreferences()\"></tw-table-settings-dialog>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"flex flex-col items-center justify-between gap-4 md:flex-row\">\n      <!-- @if(tabs?.length){ -->\n      <!-- <Tabs value=\"{tabs.length\">\n                0 ? tabs[0].value : ''} class=\"w-full md:w-max\">\n                <TabsHeader>\n                    {tabs.map(({ label, value }) => (\n                    <Tab key=\"{value}\" value=\"{value}\"> &nbsp;&nbsp;{label}&nbsp;&nbsp; </Tab>\n                    ))}\n                </TabsHeader>\n            </Tabs> -->\n      <!-- } -->\n    </div>\n    @if((searchColumn.change$ | async) && isSearchable){\n    <form *ngIf=\"field.change$ | async as field\" [formGroup]=\"formGroup\" class=\"flex flex-row gap-2 w-full flex-wrap z-[20000]\">\n      <adk-fields [fieldConfig]=\"[field]\"></adk-fields>\n    </form>\n    }\n  </div>`,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    AsyncPipe,\n    TwTypographyComponent,\n    ButtonComponent,\n    FieldsComponent,\n    TwTableSettingsDialogComponent,\n  ],\n  hostDirectives: [AdkFormGroup],\n  styles: [\n    `\n      :host {\n        display: block;\n        width: 100%;\n      }\n      .material-symbols-outlined {\n        font-size: 16px !important;\n      }\n    `,\n  ],\n})\nexport class TwTableHeaderComponent implements OnInit, AfterViewInit {\n  #formGroup = inject(AdkFormGroup, { self: true });\n  tdss = inject(TableDataSourceService);\n  @Input() title?: string;\n  @Input() subtitle?: string;\n  @Input() isSearchable = false;\n  @Input() searchColumnValue?: string;\n  @Input() buttons: {\n    label: string;\n    onClick: () => void;\n    color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger';\n    icon: string;\n  }[] = [];\n  @Output() actionKeyPress = new EventEmitter<boolean>();\n\n  searchColumn = new ImperativeObservable<string | null>(this.tdss.get('filterDataSource').column);\n  field = new ImperativeObservable<Field | undefined>(undefined);\n  isFirstChange = true;\n\n  get formGroup() {\n    return this.#formGroup.formGroup();\n  }\n\n  ngAfterViewInit(): void {\n    this.searchColumn.value = this.tdss.get('filterDataSource').column;\n    this.searchColumn.change$.subscribe((e: any) => {\n      this.#formGroup.reset();\n      this.field.value = this.setField(e);\n      this.#formGroup.setFormGroup([this.field.value]);\n      this.formGroup.valueChanges.subscribe((e) => {\n        this.handleFiltering(e);\n      });\n      if (!this.isFirstChange) {\n        this.actionKeyPress.emit(true);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.tdss.initialFilterSearch();\n  }\n\n  handlePreferences(): void {\n    this.searchColumn.value = this.tdss.get('filterDataSource').column;\n    this.actionKeyPress.emit(true);\n  }\n\n  handleFiltering({ searchColumn }: any): void {\n    this.tdss.setFilter({ column: this.searchColumn.value, value: searchColumn });\n    this.actionKeyPress.emit(true);\n  }\n\n  setField(column: string | undefined): Field {\n    this.resetField();\n    setTimeout(() => {\n      console.info('Timed column value update');\n    }, 1000);\n    return searchColumnSelector(column ?? '');\n  }\n\n  private resetField(): void {\n    this.field.value = undefined;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n        width: 100%;\n      }\n      .material-symbols-outlined {\n        font-size: 16px !important;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 106
                    }
                }
            }
        },
        {
            "name": "TwTableSettingsDialogComponent",
            "id": "component-TwTableSettingsDialogComponent-0eeb33dae33e017fbfa649558cee0f0921eb4978637e263dcb5f5dba1ec0d9a8e2eabe494d04690da76979dc11b52f30211624540dee4045c46a8102c1e8a93c",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-settings-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-settings-dialog",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<adk-settings-icon (click)=\"openDialog()\"> </adk-settings-icon>\n<tw-dialog [isOpen]=\"isDialogOpen\" (close)=\"closeDialog()\" class=\"bg-transparent shadow-none\">\n    <tw-card [isHeaderWrapped]=\"true\" [isFooterWrapped]=\"true\">\n        <tw-typography\n            variant=\"h3\"\n            color=\"blue-gray\"\n            class=\"adk-card-header\"\n            classStyle=\"antialiased tracking-normal font-sans text-2xl font-semibold leading-snug text-blue-gray-900 flex flex-row\"\n        >\n            Column Preferences\n            <div class=\"grow\"></div>\n            <adk-icon-button (click)=\"closeDialog()\"></adk-icon-button>\n        </tw-typography>\n        <div class=\"adk-card-body\">\n            <form [formGroup]=\"formGroup\">\n                @if (visibleColumnField) {\n                <tw-typography class=\"adk-card-subtitle mb-3 font-normal\" variant=\"paragraph\" color=\"gray\">\n                    Customize the columns visibility.\n                </tw-typography>\n                <adk-fields [fieldConfig]=\"[visibleColumnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                } @if (columnField) {\n                <tw-typography class=\"mt-4 font-normal\" variant=\"paragraph\" color=\"gray\">\n                    Select the column to filter a search value\n                </tw-typography>\n                <adk-fields class=\"mt-4\" [fieldConfig]=\"[columnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                } @if (groupByField) {\n                <adk-fields class=\"mt-4\" [fieldConfig]=\"[groupByField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                }\n            </form>\n        </div>\n        <div class=\"adk-card-footer\">\n            <adk-button\n                class=\"w-full\"\n                (click)=\"closeDialog()\"\n                customClasses=\"align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg bg-blue-500 text-white shadow-md shadow-blue-500/20 hover:shadow-lg hover:shadow-blue-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none block w-full\"\n            >\n                Close Preferences\n            </adk-button>\n        </div>\n    </tw-card>\n</tw-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "triggerUpdate",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "columnField",
                    "defaultValue": "preferenceColumnSelector(this.tdss.get('headers'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "groupByField",
                    "defaultValue": "preferenceGroupBySelector(this.tdss.get('headers'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "isDialogOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "visibleColumnField",
                    "defaultValue": "preferenceVisibilitySelector(this.tdss.get('headers'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUpdatedGroupBy",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUpdatedPreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "SettingsIconComponent",
                    "type": "component"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "IconButtonComponent",
                    "type": "component"
                },
                {
                    "name": "DialogComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FieldsComponent",
                    "type": "component"
                },
                {
                    "name": "FieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AdkFormGroup, FieldsComponent } from '../../../tw-form-ui';\nimport { AfterViewInit, Component, EventEmitter, OnInit, Output, inject } from '@angular/core';\nimport { SettingsIconComponent, preferenceColumnSelector, preferenceGroupBySelector, preferenceVisibilitySelector } from './utils';\n\nimport { ButtonComponent } from '../button.component';\nimport { CommonModule } from '@angular/common';\nimport { DialogComponent } from '../dialog/dialog.component';\nimport { FieldComponent } from '../../../tw-form-ui/components/field.component';\nimport { IconButtonComponent } from './utils/icon-button.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TableDataSourceService } from './table-datasource.service';\nimport { TwCardComponent } from '../card/tw-card.component';\nimport { TwTypographyComponent } from '../typography.component';\nimport { distinctUntilChanged } from 'rxjs';\n\n@Component({\n    selector: 'tw-table-settings-dialog',\n    standalone: true,\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        SettingsIconComponent,\n        TwCardComponent,\n        TwTypographyComponent,\n        IconButtonComponent,\n        DialogComponent,\n        ButtonComponent,\n        FieldsComponent,\n        FieldComponent,\n    ],\n    hostDirectives: [AdkFormGroup],\n    template: `\n        <adk-settings-icon (click)=\"openDialog()\"> </adk-settings-icon>\n        <tw-dialog [isOpen]=\"isDialogOpen\" (close)=\"closeDialog()\" class=\"bg-transparent shadow-none\">\n            <tw-card [isHeaderWrapped]=\"true\" [isFooterWrapped]=\"true\">\n                <tw-typography\n                    variant=\"h3\"\n                    color=\"blue-gray\"\n                    class=\"adk-card-header\"\n                    classStyle=\"antialiased tracking-normal font-sans text-2xl font-semibold leading-snug text-blue-gray-900 flex flex-row\"\n                >\n                    Column Preferences\n                    <div class=\"grow\"></div>\n                    <adk-icon-button (click)=\"closeDialog()\"></adk-icon-button>\n                </tw-typography>\n                <div class=\"adk-card-body\">\n                    <form [formGroup]=\"formGroup\">\n                        @if (visibleColumnField) {\n                        <tw-typography class=\"adk-card-subtitle mb-3 font-normal\" variant=\"paragraph\" color=\"gray\">\n                            Customize the columns visibility.\n                        </tw-typography>\n                        <adk-fields [fieldConfig]=\"[visibleColumnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                        } @if (columnField) {\n                        <tw-typography class=\"mt-4 font-normal\" variant=\"paragraph\" color=\"gray\">\n                            Select the column to filter a search value\n                        </tw-typography>\n                        <adk-fields class=\"mt-4\" [fieldConfig]=\"[columnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                        } @if (groupByField) {\n                        <adk-fields class=\"mt-4\" [fieldConfig]=\"[groupByField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                        }\n                    </form>\n                </div>\n                <div class=\"adk-card-footer\">\n                    <adk-button\n                        class=\"w-full\"\n                        (click)=\"closeDialog()\"\n                        customClasses=\"align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg bg-blue-500 text-white shadow-md shadow-blue-500/20 hover:shadow-lg hover:shadow-blue-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none block w-full\"\n                    >\n                        Close Preferences\n                    </adk-button>\n                </div>\n            </tw-card>\n        </tw-dialog>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TwTableSettingsDialogComponent implements OnInit, AfterViewInit {\n    @Output() triggerUpdate = new EventEmitter<boolean>();\n    #formGroup = inject(AdkFormGroup, { self: true });\n    isDialogOpen = false;\n    tdss = inject(TableDataSourceService);\n    visibleColumnField = preferenceVisibilitySelector(this.tdss.get('headers'));\n    columnField = preferenceColumnSelector(this.tdss.get('headers'));\n    groupByField = preferenceGroupBySelector(this.tdss.get('headers'));\n\n    get formGroup() {\n        return this.#formGroup.formGroup();\n    }\n\n    ngAfterViewInit(): void {\n        this.#formGroup.setFormGroup([this.visibleColumnField, this.columnField, this.groupByField]);\n        let previousValue = this.formGroup.value;\n        const headers = this.tdss.get('headers');\n\n        this.formGroup.valueChanges.pipe(distinctUntilChanged()).subscribe((currentValue) => {\n            let selectedVisibleColumns: string[] = [];\n            let action = { visibleColumns: selectedVisibleColumns, groupBy: currentValue['groupBy'] };\n\n            // Check if any relevant value has changed\n            let hasChanged = false;\n\n            if (previousValue['groupBy'] !== currentValue['groupBy']) {\n                hasChanged = true;\n            }\n\n            if (previousValue['column'] !== currentValue['column']) {\n                hasChanged = true;\n            }\n\n            headers.forEach((element) => {\n                if (previousValue[element] !== currentValue[element]) {\n                    hasChanged = true;\n                }\n            });\n\n            if (!hasChanged) {\n                return;\n            }\n\n            // Update previous value\n            previousValue = { ...currentValue };\n\n            // Process the changes\n            headers.forEach((element) => {\n                if (currentValue[element]) selectedVisibleColumns.push(element);\n            });\n\n            action.visibleColumns = selectedVisibleColumns;\n            action.groupBy = currentValue['groupBy'] === 'none' ? '' : currentValue['groupBy'];\n            this.tdss.setPreferences(action);\n            this.tdss.setFilter({ column: currentValue['column'], value: '' });\n            this.triggerUpdate.emit(true);\n        });\n    }\n\n    ngOnInit(): void {\n        this.visibleColumnField = preferenceVisibilitySelector(this.tdss.get('headers'));\n        this.columnField = preferenceColumnSelector(this.tdss.get('headers'));\n        this.groupByField = preferenceGroupBySelector(this.tdss.get('headers'));\n    }\n\n    openDialog() {\n        this.isDialogOpen = true;\n    }\n\n    closeDialog() {\n        this.isDialogOpen = false;\n        this.triggerUpdate.emit(this.isDialogOpen);\n    }\n\n    getUpdatedPreferences(): string[] {\n        return ['column1', 'column2'];\n    }\n\n    getUpdatedGroupBy(): string {\n        return 'column1';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                }
            }
        },
        {
            "name": "TwTableSettingsDialogComponent",
            "id": "component-TwTableSettingsDialogComponent-9d8507bc7ab3cb76e3d6665181274d9b48c7950ae6b6b0693d4a5f17613f00bf3c43054fd140503defa889f8dc962c40ee6ee0da19b26b0f12741aecd97a64f8-1",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-settings-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-settings-dialog",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<adk-settings-icon (click)=\"openDialog()\"> </adk-settings-icon>\n<tw-dialog [isOpen]=\"isDialogOpen\" (close)=\"closeDialog()\" class=\"bg-transparent shadow-none\">\n    <tw-card [isHeaderWrapped]=\"true\" [isFooterWrapped]=\"true\">\n        <tw-typography\n            variant=\"h3\"\n            color=\"blue-gray\"\n            class=\"adk-card-header\"\n            classStyle=\"antialiased tracking-normal font-sans text-2xl font-semibold leading-snug text-blue-gray-900 flex flex-row\"\n        >\n            Column Preferences\n            <div class=\"grow\"></div>\n            <adk-icon-button (click)=\"closeDialog()\"></adk-icon-button>\n        </tw-typography>\n        <div class=\"adk-card-body\">\n            <form [formGroup]=\"formGroup\">\n                @if (visibleColumnField) {\n                <tw-typography class=\"adk-card-subtitle mb-3 font-normal\" variant=\"paragraph\" color=\"gray\">\n                    Customize the columns visibility.\n                </tw-typography>\n                <adk-fields [fieldConfig]=\"[visibleColumnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                } @if (columnField) {\n                <tw-typography class=\"mt-4 font-normal\" variant=\"paragraph\" color=\"gray\">\n                    Select the column to filter a search value\n                </tw-typography>\n                <adk-fields class=\"mt-4\" [fieldConfig]=\"[columnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                } @if (groupByField) {\n                <adk-fields class=\"mt-4\" [fieldConfig]=\"[groupByField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                }\n            </form>\n        </div>\n        <div class=\"adk-card-footer\">\n            <adk-button\n                class=\"w-full\"\n                (click)=\"closeDialog()\"\n                customClasses=\"align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg bg-blue-500 text-white shadow-md shadow-blue-500/20 hover:shadow-lg hover:shadow-blue-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none block w-full\"\n            >\n                Close Preferences\n            </adk-button>\n        </div>\n    </tw-card>\n</tw-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "settingsCriteria",
                    "defaultValue": "new EventEmitter<SettingCriteria>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "columnField",
                    "defaultValue": "preferenceColumnSelector(this.headers)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "groupByField",
                    "defaultValue": "preferenceGroupBySelector(this.headers)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "isDialogOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "visibleColumnField",
                    "defaultValue": "preferenceVisibilitySelector(this.headers)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUpdatedGroupBy",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUpdatedPreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "SettingsIconComponent",
                    "type": "component"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "IconButtonComponent",
                    "type": "component"
                },
                {
                    "name": "DialogComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FieldsComponent",
                    "type": "component"
                },
                {
                    "name": "FieldComponent",
                    "type": "component"
                },
                {
                    "name": "AdkTablePreferences"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\nimport { FilterCriteria, PreferenceCriteria, SettingCriteria } from '../models/table.interface';\nimport { preferenceColumnSelector, preferenceGroupBySelector, preferenceVisibilitySelector } from './fields.controls';\n\nimport { AdkFormGroup } from 'projects/ng-lib/src/lib/directives';\nimport { AdkTablePreferences } from '../directives/preferences';\nimport { ButtonComponent } from '../../button.component';\nimport { CommonModule } from '@angular/common';\nimport { DialogComponent } from '../../dialog/dialog.component';\nimport { FieldComponent } from 'projects/ng-lib/src/lib/tw-form-ui/components/field.component';\nimport { FieldsComponent } from 'projects/ng-lib/src/lib/tw-form-ui';\nimport { IconButtonComponent } from '../utils/icon-button.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SettingsIconComponent } from '../utils/settings-icon.component';\nimport { TwCardComponent } from '../../card/tw-card.component';\nimport { TwTypographyComponent } from '../../typography.component';\n\n@Component({\n    selector: 'tw-table-settings-dialog',\n    standalone: true,\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        SettingsIconComponent,\n        TwCardComponent,\n        TwTypographyComponent,\n        IconButtonComponent,\n        DialogComponent,\n        ButtonComponent,\n        FieldsComponent,\n        FieldComponent,\n        AdkTablePreferences,\n    ],\n    hostDirectives: [AdkFormGroup],\n    template: `\n        <adk-settings-icon (click)=\"openDialog()\"> </adk-settings-icon>\n        <tw-dialog [isOpen]=\"isDialogOpen\" (close)=\"closeDialog()\" class=\"bg-transparent shadow-none\">\n            <tw-card [isHeaderWrapped]=\"true\" [isFooterWrapped]=\"true\">\n                <tw-typography\n                    variant=\"h3\"\n                    color=\"blue-gray\"\n                    class=\"adk-card-header\"\n                    classStyle=\"antialiased tracking-normal font-sans text-2xl font-semibold leading-snug text-blue-gray-900 flex flex-row\"\n                >\n                    Column Preferences\n                    <div class=\"grow\"></div>\n                    <adk-icon-button (click)=\"closeDialog()\"></adk-icon-button>\n                </tw-typography>\n                <div class=\"adk-card-body\">\n                    <form [formGroup]=\"formGroup\">\n                        @if (visibleColumnField) {\n                        <tw-typography class=\"adk-card-subtitle mb-3 font-normal\" variant=\"paragraph\" color=\"gray\">\n                            Customize the columns visibility.\n                        </tw-typography>\n                        <adk-fields [fieldConfig]=\"[visibleColumnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                        } @if (columnField) {\n                        <tw-typography class=\"mt-4 font-normal\" variant=\"paragraph\" color=\"gray\">\n                            Select the column to filter a search value\n                        </tw-typography>\n                        <adk-fields class=\"mt-4\" [fieldConfig]=\"[columnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                        } @if (groupByField) {\n                        <adk-fields class=\"mt-4\" [fieldConfig]=\"[groupByField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n                        }\n                    </form>\n                </div>\n                <div class=\"adk-card-footer\">\n                    <adk-button\n                        class=\"w-full\"\n                        (click)=\"closeDialog()\"\n                        customClasses=\"align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg bg-blue-500 text-white shadow-md shadow-blue-500/20 hover:shadow-lg hover:shadow-blue-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none block w-full\"\n                    >\n                        Close Preferences\n                    </adk-button>\n                </div>\n            </tw-card>\n        </tw-dialog>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TwTableSettingsDialogComponent implements OnInit, AfterViewInit {\n    @Input() headers: string[] = [];\n    @Output() settingsCriteria = new EventEmitter<SettingCriteria>();\n    #formGroup = inject(AdkFormGroup, { self: true });\n    isDialogOpen = false;\n    visibleColumnField = preferenceVisibilitySelector(this.headers);\n    columnField = preferenceColumnSelector(this.headers);\n    groupByField = preferenceGroupBySelector(this.headers);\n\n    get formGroup() {\n        return this.#formGroup.formGroup();\n    }\n\n    ngAfterViewInit(): void {\n        this.#formGroup.setFormGroup([this.visibleColumnField, this.columnField, this.groupByField]);\n        let previousValue = this.formGroup.value;\n        const headers = this.headers;\n        this.formGroup.valueChanges.subscribe((currentValue) => {\n            let selectedVisibleColumns: string[] = [];\n            let action = {\n                visibleColumns: selectedVisibleColumns,\n                groupByColumn: currentValue['groupByColumn'],\n                column: currentValue['column'],\n            };\n            // Check if any relevant value has changed\n            let hasChanged = false;\n            if (previousValue['groupByColumn'] !== currentValue['groupByColumn']) {\n                hasChanged = true;\n            }\n            if (previousValue['column'] !== currentValue['column']) {\n                hasChanged = true;\n            }\n            headers.forEach((element) => {\n                if (previousValue[element] !== currentValue[element]) {\n                    hasChanged = true;\n                }\n            });\n            if (!hasChanged) {\n                return;\n            }\n            // Update previous value\n            previousValue = { ...currentValue };\n            // Process the changes\n            headers.forEach((element) => {\n                if (currentValue[element]) selectedVisibleColumns.push(element);\n            });\n            action.visibleColumns = selectedVisibleColumns;\n            action.groupByColumn = currentValue['groupByColumn'] === 'none' ? '' : currentValue['groupByColumn'];\n            action.column = currentValue['column'];\n            this.settingsCriteria.emit(action);\n        });\n    }\n\n    ngOnInit(): void {\n        this.visibleColumnField = preferenceVisibilitySelector(this.headers);\n        this.columnField = preferenceColumnSelector(this.headers);\n        this.groupByField = preferenceGroupBySelector(this.headers);\n    }\n\n    openDialog() {\n        this.isDialogOpen = true;\n    }\n\n    closeDialog() {\n        this.isDialogOpen = false;\n    }\n\n    getUpdatedPreferences(): string[] {\n        return ['column1', 'column2'];\n    }\n\n    getUpdatedGroupBy(): string {\n        return 'column1';\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 96
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TwTableSettingsDialogComponent-1"
        },
        {
            "name": "TwTypographyComponent",
            "id": "component-TwTypographyComponent-544092dedb3bf055e57e90b0db4f754f2e3f868afdd9c40652731278fa964a42eef09502aa2eae2f81f58126f7333c568addb5da5f1be1f7b59cc75e257c598d",
            "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-typography",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "<p [ngClass]=\"[variantClass, colorClass, classStyle, 'block', 'antialiased', 'font-sans']\" style=\"white-space: nowrap;\">\n    <ng-content></ng-content>\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'blue-gray-900'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Color | string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'paragraph'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\ntype Variant = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'lead' | 'paragraph' | 'small';\ntype Color =\n    | 'inherit'\n    | 'current'\n    | 'black'\n    | 'white'\n    | 'blue-gray'\n    | 'gray'\n    | 'brown'\n    | 'deep-orange'\n    | 'orange'\n    | 'amber'\n    | 'yellow'\n    | 'lime'\n    | 'light-green'\n    | 'green'\n    | 'teal'\n    | 'cyan'\n    | 'light-blue'\n    | 'blue'\n    | 'indigo'\n    | 'deep-purple'\n    | 'purple'\n    | 'pink'\n    | 'red';\n\n@Component({\n    selector: 'tw-typography',\n    standalone: true,\n    imports: [CommonModule],\n    template: `\n        <p [ngClass]=\"[variantClass, colorClass, classStyle, 'block', 'antialiased', 'font-sans']\" style=\"white-space: nowrap;\">\n            <ng-content></ng-content>\n        </p>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class TwTypographyComponent implements OnChanges {\n    @Input() variant: Variant = 'paragraph';\n    @Input() color: Color | string = 'blue-gray-900';\n    @Input() classStyle = '';\n\n    get variantClass(): string {\n        switch (this.variant) {\n            case 'h1':\n                return 'text-4xl';\n            case 'h2':\n                return 'text-3xl';\n            case 'h3':\n                return 'text-2xl';\n            case 'h4':\n                return 'text-xl';\n            case 'h5':\n                return 'text-lg';\n            case 'h6':\n                return 'text-base';\n            case 'lead':\n                return 'text-lg leading-relaxed';\n            case 'paragraph':\n                return 'text-base';\n            case 'small':\n                return 'text-sm';\n            default:\n                return 'text-base';\n        }\n    }\n\n    get colorClass(): string {\n        return `text-${this.color}`;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['variant']) this.variant = changes['variant'].currentValue;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "variantClass": {
                    "name": "variantClass",
                    "getSignature": {
                        "name": "variantClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 53
                    }
                },
                "colorClass": {
                    "name": "colorClass",
                    "getSignature": {
                        "name": "colorClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 78
                    }
                }
            }
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "addCustomStylesheet",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,1,0';\n    document.head.appendChild(link);\n}"
            },
            {
                "name": "BottomPlacement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        tooltipText: 'Tooltip at the bottom',\n        buttonText: 'Hover me',\n        tooltipPlacement: 'bottom',\n        rippleLight: true,\n    },\n}"
            },
            {
                "name": "ButtonActionsTesting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const button = canvasElement.querySelector('adk-button');\n        if (button) {\n            await userEvent.click(button);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n}"
            },
            {
                "name": "CardActionsTesting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const card = canvasElement.querySelector('adk-card');\n        if (card) {\n            await userEvent.click(card);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n}"
            },
            {
                "name": "cellSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(index: string | number, params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('custom-select', 'cell', index, '', '', {\n        isMultipleTag: true,\n        options: [...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
            },
            {
                "name": "cellSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(index: string | number, params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('custom-select', 'cell', index, '', '', {\n        isMultipleTag: true,\n        options: [...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    InputComponent,\n    CheckboxComponent,\n    RadioComponent,\n    TextareaComponent,\n    PasswordComponent,\n    SelectComponent,\n    MultiSelectComponent,\n    SelectComponent,\n    EmailComponent,\n]"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n    stories: [\n        '../src/**/*.mdx',\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\n        '../projects/ng-lib/src/**/*.mdx',\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\n    ],\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\n    framework: {\n        name: '@storybook/angular',\n        options: {},\n    },\n    docs: {\n        autodocs: 'tag',\n    },\n}"
            },
            {
                "name": "customViewport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    large: {\n        name: 'Large Screen',\n        styles: {\n            width: '1920px',\n            height: '1080px',\n        },\n    },\n    small: {\n        name: 'Small Screen',\n        styles: {\n            width: '800px',\n            height: '963px',\n        },\n    },\n}"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'danger',\n    },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        tooltipText: 'This is a tooltip',\n        buttonText: 'Hover me',\n        tooltipPlacement: 'top',\n        rippleLight: true,\n    },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        headers: ['name', 'job', 'date'],\n        rows: mockData,\n        isSelectable: false,\n        hasFields: false,\n        isSortable: true,\n        isDraggable: false,\n        isSearchable: true,\n        title: 'Table Card',\n        subtitle: 'This is a table card',\n        buttons: [\n            {\n                label: 'View ALL',\n                onClick: action('View All clicked'),\n                color: 'primary',\n                icon: '',\n            },\n            { label: 'add member', onClick: action('Add Member clicked'), color: 'primary', icon: 'person_add' },\n        ],\n        selectedRowsChange: action('selectedRowsChange') as any,\n    },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n}"
            },
            {
                "name": "Draggable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        ...Default.args,\n        isDraggable: true,\n    },\n}"
            },
            {
                "name": "EmptyTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: [],\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n}"
            },
            {
                "name": "Grouped",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        ...Default.args,\n        groupBy: 'job',\n    },\n}"
            },
            {
                "name": "GroupedByDepartment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const select = canvas.querySelector('select');\n            if (select) {\n                select.value = 'department';\n                select.dispatchEvent(new Event('change'));\n            }\n        }\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/input works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/multi-select works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "imports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    CommonModule,\n    ReactiveFormsModule,\n    AdkSelection,\n    AdkTooltipDirective,\n    AdkExpansionPanelComponent,\n    AsyncPipe,\n    TableHeaderComponent,\n    TwTypographyComponent,\n    TwCardComponent,\n    CheckboxComponent,\n    SortableIconComponent,\n    FieldsComponent,\n    AdkTable,\n    FormsModule,\n    ButtonComponent,\n    TwTableSettingsDialogComponent,\n]"
            },
            {
                "name": "isEqual",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(obj1, obj2) => {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LeftPlacement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        tooltipText: 'Tooltip on the left',\n        buttonText: 'Hover me',\n        tooltipPlacement: 'left',\n        rippleLight: true,\n    },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<>",
                "defaultValue": "{\n    component: DragDropExampleComponent,\n    title: '(TW) Angular UI / Directives / Draggable Table',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldListDirective>",
                "defaultValue": "{\n    component: FieldListDirective,\n    title: '(TW) Angular UI / Directives / Form / Field List',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldDirectiveComponent>",
                "defaultValue": "{\n    component: FieldDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Form / Field',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HttpClientDirectiveComponent>",
                "defaultValue": "{\n    component: HttpClientDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Http Client',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ListDirectiveComponent>",
                "defaultValue": "{\n    component: ListDirectiveComponent,\n    title: '(TW) Angular UI / Directives / List',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PaginationDirectiveComponent>",
                "defaultValue": "{\n    component: PaginationDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Pagination',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TableExampleComponent>",
                "defaultValue": "{\n    component: TableExampleComponent,\n    title: '(TW) Angular UI / Directives / Selection',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SortableTableExampleComponent>",
                "defaultValue": "{\n    component: SortableTableExampleComponent,\n    title: '(TW) Angular UI / Directives / Sortable Table',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldComponent>",
                "defaultValue": "{\n    component: FieldComponent,\n    title: '(TW) Angular UI / Components / Form / Field',\n    args: {\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\n    },\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldsComponent>",
                "defaultValue": "{\n    component: FieldsComponent,\n    title: '(TW) Angular UI / Components / Form / Fields',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonWrapperComponent>",
                "defaultValue": "{\n    component: ButtonWrapperComponent,\n    title: '(TW) Angular UI / Components / Button',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardWrapperComponent>",
                "defaultValue": "{\n    component: CardWrapperComponent,\n    title: '(TW) Angular UI / Components / Card',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PillWrapperComponent>",
                "defaultValue": "{\n    component: PillWrapperComponent,\n    title: '(TW) Angular UI / Components / Pill',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SidebarComponent>",
                "defaultValue": "{\n    component: SidebarComponent,\n    title: '(TW) Angular UI / Components / Sidebar',\n    decorators: [\n        // Add any decorators you need (e.g., withModules)\n    ],\n    parameters: {\n        // Add any global parameters here\n    },\n    argTypes: {\n        // Add argTypes as needed\n    },\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TooltipButtonComponent>",
                "defaultValue": "{\n    title: '(TW) Angular UI / Components / Tooltip Button',\n    component: TooltipButtonComponent,\n    decorators: [],\n    argTypes: {\n        tooltipText: { control: 'text' },\n        buttonText: { control: 'text' },\n        tooltipPlacement: {\n            control: {\n                type: 'select',\n                options: ['top', 'bottom', 'left', 'right'],\n            },\n        },\n        rippleLight: { control: 'boolean' },\n    },\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CheckboxComponent>",
                "defaultValue": "{\n    component: CheckboxComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Checkbox',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<EmailComponent>",
                "defaultValue": "{\n    component: EmailComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Email',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\n    component: InputComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Text',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MultiSelectComponent>",
                "defaultValue": "{\n    component: MultiSelectComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Select',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PasswordComponent>",
                "defaultValue": "{\n    component: PasswordComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Password',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<RadioComponent>",
                "defaultValue": "{\n    component: RadioComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Radio',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SelectComponent>",
                "defaultValue": "{\n    component: SelectComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Basic Select',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TextareaComponent>",
                "defaultValue": "{\n    component: TextareaComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Textarea',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwTableCardComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Table Card',\n    component: TwTableCardComponent,\n    tags: ['autodocs'],\n    decorators: [withActions],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwDefaultTableComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Default Table',\n    component: TwDefaultTableComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwDefaultTableComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TableComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Table',\n    component: TableComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TableComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    argTypes: {\n        isSelectable: {\n            control: 'boolean',\n        },\n        isSortable: {\n            control: 'boolean',\n        },\n        isDraggable: {\n            control: 'boolean',\n        },\n        isWrapped: {\n            control: 'boolean',\n        },\n        isSearchable: {\n            control: 'boolean',\n        },\n        isActionButton: {\n            control: 'boolean',\n        },\n        data: {\n            control: 'object',\n        },\n        columns: {\n            control: 'array',\n        },\n        tableHeader: {\n            control: 'object',\n        },\n    },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TableWrapperComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Table Wrapper',\n    component: TableWrapperComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TableWrapperComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DummyTableComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Components/Directives/AdkTable',\n    component: DummyTableComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [DummyTableComponent],\n        }),\n    ],\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "mockData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        name: 'John Michael',\n        job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n        date: '23/04/10',\n    },\n    {\n        name: 'Alexa Johnson',\n        job: 'CEO',\n        date: '23/04/02',\n    },\n    {\n        name: 'Sierra Brooks',\n        job: 'Designer',\n        date: '23/04/05',\n    },\n    {\n        name: 'Thomas Smith',\n        job: 'Developer',\n        date: '23/04/05',\n    },\n    {\n        name: 'Jenna Kian',\n        job: 'Marketing',\n        date: '23/04/18',\n    },\n    {\n        name: 'Denzel Washington',\n        job: 'Actor',\n        date: '23/04/05',\n    },\n    {\n        name: 'Morgan Freeman',\n        job: 'Actor',\n        date: '23/04/05',\n    },\n    {\n        name: 'Array Testing',\n        job: ['CEO', 'Manager', 'Designer'],\n        date: '23/04/05',\n    },\n]"
            },
            {
                "name": "mockData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        name: 'John Michael',\n        job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n        date: '23/04/10',\n    },\n    {\n        name: 'Alexa Johnson',\n        job: 'CEO',\n        date: '23/04/02',\n    },\n    {\n        name: 'Sierra Brooks',\n        job: 'Designer',\n        date: '23/04/05',\n    },\n    {\n        name: 'Thomas Smith',\n        job: 'Developer',\n        date: '23/04/05',\n    },\n    {\n        name: 'Jenna Kian',\n        job: 'Marketing',\n        date: '23/04/18',\n    },\n    {\n        name: 'Denzel Washington',\n        job: 'Actor',\n        date: '23/04/05',\n    },\n    {\n        name: 'Morgan Freeman',\n        job: 'Actor',\n        date: '23/04/05',\n    },\n]"
            },
            {
                "name": "MultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('custom-select', 'multi-select', 'name', 'Name', 'Name', {\n            isMultipleTag: true,\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "paginationSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "FieldBuilder.createField('select', 'itemsPerPage', '5', 'Items Per Page', 'Items Per Page', {\n    labelClass: '',\n    options: [\n        {\n            value: '5',\n            label: '5',\n            id: '1',\n        },\n        {\n            value: '10',\n            label: '10',\n            id: '2',\n        },\n        {\n            value: '25',\n            label: '25',\n            id: '3',\n        },\n    ],\n})"
            },
            {
                "name": "paginationSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "FieldBuilder.createField('select', 'itemsPerPage', '5', 'Items Per Page', 'Items Per Page', {\n    labelClass: '',\n    options: [\n        {\n            value: '5',\n            label: '5',\n            id: '1',\n        },\n        {\n            value: '10',\n            label: '10',\n            id: '2',\n        },\n        {\n            value: '25',\n            label: '25',\n            id: '3',\n        },\n    ],\n})"
            },
            {
                "name": "preferenceColumnSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'column', params[0], 'Column', '', {\n        options: [...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
            },
            {
                "name": "preferenceColumnSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'column', params[0], 'Column', '', {\n        options: [...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
            },
            {
                "name": "preferenceGroupBySelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'groupByColumn', 'none', 'Group By', '', {\n        options: [{ id: '0', value: 'none', label: 'None' }, ...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
            },
            {
                "name": "preferenceGroupBySelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'groupBy', 'none', 'Group By', '', {\n        options: [{ id: '0', value: 'none', label: 'None' }, ...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
            },
            {
                "name": "preferenceVisibilitySelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: true,\n            label: titleCase(param),\n        };\n    });\n\n    const headerCheckboxGroup: Field = FieldBuilder.createField('checkbox', 'visibleColumns', params, 'visibleColumns', 'Visible Columns', {\n        labelClass: '',\n        required: false,\n        options: mapVisibleColumnsOptions,\n    });\n\n    return headerCheckboxGroup;\n}"
            },
            {
                "name": "preferenceVisibilitySelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: true,\n            label: titleCase(param),\n        };\n    });\n\n    const headerCheckboxGroup: Field = FieldBuilder.createField('checkbox', 'visibleColumns', params, 'visibleColumns', 'Visible Columns', {\n        labelClass: '',\n        required: false,\n        options: mapVisibleColumnsOptions,\n    });\n\n    return headerCheckboxGroup;\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n    parameters: {\n        viewport: { viewport: customViewport },\n        actions: { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/,\n            },\n        },\n    },\n    decorators: [\n        withThemeByDataAttribute({\n            themes: {\n                light: 'light',\n                dark: 'dark',\n            },\n            defaultTheme: 'light',\n            attributeName: 'data-mode',\n        }),\n        applicationConfig({\n            providers: [provideAnimations()],\n        }),\n    ],\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        fieldConfig: [\n            FieldBuilder.createField('text', 'firstName', '', 'First Name', 'Enter first name', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('text', 'lastName', '', 'Last Name', 'Enter last name', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('password', 'password', '', 'Password', 'Enter password', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('textarea', 'about', '', 'About', 'Enter about', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createOptionsField(\n                'checkbox',\n                'checkbox',\n                'Checkbox',\n                'checkbox place holder',\n                [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                        description: 'Option one description',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                        description: 'Option two description',\n                    },\n                ],\n                {\n                    required: true,\n                }\n            ),\n            FieldBuilder.createField('radio', 'radio', '', 'radio', 'radio', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                ],\n            }),\n            FieldBuilder.createField('select', 'select', '', 'Select', 'Select', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                    {\n                        value: 'optionThree',\n                        label: 'Option Three',\n                        id: '3',\n                    },\n                ],\n            }),\n            FieldBuilder.createField('select', 'multi-select', '', 'Multi Select', 'Multi Select', {\n                isMultipleTag: true,\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                    {\n                        value: 'optionThree',\n                        label: 'Option Three',\n                        id: '3',\n                    },\n                ],\n            }),\n        ],\n        wrapperClass: 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4',\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'primary',\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args: any) => ({\n    component: SidebarComponent,\n    props: {\n        ...args,\n        title: 'Sidebar',\n        navigation: [\n            { link: 'home', icon: 'home', text: 'Home' },\n            { link: 'about', icon: 'info', text: 'About' },\n            { link: 'contact', icon: 'mail', text: 'Contact' },\n        ],\n    },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('checkbox', 'checkbox', 'checkbox', 'checkbox', 'checkbox', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('email', 'email', 'Email', 'Email', 'Email', { required: true }, '', [Validators.email]),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('password', 'password', 'password', 'password', 'password', {\n            required: true,\n        }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('radio', 'radio', 'radio', 'radio', 'radio', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'select', 'select', 'select', 'select', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('textarea', 'textarea', 'textarea', 'textarea', 'textarea'),\n    },\n}"
            },
            {
                "name": "RightPlacement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        tooltipText: 'Tooltip on the right',\n        buttonText: 'Hover me',\n        tooltipPlacement: 'right',\n        rippleLight: true,\n    },\n}"
            },
            {
                "name": "sampleData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    { uid: 1, name: 'John Doe', age: 30, department: 'IT' },\n    { uid: 2, name: 'Jane Smith', age: 25, department: 'HR' },\n    { uid: 3, name: 'Bob Johnson', age: 35, department: 'IT' },\n    { uid: 4, name: 'Alice Brown', age: 28, department: 'Finance' },\n    { uid: 5, name: 'Charlie Davis', age: 42, department: 'HR' },\n    { uid: 6, name: 'Eva Wilson', age: 33, department: 'Finance' },\n    { uid: 7, name: 'Frank Miller', age: 39, department: 'IT' },\n]"
            },
            {
                "name": "searchColumnSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(param) =>\n    FieldBuilder.createField('text', 'searchColumn', '', `Search by ${titleCase(param)}`, ``, {\n        labelClass: '',\n        required: false,\n    })"
            },
            {
                "name": "searchColumnSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(param) =>\n    FieldBuilder.createField('text', 'searchColumn', '', `Search by ${titleCase(param)}`, ``, {\n        labelClass: '',\n        required: false,\n    })"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'secondary',\n    },\n}"
            },
            {
                "name": "Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'select', 'name', 'Name', 'Name', {\n            isMultipleTag: false,\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "Selectable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        ...Default.args,\n        isSelectable: true,\n        hasFields: true,\n    },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'success',\n    },\n}"
            },
            {
                "name": "TableWithAllSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        isSelectable: true,\n        isSortable: true,\n        headers: ['name', 'job', 'date'],\n        actionColName: ' ',\n        isDraggable: true,\n        rows: [\n            {\n                name: 'John Michael',\n                job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n                date: '23/04/10',\n            },\n            {\n                name: 'Alexa Johnson',\n                job: 'CEO',\n                date: '23/04/02',\n            },\n            {\n                name: 'Sierra Brooks',\n                job: 'Designer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Thomas Smith',\n                job: 'Developer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Jenna Kian',\n                job: 'Marketing',\n                date: '23/04/18',\n            },\n            {\n                name: 'Denzel Washington',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n            {\n                name: 'Morgan Freeman',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n        ],\n    },\n}"
            },
            {
                "name": "TableWithAllSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        isSelectable: true,\n        isSortable: true,\n        isDraggable: true,\n        isWrapped: false,\n        isSearchable: true,\n        isActionButton: true,\n        actionButtons: [\n            {\n                icon: 'visibility',\n                label: 'View',\n                color: 'primary',\n                onClick: action('View clicked'),\n            },\n            {\n                icon: 'edit',\n                label: 'Edit',\n                color: 'primary',\n                onClick: action('Edit clicked'),\n            },\n            {\n                icon: 'delete',\n                label: 'Delete',\n                color: 'danger',\n                onClick: action('Delete clicked'),\n            },\n        ],\n        data: [\n            {\n                name: 'John Michael',\n                job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n                date: '23/04/10',\n            },\n            {\n                name: 'Alexa Johnson',\n                job: 'CEO',\n                date: '23/04/02',\n            },\n            {\n                name: 'Sierra Brooks',\n                job: 'Designer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Thomas Smith',\n                job: 'Developer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Jenna Kian',\n                job: 'Marketing',\n                date: '23/04/18',\n            },\n            {\n                name: 'Denzel Washington',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n            {\n                name: 'Morgan Freeman',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n        ],\n        columns: ['name', 'job', 'date'],\n    },\n}"
            },
            {
                "name": "TableWithAllSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: mockData,\n        isSelectable: true,\n        isSortable: true,\n        isDraggable: true,\n        tableHeader: {\n            title: 'Table Header',\n            subtitle: 'Table Subtitle',\n            isSearchable: true,\n            buttons: [\n                {\n                    label: 'View ALL',\n                    onClick: action('View All clicked'),\n                    color: 'primary',\n                    icon: '',\n                },\n                { label: 'add member', onClick: action('Add Member clicked'), color: 'primary', icon: 'person_add' },\n            ],\n        },\n    },\n}"
            },
            {
                "name": "TableWithAllSettingsAndWrapped",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        isSelectable: true,\n        isSortable: true,\n        isDraggable: true,\n        isWrapped: true,\n        isSearchable: true,\n        isActionButton: true,\n        actionButtons: [\n            {\n                icon: 'visibility',\n                label: 'View',\n                color: 'primary',\n                onClick: action('View clicked'),\n            },\n            {\n                icon: 'edit',\n                label: 'Edit',\n                color: 'primary',\n                onClick: action('Edit clicked'),\n            },\n            {\n                icon: 'delete',\n                label: 'Delete',\n                color: 'danger',\n                onClick: action('Delete clicked'),\n            },\n        ],\n        data: [\n            {\n                name: 'John Michael',\n                job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n                date: '23/04/10',\n            },\n            {\n                name: 'Alexa Johnson',\n                job: 'CEO',\n                date: '23/04/02',\n            },\n            {\n                name: 'Sierra Brooks',\n                job: 'Designer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Thomas Smith',\n                job: 'Developer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Jenna Kian',\n                job: 'Marketing',\n                date: '23/04/18',\n            },\n            {\n                name: 'Denzel Washington',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n            {\n                name: 'Morgan Freeman',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n        ],\n        columns: ['name', 'job', 'date'],\n        tableHeader: {\n            title: 'Table Header',\n            subtitle: 'Table Subtitle',\n            isSearchable: true,\n            buttons: [\n                {\n                    label: 'View ALL',\n                    onClick: action('View All clicked'),\n                    color: 'primary',\n                    icon: '',\n                },\n                { label: 'add member', onClick: action('Add Member clicked'), color: 'primary', icon: 'person_add' },\n            ],\n        },\n    },\n}"
            },
            {
                "name": "titleCase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(param: string) => new TitleCasePipe().transform(param)"
            },
            {
                "name": "titleCase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(param: string) => new TitleCasePipe().transform(param)"
            },
            {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'warn',\n    },\n}"
            },
            {
                "name": "WithActionColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        ...Default.args,\n        actionColName: 'Actions',\n        actionButton: 'Edit',\n    },\n}"
            },
            {
                "name": "WithActiveLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args: any) => ({\n    component: SidebarComponent,\n    props: {\n        ...args,\n        title: 'Sidebar',\n        navigation: [\n            { link: 'home', icon: 'home', text: 'Home' },\n            { link: 'about', icon: 'info', text: 'About' },\n            { link: 'contact', icon: 'mail', text: 'Contact' },\n        ],\n    },\n})"
            },
            {
                "name": "WithDragAndDrop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const headers = canvas.querySelectorAll('th');\n            if (headers.length > 2) {\n                const dragEvent = new DragEvent('dragstart', {\n                    bubbles: true,\n                    cancelable: true,\n                });\n                headers[1].dispatchEvent(dragEvent);\n\n                const dropEvent = new DragEvent('drop', {\n                    bubbles: true,\n                    cancelable: true,\n                });\n                headers[3].dispatchEvent(dropEvent);\n            }\n        }\n    },\n}"
            },
            {
                "name": "WithFiltering",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n}"
            },
            {
                "name": "WithPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: Array(50)\n            .fill(null)\n            .map((_, i) => ({\n                id: i + 1,\n                name: `Person ${i + 1}`,\n                age: 20 + (i % 30),\n                department: ['IT', 'HR', 'Finance'][i % 3],\n            })),\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n}"
            },
            {
                "name": "WithSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const checkboxes = canvas.querySelectorAll('input[type=\"checkbox\"]');\n            if (checkboxes.length > 1) {\n                (checkboxes[1] as HTMLInputElement).click();\n                (checkboxes[2] as HTMLInputElement).click();\n            }\n        }\n    },\n}"
            },
            {
                "name": "WithSorting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const ageHeader = canvas.querySelector('th:nth-child(3)');\n            if (ageHeader) {\n                // @ts-ignore\n                ageHeader.click();\n            }\n        }\n    },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AttributeEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Color",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"inherit\" | \"current\" | \"black\" | \"white\" | \"blue-gray\" | \"gray\" | \"brown\" | \"deep-orange\" | \"orange\" | \"amber\" | \"yellow\" | \"lime\" | \"light-green\" | \"green\" | \"teal\" | \"cyan\" | \"light-blue\" | \"blue\" | \"indigo\" | \"deep-purple\" | \"purple\" | \"pink\" | \"red\"",
                "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Field",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "FieldOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "FieldProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "FieldSteps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "ID",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | number",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Identifiable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "RowData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<>",
                "file": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldListDirective>",
                "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HttpClientDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ListDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PaginationDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TableExampleComponent>",
                "file": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SortableTableExampleComponent>",
                "file": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldsComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PillWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SidebarComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TooltipButtonComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CheckboxComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<EmailComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MultiSelectComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PasswordComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<RadioComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SelectComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextareaComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwTableCardComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwDefaultTableComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TableComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TableWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DummyTableComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Table",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "TABLE_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "TableProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"checkbox\" | \"email\" | \"custom-display\" | \"file\" | \"text\" | \"insight-text\" | \"int\" | \"custom-select\" | \"password\" | \"radio\" | \"slider\" | \"stepper\" | \"select\" | \"textarea\"",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "VALUE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | string[] | boolean | null",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Variant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"lead\" | \"paragraph\" | \"small\"",
                "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            ".storybook/preview.ts": [
                {
                    "name": "addCustomStylesheet",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,1,0';\n    document.head.appendChild(link);\n}"
                },
                {
                    "name": "customViewport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    large: {\n        name: 'Large Screen',\n        styles: {\n            width: '1920px',\n            height: '1080px',\n        },\n    },\n    small: {\n        name: 'Small Screen',\n        styles: {\n            width: '800px',\n            height: '963px',\n        },\n    },\n}"
                },
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n    parameters: {\n        viewport: { viewport: customViewport },\n        actions: { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/,\n            },\n        },\n    },\n    decorators: [\n        withThemeByDataAttribute({\n            themes: {\n                light: 'light',\n                dark: 'dark',\n            },\n            defaultTheme: 'light',\n            attributeName: 'data-mode',\n        }),\n        applicationConfig({\n            providers: [provideAnimations()],\n        }),\n    ],\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts": [
                {
                    "name": "BottomPlacement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        tooltipText: 'Tooltip at the bottom',\n        buttonText: 'Hover me',\n        tooltipPlacement: 'bottom',\n        rippleLight: true,\n    },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        tooltipText: 'This is a tooltip',\n        buttonText: 'Hover me',\n        tooltipPlacement: 'top',\n        rippleLight: true,\n    },\n}"
                },
                {
                    "name": "LeftPlacement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        tooltipText: 'Tooltip on the left',\n        buttonText: 'Hover me',\n        tooltipPlacement: 'left',\n        rippleLight: true,\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TooltipButtonComponent>",
                    "defaultValue": "{\n    title: '(TW) Angular UI / Components / Tooltip Button',\n    component: TooltipButtonComponent,\n    decorators: [],\n    argTypes: {\n        tooltipText: { control: 'text' },\n        buttonText: { control: 'text' },\n        tooltipPlacement: {\n            control: {\n                type: 'select',\n                options: ['top', 'bottom', 'left', 'right'],\n            },\n        },\n        rippleLight: { control: 'boolean' },\n    },\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "RightPlacement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        tooltipText: 'Tooltip on the right',\n        buttonText: 'Hover me',\n        tooltipPlacement: 'right',\n        rippleLight: true,\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts": [
                {
                    "name": "ButtonActionsTesting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const button = canvasElement.querySelector('adk-button');\n        if (button) {\n            await userEvent.click(button);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n}"
                },
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'danger',\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonWrapperComponent>",
                    "defaultValue": "{\n    component: ButtonWrapperComponent,\n    title: '(TW) Angular UI / Components / Button',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'primary',\n    },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'secondary',\n    },\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'success',\n    },\n}"
                },
                {
                    "name": "Warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'warn',\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts": [
                {
                    "name": "CardActionsTesting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const card = canvasElement.querySelector('adk-card');\n        if (card) {\n            await userEvent.click(card);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardWrapperComponent>",
                    "defaultValue": "{\n    component: CardWrapperComponent,\n    title: '(TW) Angular UI / Components / Card',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts": [
                {
                    "name": "cellSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(index: string | number, params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('custom-select', 'cell', index, '', '', {\n        isMultipleTag: true,\n        options: [...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
                },
                {
                    "name": "paginationSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "FieldBuilder.createField('select', 'itemsPerPage', '5', 'Items Per Page', 'Items Per Page', {\n    labelClass: '',\n    options: [\n        {\n            value: '5',\n            label: '5',\n            id: '1',\n        },\n        {\n            value: '10',\n            label: '10',\n            id: '2',\n        },\n        {\n            value: '25',\n            label: '25',\n            id: '3',\n        },\n    ],\n})"
                },
                {
                    "name": "preferenceColumnSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'column', params[0], 'Column', '', {\n        options: [...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
                },
                {
                    "name": "preferenceGroupBySelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'groupByColumn', 'none', 'Group By', '', {\n        options: [{ id: '0', value: 'none', label: 'None' }, ...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
                },
                {
                    "name": "preferenceVisibilitySelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: true,\n            label: titleCase(param),\n        };\n    });\n\n    const headerCheckboxGroup: Field = FieldBuilder.createField('checkbox', 'visibleColumns', params, 'visibleColumns', 'Visible Columns', {\n        labelClass: '',\n        required: false,\n        options: mapVisibleColumnsOptions,\n    });\n\n    return headerCheckboxGroup;\n}"
                },
                {
                    "name": "searchColumnSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(param) =>\n    FieldBuilder.createField('text', 'searchColumn', '', `Search by ${titleCase(param)}`, ``, {\n        labelClass: '',\n        required: false,\n    })"
                },
                {
                    "name": "titleCase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(param: string) => new TitleCasePipe().transform(param)"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts": [
                {
                    "name": "cellSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(index: string | number, params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('custom-select', 'cell', index, '', '', {\n        isMultipleTag: true,\n        options: [...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
                },
                {
                    "name": "paginationSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "FieldBuilder.createField('select', 'itemsPerPage', '5', 'Items Per Page', 'Items Per Page', {\n    labelClass: '',\n    options: [\n        {\n            value: '5',\n            label: '5',\n            id: '1',\n        },\n        {\n            value: '10',\n            label: '10',\n            id: '2',\n        },\n        {\n            value: '25',\n            label: '25',\n            id: '3',\n        },\n    ],\n})"
                },
                {
                    "name": "preferenceColumnSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'column', params[0], 'Column', '', {\n        options: [...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
                },
                {
                    "name": "preferenceGroupBySelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: param,\n            label: titleCase(param),\n        };\n    });\n\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'groupBy', 'none', 'Group By', '', {\n        options: [{ id: '0', value: 'none', label: 'None' }, ...mapVisibleColumnsOptions],\n    });\n\n    return {\n        ...columnSearchColumn,\n    };\n}"
                },
                {
                    "name": "preferenceVisibilitySelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\n        return {\n            id: param,\n            value: true,\n            label: titleCase(param),\n        };\n    });\n\n    const headerCheckboxGroup: Field = FieldBuilder.createField('checkbox', 'visibleColumns', params, 'visibleColumns', 'Visible Columns', {\n        labelClass: '',\n        required: false,\n        options: mapVisibleColumnsOptions,\n    });\n\n    return headerCheckboxGroup;\n}"
                },
                {
                    "name": "searchColumnSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(param) =>\n    FieldBuilder.createField('text', 'searchColumn', '', `Search by ${titleCase(param)}`, ``, {\n        labelClass: '',\n        required: false,\n    })"
                },
                {
                    "name": "titleCase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(param: string) => new TitleCasePipe().transform(param)"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    InputComponent,\n    CheckboxComponent,\n    RadioComponent,\n    TextareaComponent,\n    PasswordComponent,\n    SelectComponent,\n    MultiSelectComponent,\n    SelectComponent,\n    EmailComponent,\n]"
                }
            ],
            ".storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n    stories: [\n        '../src/**/*.mdx',\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\n        '../projects/ng-lib/src/**/*.mdx',\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\n    ],\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\n    framework: {\n        name: '@storybook/angular',\n        options: {},\n    },\n    docs: {\n        autodocs: 'tag',\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        headers: ['name', 'job', 'date'],\n        rows: mockData,\n        isSelectable: false,\n        hasFields: false,\n        isSortable: true,\n        isDraggable: false,\n        isSearchable: true,\n        title: 'Table Card',\n        subtitle: 'This is a table card',\n        buttons: [\n            {\n                label: 'View ALL',\n                onClick: action('View All clicked'),\n                color: 'primary',\n                icon: '',\n            },\n            { label: 'add member', onClick: action('Add Member clicked'), color: 'primary', icon: 'person_add' },\n        ],\n        selectedRowsChange: action('selectedRowsChange') as any,\n    },\n}"
                },
                {
                    "name": "Draggable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        ...Default.args,\n        isDraggable: true,\n    },\n}"
                },
                {
                    "name": "Grouped",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        ...Default.args,\n        groupBy: 'job',\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwTableCardComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Table Card',\n    component: TwTableCardComponent,\n    tags: ['autodocs'],\n    decorators: [withActions],\n}"
                },
                {
                    "name": "mockData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        name: 'John Michael',\n        job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n        date: '23/04/10',\n    },\n    {\n        name: 'Alexa Johnson',\n        job: 'CEO',\n        date: '23/04/02',\n    },\n    {\n        name: 'Sierra Brooks',\n        job: 'Designer',\n        date: '23/04/05',\n    },\n    {\n        name: 'Thomas Smith',\n        job: 'Developer',\n        date: '23/04/05',\n    },\n    {\n        name: 'Jenna Kian',\n        job: 'Marketing',\n        date: '23/04/18',\n    },\n    {\n        name: 'Denzel Washington',\n        job: 'Actor',\n        date: '23/04/05',\n    },\n    {\n        name: 'Morgan Freeman',\n        job: 'Actor',\n        date: '23/04/05',\n    },\n    {\n        name: 'Array Testing',\n        job: ['CEO', 'Manager', 'Designer'],\n        date: '23/04/05',\n    },\n]"
                },
                {
                    "name": "Selectable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        ...Default.args,\n        isSelectable: true,\n        hasFields: true,\n    },\n}"
                },
                {
                    "name": "WithActionColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        ...Default.args,\n        actionColName: 'Actions',\n        actionButton: 'Edit',\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n}"
                },
                {
                    "name": "EmptyTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: [],\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n}"
                },
                {
                    "name": "GroupedByDepartment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const select = canvas.querySelector('select');\n            if (select) {\n                select.value = 'department';\n                select.dispatchEvent(new Event('change'));\n            }\n        }\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DummyTableComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Components/Directives/AdkTable',\n    component: DummyTableComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [DummyTableComponent],\n        }),\n    ],\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "sampleData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    { uid: 1, name: 'John Doe', age: 30, department: 'IT' },\n    { uid: 2, name: 'Jane Smith', age: 25, department: 'HR' },\n    { uid: 3, name: 'Bob Johnson', age: 35, department: 'IT' },\n    { uid: 4, name: 'Alice Brown', age: 28, department: 'Finance' },\n    { uid: 5, name: 'Charlie Davis', age: 42, department: 'HR' },\n    { uid: 6, name: 'Eva Wilson', age: 33, department: 'Finance' },\n    { uid: 7, name: 'Frank Miller', age: 39, department: 'IT' },\n]"
                },
                {
                    "name": "WithDragAndDrop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const headers = canvas.querySelectorAll('th');\n            if (headers.length > 2) {\n                const dragEvent = new DragEvent('dragstart', {\n                    bubbles: true,\n                    cancelable: true,\n                });\n                headers[1].dispatchEvent(dragEvent);\n\n                const dropEvent = new DragEvent('drop', {\n                    bubbles: true,\n                    cancelable: true,\n                });\n                headers[3].dispatchEvent(dropEvent);\n            }\n        }\n    },\n}"
                },
                {
                    "name": "WithFiltering",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n}"
                },
                {
                    "name": "WithPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: Array(50)\n            .fill(null)\n            .map((_, i) => ({\n                id: i + 1,\n                name: `Person ${i + 1}`,\n                age: 20 + (i % 30),\n                department: ['IT', 'HR', 'Finance'][i % 3],\n            })),\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n}"
                },
                {
                    "name": "WithSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const checkboxes = canvas.querySelectorAll('input[type=\"checkbox\"]');\n            if (checkboxes.length > 1) {\n                (checkboxes[1] as HTMLInputElement).click();\n                (checkboxes[2] as HTMLInputElement).click();\n            }\n        }\n    },\n}"
                },
                {
                    "name": "WithSorting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: sampleData,\n        columns: ['uid', 'name', 'age', 'department'],\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = canvasElement.querySelector('app-dummy-table');\n        if (canvas) {\n            const ageHeader = canvas.querySelector('th:nth-child(3)');\n            if (ageHeader) {\n                // @ts-ignore\n                ageHeader.click();\n            }\n        }\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldListDirective>",
                    "defaultValue": "{\n    component: FieldListDirective,\n    title: '(TW) Angular UI / Directives / Form / Field List',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldDirectiveComponent>",
                    "defaultValue": "{\n    component: FieldDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Form / Field',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HttpClientDirectiveComponent>",
                    "defaultValue": "{\n    component: HttpClientDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Http Client',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ListDirectiveComponent>",
                    "defaultValue": "{\n    component: ListDirectiveComponent,\n    title: '(TW) Angular UI / Directives / List',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PaginationDirectiveComponent>",
                    "defaultValue": "{\n    component: PaginationDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Pagination',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/input works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\n    component: InputComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Text',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/multi-select works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MultiSelectComponent>",
                    "defaultValue": "{\n    component: MultiSelectComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Select',\n}"
                },
                {
                    "name": "MultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('custom-select', 'multi-select', 'name', 'Name', 'Name', {\n            isMultipleTag: true,\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                },
                {
                    "name": "Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'select', 'name', 'Name', 'Name', {\n            isMultipleTag: false,\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/new/table.component.ts": [
                {
                    "name": "imports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    CommonModule,\n    ReactiveFormsModule,\n    AdkSelection,\n    AdkTooltipDirective,\n    AdkExpansionPanelComponent,\n    AsyncPipe,\n    TableHeaderComponent,\n    TwTypographyComponent,\n    TwCardComponent,\n    CheckboxComponent,\n    SortableIconComponent,\n    FieldsComponent,\n    AdkTable,\n    FormsModule,\n    ButtonComponent,\n    TwTableSettingsDialogComponent,\n]"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts": [
                {
                    "name": "isEqual",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(obj1, obj2) => {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<>",
                    "defaultValue": "{\n    component: DragDropExampleComponent,\n    title: '(TW) Angular UI / Directives / Draggable Table',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TableExampleComponent>",
                    "defaultValue": "{\n    component: TableExampleComponent,\n    title: '(TW) Angular UI / Directives / Selection',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SortableTableExampleComponent>",
                    "defaultValue": "{\n    component: SortableTableExampleComponent,\n    title: '(TW) Angular UI / Directives / Sortable Table',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldComponent>",
                    "defaultValue": "{\n    component: FieldComponent,\n    title: '(TW) Angular UI / Components / Form / Field',\n    args: {\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\n    },\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldsComponent>",
                    "defaultValue": "{\n    component: FieldsComponent,\n    title: '(TW) Angular UI / Components / Form / Fields',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        fieldConfig: [\n            FieldBuilder.createField('text', 'firstName', '', 'First Name', 'Enter first name', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('text', 'lastName', '', 'Last Name', 'Enter last name', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('password', 'password', '', 'Password', 'Enter password', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('textarea', 'about', '', 'About', 'Enter about', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createOptionsField(\n                'checkbox',\n                'checkbox',\n                'Checkbox',\n                'checkbox place holder',\n                [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                        description: 'Option one description',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                        description: 'Option two description',\n                    },\n                ],\n                {\n                    required: true,\n                }\n            ),\n            FieldBuilder.createField('radio', 'radio', '', 'radio', 'radio', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                ],\n            }),\n            FieldBuilder.createField('select', 'select', '', 'Select', 'Select', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                    {\n                        value: 'optionThree',\n                        label: 'Option Three',\n                        id: '3',\n                    },\n                ],\n            }),\n            FieldBuilder.createField('select', 'multi-select', '', 'Multi Select', 'Multi Select', {\n                isMultipleTag: true,\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                    {\n                        value: 'optionThree',\n                        label: 'Option Three',\n                        id: '3',\n                    },\n                ],\n            }),\n        ],\n        wrapperClass: 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4',\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PillWrapperComponent>",
                    "defaultValue": "{\n    component: PillWrapperComponent,\n    title: '(TW) Angular UI / Components / Pill',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SidebarComponent>",
                    "defaultValue": "{\n    component: SidebarComponent,\n    title: '(TW) Angular UI / Components / Sidebar',\n    decorators: [\n        // Add any decorators you need (e.g., withModules)\n    ],\n    parameters: {\n        // Add any global parameters here\n    },\n    argTypes: {\n        // Add argTypes as needed\n    },\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args: any) => ({\n    component: SidebarComponent,\n    props: {\n        ...args,\n        title: 'Sidebar',\n        navigation: [\n            { link: 'home', icon: 'home', text: 'Home' },\n            { link: 'about', icon: 'info', text: 'About' },\n            { link: 'contact', icon: 'mail', text: 'Contact' },\n        ],\n    },\n})"
                },
                {
                    "name": "WithActiveLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args: any) => ({\n    component: SidebarComponent,\n    props: {\n        ...args,\n        title: 'Sidebar',\n        navigation: [\n            { link: 'home', icon: 'home', text: 'Home' },\n            { link: 'about', icon: 'info', text: 'About' },\n            { link: 'contact', icon: 'mail', text: 'Contact' },\n        ],\n    },\n})"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CheckboxComponent>",
                    "defaultValue": "{\n    component: CheckboxComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Checkbox',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('checkbox', 'checkbox', 'checkbox', 'checkbox', 'checkbox', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<EmailComponent>",
                    "defaultValue": "{\n    component: EmailComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Email',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('email', 'email', 'Email', 'Email', 'Email', { required: true }, '', [Validators.email]),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PasswordComponent>",
                    "defaultValue": "{\n    component: PasswordComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Password',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('password', 'password', 'password', 'password', 'password', {\n            required: true,\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<RadioComponent>",
                    "defaultValue": "{\n    component: RadioComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Radio',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('radio', 'radio', 'radio', 'radio', 'radio', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SelectComponent>",
                    "defaultValue": "{\n    component: SelectComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Basic Select',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'select', 'select', 'select', 'select', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TextareaComponent>",
                    "defaultValue": "{\n    component: TextareaComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Textarea',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('textarea', 'textarea', 'textarea', 'textarea', 'textarea'),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwDefaultTableComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Default Table',\n    component: TwDefaultTableComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwDefaultTableComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
                },
                {
                    "name": "TableWithAllSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        isSelectable: true,\n        isSortable: true,\n        headers: ['name', 'job', 'date'],\n        actionColName: ' ',\n        isDraggable: true,\n        rows: [\n            {\n                name: 'John Michael',\n                job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n                date: '23/04/10',\n            },\n            {\n                name: 'Alexa Johnson',\n                job: 'CEO',\n                date: '23/04/02',\n            },\n            {\n                name: 'Sierra Brooks',\n                job: 'Designer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Thomas Smith',\n                job: 'Developer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Jenna Kian',\n                job: 'Marketing',\n                date: '23/04/18',\n            },\n            {\n                name: 'Denzel Washington',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n            {\n                name: 'Morgan Freeman',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n        ],\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TableComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Table',\n    component: TableComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TableComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    argTypes: {\n        isSelectable: {\n            control: 'boolean',\n        },\n        isSortable: {\n            control: 'boolean',\n        },\n        isDraggable: {\n            control: 'boolean',\n        },\n        isWrapped: {\n            control: 'boolean',\n        },\n        isSearchable: {\n            control: 'boolean',\n        },\n        isActionButton: {\n            control: 'boolean',\n        },\n        data: {\n            control: 'object',\n        },\n        columns: {\n            control: 'array',\n        },\n        tableHeader: {\n            control: 'object',\n        },\n    },\n}"
                },
                {
                    "name": "TableWithAllSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        isSelectable: true,\n        isSortable: true,\n        isDraggable: true,\n        isWrapped: false,\n        isSearchable: true,\n        isActionButton: true,\n        actionButtons: [\n            {\n                icon: 'visibility',\n                label: 'View',\n                color: 'primary',\n                onClick: action('View clicked'),\n            },\n            {\n                icon: 'edit',\n                label: 'Edit',\n                color: 'primary',\n                onClick: action('Edit clicked'),\n            },\n            {\n                icon: 'delete',\n                label: 'Delete',\n                color: 'danger',\n                onClick: action('Delete clicked'),\n            },\n        ],\n        data: [\n            {\n                name: 'John Michael',\n                job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n                date: '23/04/10',\n            },\n            {\n                name: 'Alexa Johnson',\n                job: 'CEO',\n                date: '23/04/02',\n            },\n            {\n                name: 'Sierra Brooks',\n                job: 'Designer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Thomas Smith',\n                job: 'Developer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Jenna Kian',\n                job: 'Marketing',\n                date: '23/04/18',\n            },\n            {\n                name: 'Denzel Washington',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n            {\n                name: 'Morgan Freeman',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n        ],\n        columns: ['name', 'job', 'date'],\n    },\n}"
                },
                {
                    "name": "TableWithAllSettingsAndWrapped",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        isSelectable: true,\n        isSortable: true,\n        isDraggable: true,\n        isWrapped: true,\n        isSearchable: true,\n        isActionButton: true,\n        actionButtons: [\n            {\n                icon: 'visibility',\n                label: 'View',\n                color: 'primary',\n                onClick: action('View clicked'),\n            },\n            {\n                icon: 'edit',\n                label: 'Edit',\n                color: 'primary',\n                onClick: action('Edit clicked'),\n            },\n            {\n                icon: 'delete',\n                label: 'Delete',\n                color: 'danger',\n                onClick: action('Delete clicked'),\n            },\n        ],\n        data: [\n            {\n                name: 'John Michael',\n                job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n                date: '23/04/10',\n            },\n            {\n                name: 'Alexa Johnson',\n                job: 'CEO',\n                date: '23/04/02',\n            },\n            {\n                name: 'Sierra Brooks',\n                job: 'Designer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Thomas Smith',\n                job: 'Developer',\n                date: '23/04/05',\n            },\n            {\n                name: 'Jenna Kian',\n                job: 'Marketing',\n                date: '23/04/18',\n            },\n            {\n                name: 'Denzel Washington',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n            {\n                name: 'Morgan Freeman',\n                job: 'Actor',\n                date: '23/04/05',\n            },\n        ],\n        columns: ['name', 'job', 'date'],\n        tableHeader: {\n            title: 'Table Header',\n            subtitle: 'Table Subtitle',\n            isSearchable: true,\n            buttons: [\n                {\n                    label: 'View ALL',\n                    onClick: action('View All clicked'),\n                    color: 'primary',\n                    icon: '',\n                },\n                { label: 'add member', onClick: action('Add Member clicked'), color: 'primary', icon: 'person_add' },\n            ],\n        },\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TableWrapperComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Table Wrapper',\n    component: TableWrapperComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TableWrapperComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
                },
                {
                    "name": "mockData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        name: 'John Michael',\n        job: 'Manager So I started to walk into the water. I wont lie to you, I was terrified. But I pressed on, and as I made my way past the breakers, the water became calmer and calmer.',\n        date: '23/04/10',\n    },\n    {\n        name: 'Alexa Johnson',\n        job: 'CEO',\n        date: '23/04/02',\n    },\n    {\n        name: 'Sierra Brooks',\n        job: 'Designer',\n        date: '23/04/05',\n    },\n    {\n        name: 'Thomas Smith',\n        job: 'Developer',\n        date: '23/04/05',\n    },\n    {\n        name: 'Jenna Kian',\n        job: 'Marketing',\n        date: '23/04/18',\n    },\n    {\n        name: 'Denzel Washington',\n        job: 'Actor',\n        date: '23/04/05',\n    },\n    {\n        name: 'Morgan Freeman',\n        job: 'Actor',\n        date: '23/04/05',\n    },\n]"
                },
                {
                    "name": "TableWithAllSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        data: mockData,\n        isSelectable: true,\n        isSortable: true,\n        isDraggable: true,\n        tableHeader: {\n            title: 'Table Header',\n            subtitle: 'Table Subtitle',\n            isSearchable: true,\n            buttons: [\n                {\n                    label: 'View ALL',\n                    onClick: action('View All clicked'),\n                    color: 'primary',\n                    icon: '',\n                },\n                { label: 'add member', onClick: action('Add Member clicked'), color: 'primary', icon: 'person_add' },\n            ],\n        },\n    },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ng-lib/src/lib/tw-form-ui/models/field.ts": [
                {
                    "name": "AttributeEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Field",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "FieldOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "FieldProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "FieldSteps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts": [
                {
                    "name": "Color",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"inherit\" | \"current\" | \"black\" | \"white\" | \"blue-gray\" | \"gray\" | \"brown\" | \"deep-orange\" | \"orange\" | \"amber\" | \"yellow\" | \"lime\" | \"light-green\" | \"green\" | \"teal\" | \"cyan\" | \"light-blue\" | \"blue\" | \"indigo\" | \"deep-purple\" | \"purple\" | \"pink\" | \"red\"",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Variant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"lead\" | \"paragraph\" | \"small\"",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts": [
                {
                    "name": "ID",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | number",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Identifiable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TABLE_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"checkbox\" | \"email\" | \"custom-display\" | \"file\" | \"text\" | \"insight-text\" | \"int\" | \"custom-select\" | \"password\" | \"radio\" | \"slider\" | \"stepper\" | \"select\" | \"textarea\"",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | string[] | boolean | null",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/models/table.ts": [
                {
                    "name": "RowData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "Table",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "TableProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<>",
                    "file": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldListDirective>",
                    "file": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HttpClientDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ListDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PaginationDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TableExampleComponent>",
                    "file": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SortableTableExampleComponent>",
                    "file": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldsComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PillWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SidebarComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TooltipButtonComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CheckboxComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<EmailComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MultiSelectComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PasswordComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<RadioComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SelectComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextareaComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwTableCardComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwDefaultTableComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TableComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TableWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DummyTableComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addCustomStylesheet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/data-source.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDatasource",
                "coveragePercent": 64,
                "coverageCount": "9/14",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/drag.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDraggableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/drop.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDroppableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/field-list.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFieldList",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/field.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFields",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/form-group.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFormGroup",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/http-client.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkHttpClient",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/list.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkList",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/pagination.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkPagination",
                "coveragePercent": 44,
                "coverageCount": "4/9",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/selection.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkSelection",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/sorting.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkSorting",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/sorting.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortableItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stepper.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkStepperDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragDropExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "HttpClientDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/selection.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortableTableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/stories/sorting.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/directives/tooltip.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkTooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/data-source.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDatasource",
                "coveragePercent": 64,
                "coverageCount": "9/14",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/fields.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/email.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FieldBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/card/tw-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/expansion-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdkExpansionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/pill.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonActionsTesting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CardActionsTesting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActiveLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomPlacement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftPlacement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/tooltip-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightPlacement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/preferences.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkTablePreferences",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DummyTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GroupedByDepartment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithDragAndDrop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithFiltering",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithSelection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/stories/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithSorting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/directives/table.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkTable",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/pagination.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterCriteria",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaginationCriteria",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PreferenceCriteria",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingCriteria",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortCriteria",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableDataSourceState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableState",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cellSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceColumnSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceGroupBySelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceVisibilitySelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "searchColumnSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titleCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/table-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/table-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TableWithAllSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TableWithAllSettingsAndWrapped",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-settings-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableSettingsDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/new/tw-table-wrapper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TableWithAllSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Draggable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Grouped",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Selectable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActionColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TableWithAllSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/table-datasource.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableDataSourceService",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-settings-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableSettingsDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwDefaultTableComponent",
                "coveragePercent": 5,
                "coverageCount": "2/40",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/draggable.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DraggableUtil",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cellSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceColumnSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceGroupBySelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceVisibilitySelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "searchColumnSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titleCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isEqual",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/pagination.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaginationUtil",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/settings-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sort-rows.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortRowsUtil",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sortable-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortableIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/tooltip-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/utils/imperative-observable.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ImperativeObservable",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}