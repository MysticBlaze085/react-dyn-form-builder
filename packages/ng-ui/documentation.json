{
    "pipes": [],
    "interfaces": [
        {
            "name": "FieldItem",
            "id": "interface-FieldItem-2241e79843b1a3b2563787900a60b82ab7a5765f93fb3e61d45d1a83b1364fb53f05c1d04dd595eece9519f8f73b6ac020b3712f41b8e1417501ddfc2777b1f0",
            "file": "projects/ng-lib/src/lib/tw-ui/modules/types/base.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl, ValidatorFn, Validators } from '@angular/forms';\n\nimport { Component } from '@angular/core';\nimport { TitleCasePipe } from '@angular/common';\n\nexport interface OptionItem {\n    label: string;\n    value: string;\n}\n\nexport interface FieldItem {\n    description?: string;\n    id: string;\n    name: string;\n    placeholder: string;\n    hint?: string;\n    value?: string;\n    options?: OptionItem[];\n    ariaInvalid?: boolean;\n    errorMessage?: string;\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\n@Component({\n    selector: 'tw-base',\n    template: ``,\n})\nexport class BaseComponent {\n    formControls: { [key: string]: FormControl } = {};\n\n    getId(item: FieldItem): string {\n        return item.id;\n    }\n\n    getName(item: FieldItem): string {\n        return item.name;\n    }\n\n    getPlaceholder(item: FieldItem): string {\n        return item.placeholder ?? new TitleCasePipe().transform(item.name);\n    }\n\n    getValue(item: FieldItem): string {\n        return item.value ?? '';\n    }\n\n    getOptions(item: FieldItem): OptionItem[] {\n        return item.options ?? [];\n    }\n\n    getAriaInvalid(item: FieldItem): boolean {\n        const control = this.formControls[item.name];\n        return control && control.invalid && (control.dirty || control.touched);\n    }\n\n    getErrorMessage(item: FieldItem): string {\n        const control = this.formControls[item.id];\n        if (control) {\n            if (control.errors?.['required']) {\n                return 'This field is required.';\n            } else if (control.errors?.['minlength']) {\n                return `Minimum length is ${control.errors['minlength'].requiredLength} characters.`;\n            } else if (control.errors?.['maxlength']) {\n                return `Maximum length is ${control.errors['maxlength'].requiredLength} characters.`;\n            } else if (control.errors?.['pattern']) {\n                return 'Invalid format.';\n            }\n        }\n        return item.errorMessage ?? '';\n    }\n\n    public getValidators(item: FieldItem) {\n        const validators: ValidatorFn[] = [];\n        if (item.required) validators.push(Validators.required);\n        if (item.minLength) validators.push(Validators.minLength(item.minLength));\n        if (item.maxLength) validators.push(Validators.maxLength(item.maxLength));\n        // Add pattern or other validators if needed\n        return validators;\n    }\n\n    getDescription(item: FieldItem): string {\n        return item?.description ?? '';\n    }\n\n    onBlur(name: string) {\n        const control = this.formControls[name];\n        if (control) {\n            control.markAsTouched();\n        }\n    }\n\n    onChange(name: string) {\n        const control = this.formControls[name];\n        if (control) {\n            control.updateValueAndValidity();\n        }\n    }\n\n    isError(item: FieldItem): boolean {\n        const control = this.formControls[item.name];\n        return control ? control.invalid && (control.dirty || control.touched) : false;\n    }\n}\n",
            "properties": [
                {
                    "name": "ariaInvalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OptionItem[]",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OptionItem",
            "id": "interface-OptionItem-2241e79843b1a3b2563787900a60b82ab7a5765f93fb3e61d45d1a83b1364fb53f05c1d04dd595eece9519f8f73b6ac020b3712f41b8e1417501ddfc2777b1f0",
            "file": "projects/ng-lib/src/lib/tw-ui/modules/types/base.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl, ValidatorFn, Validators } from '@angular/forms';\n\nimport { Component } from '@angular/core';\nimport { TitleCasePipe } from '@angular/common';\n\nexport interface OptionItem {\n    label: string;\n    value: string;\n}\n\nexport interface FieldItem {\n    description?: string;\n    id: string;\n    name: string;\n    placeholder: string;\n    hint?: string;\n    value?: string;\n    options?: OptionItem[];\n    ariaInvalid?: boolean;\n    errorMessage?: string;\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\n@Component({\n    selector: 'tw-base',\n    template: ``,\n})\nexport class BaseComponent {\n    formControls: { [key: string]: FormControl } = {};\n\n    getId(item: FieldItem): string {\n        return item.id;\n    }\n\n    getName(item: FieldItem): string {\n        return item.name;\n    }\n\n    getPlaceholder(item: FieldItem): string {\n        return item.placeholder ?? new TitleCasePipe().transform(item.name);\n    }\n\n    getValue(item: FieldItem): string {\n        return item.value ?? '';\n    }\n\n    getOptions(item: FieldItem): OptionItem[] {\n        return item.options ?? [];\n    }\n\n    getAriaInvalid(item: FieldItem): boolean {\n        const control = this.formControls[item.name];\n        return control && control.invalid && (control.dirty || control.touched);\n    }\n\n    getErrorMessage(item: FieldItem): string {\n        const control = this.formControls[item.id];\n        if (control) {\n            if (control.errors?.['required']) {\n                return 'This field is required.';\n            } else if (control.errors?.['minlength']) {\n                return `Minimum length is ${control.errors['minlength'].requiredLength} characters.`;\n            } else if (control.errors?.['maxlength']) {\n                return `Maximum length is ${control.errors['maxlength'].requiredLength} characters.`;\n            } else if (control.errors?.['pattern']) {\n                return 'Invalid format.';\n            }\n        }\n        return item.errorMessage ?? '';\n    }\n\n    public getValidators(item: FieldItem) {\n        const validators: ValidatorFn[] = [];\n        if (item.required) validators.push(Validators.required);\n        if (item.minLength) validators.push(Validators.minLength(item.minLength));\n        if (item.maxLength) validators.push(Validators.maxLength(item.maxLength));\n        // Add pattern or other validators if needed\n        return validators;\n    }\n\n    getDescription(item: FieldItem): string {\n        return item?.description ?? '';\n    }\n\n    onBlur(name: string) {\n        const control = this.formControls[name];\n        if (control) {\n            control.markAsTouched();\n        }\n    }\n\n    onChange(name: string) {\n        const control = this.formControls[name];\n        if (control) {\n            control.updateValueAndValidity();\n        }\n    }\n\n    isError(item: FieldItem): boolean {\n        const control = this.formControls[item.name];\n        return control ? control.invalid && (control.dirty || control.touched) : false;\n    }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "BaseComponent",
            "id": "component-BaseComponent-2241e79843b1a3b2563787900a60b82ab7a5765f93fb3e61d45d1a83b1364fb53f05c1d04dd595eece9519f8f73b6ac020b3712f41b8e1417501ddfc2777b1f0",
            "file": "projects/ng-lib/src/lib/tw-ui/modules/types/base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-base",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControls",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getAriaInvalid",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getId",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OptionItem[]",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPlaceholder",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormControl, ValidatorFn, Validators } from '@angular/forms';\n\nimport { Component } from '@angular/core';\nimport { TitleCasePipe } from '@angular/common';\n\nexport interface OptionItem {\n    label: string;\n    value: string;\n}\n\nexport interface FieldItem {\n    description?: string;\n    id: string;\n    name: string;\n    placeholder: string;\n    hint?: string;\n    value?: string;\n    options?: OptionItem[];\n    ariaInvalid?: boolean;\n    errorMessage?: string;\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\n@Component({\n    selector: 'tw-base',\n    template: ``,\n})\nexport class BaseComponent {\n    formControls: { [key: string]: FormControl } = {};\n\n    getId(item: FieldItem): string {\n        return item.id;\n    }\n\n    getName(item: FieldItem): string {\n        return item.name;\n    }\n\n    getPlaceholder(item: FieldItem): string {\n        return item.placeholder ?? new TitleCasePipe().transform(item.name);\n    }\n\n    getValue(item: FieldItem): string {\n        return item.value ?? '';\n    }\n\n    getOptions(item: FieldItem): OptionItem[] {\n        return item.options ?? [];\n    }\n\n    getAriaInvalid(item: FieldItem): boolean {\n        const control = this.formControls[item.name];\n        return control && control.invalid && (control.dirty || control.touched);\n    }\n\n    getErrorMessage(item: FieldItem): string {\n        const control = this.formControls[item.id];\n        if (control) {\n            if (control.errors?.['required']) {\n                return 'This field is required.';\n            } else if (control.errors?.['minlength']) {\n                return `Minimum length is ${control.errors['minlength'].requiredLength} characters.`;\n            } else if (control.errors?.['maxlength']) {\n                return `Maximum length is ${control.errors['maxlength'].requiredLength} characters.`;\n            } else if (control.errors?.['pattern']) {\n                return 'Invalid format.';\n            }\n        }\n        return item.errorMessage ?? '';\n    }\n\n    public getValidators(item: FieldItem) {\n        const validators: ValidatorFn[] = [];\n        if (item.required) validators.push(Validators.required);\n        if (item.minLength) validators.push(Validators.minLength(item.minLength));\n        if (item.maxLength) validators.push(Validators.maxLength(item.maxLength));\n        // Add pattern or other validators if needed\n        return validators;\n    }\n\n    getDescription(item: FieldItem): string {\n        return item?.description ?? '';\n    }\n\n    onBlur(name: string) {\n        const control = this.formControls[name];\n        if (control) {\n            control.markAsTouched();\n        }\n    }\n\n    onChange(name: string) {\n        const control = this.formControls[name];\n        if (control) {\n            control.updateValueAndValidity();\n        }\n    }\n\n    isError(item: FieldItem): boolean {\n        const control = this.formControls[item.name];\n        return control ? control.invalid && (control.dirty || control.touched) : false;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TwCheckboxComponent",
            "id": "component-TwCheckboxComponent-d1a1ddfbd32c6174cd10a9e5e0770ec58be0c24838ec7387df928b307bc2cfac81d03f51e8cfce520d65386f05f2ef56e1f57eb9c7c792d105ea9160b816634b",
            "file": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-checkbox",
            "styleUrls": [],
            "styles": [],
            "template": "@if (isArray(checkbox)) {\n<fieldset>\n    <legend class=\"sr-only\">Notifications</legend>\n    <div class=\"space-y-5\">\n        @for (cb of checkbox; track $index) {\n        <div class=\"relative flex items-start\">\n            <div class=\"flex h-6 items-center\">\n                <input\n                    [id]=\"getId(cb)\"\n                    [attr.describedby]=\"getId(cb) + '-description'\"\n                    [name]=\"getName(cb)\"\n                    type=\"checkbox\"\n                    class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                />\n            </div>\n            <div class=\"ml-3 text-sm leading-6\">\n                <label [for]=\"getId(cb)\" class=\"font-medium text-gray-900\">{{ getName(cb) }}</label>\n                <p [id]=\"getId(cb) + '-description'\" class=\"text-gray-500\">{{ getDescription(cb) }}</p>\n            </div>\n        </div>\n        }\n    </div>\n</fieldset>\n} @else {\n<div class=\"relative flex items-start\">\n    <div class=\"flex h-6 items-center\">\n        <input\n            [id]=\"getId(checkbox)\"\n            [attr.describedby]=\"getId(checkbox) + '-description'\"\n            [name]=\"getName(checkbox)\"\n            type=\"checkbox\"\n            class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n        />\n    </div>\n    <div class=\"ml-3 text-sm leading-6\">\n        <label [for]=\"getId(checkbox)\" class=\"font-medium text-gray-900\">{{ getName(checkbox) }}</label>\n        <p [id]=\"getId(checkbox) + '-description'\" class=\"text-gray-500\">{{ getDescription(checkbox) }}</p>\n    </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkbox",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "FieldItem | FieldItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControls",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "isArray",
                    "args": [
                        {
                            "name": "checkbox",
                            "type": "FieldItem | FieldItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FieldItem[]",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkbox",
                            "type": "FieldItem | FieldItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAriaInvalid",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getId",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OptionItem[]",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getPlaceholder",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\n\nimport { CommonModule } from '@angular/common';\nimport { BaseComponent, FieldItem } from './base.component';\n\n@Component({\n    standalone: true,\n    selector: 'tw-checkbox',\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        @if (isArray(checkbox)) {\n        <fieldset>\n            <legend class=\"sr-only\">Notifications</legend>\n            <div class=\"space-y-5\">\n                @for (cb of checkbox; track $index) {\n                <div class=\"relative flex items-start\">\n                    <div class=\"flex h-6 items-center\">\n                        <input\n                            [id]=\"getId(cb)\"\n                            [attr.describedby]=\"getId(cb) + '-description'\"\n                            [name]=\"getName(cb)\"\n                            type=\"checkbox\"\n                            class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                        />\n                    </div>\n                    <div class=\"ml-3 text-sm leading-6\">\n                        <label [for]=\"getId(cb)\" class=\"font-medium text-gray-900\">{{ getName(cb) }}</label>\n                        <p [id]=\"getId(cb) + '-description'\" class=\"text-gray-500\">{{ getDescription(cb) }}</p>\n                    </div>\n                </div>\n                }\n            </div>\n        </fieldset>\n        } @else {\n        <div class=\"relative flex items-start\">\n            <div class=\"flex h-6 items-center\">\n                <input\n                    [id]=\"getId(checkbox)\"\n                    [attr.describedby]=\"getId(checkbox) + '-description'\"\n                    [name]=\"getName(checkbox)\"\n                    type=\"checkbox\"\n                    class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                />\n            </div>\n            <div class=\"ml-3 text-sm leading-6\">\n                <label [for]=\"getId(checkbox)\" class=\"font-medium text-gray-900\">{{ getName(checkbox) }}</label>\n                <p [id]=\"getId(checkbox) + '-description'\" class=\"text-gray-500\">{{ getDescription(checkbox) }}</p>\n            </div>\n        </div>\n        }\n    `,\n})\nexport class TwCheckboxComponent extends BaseComponent {\n    @Input() checkbox: FieldItem | FieldItem[] = [];\n    override formControls: { [key: string]: FormControl } = {};\n\n    ngOnInit(): void {\n        if (this.isArray(this.checkbox)) {\n            for (const item of this.checkbox) {\n                this.formControls[item.name] = new FormControl(item.value ?? '', this.getValidators(item));\n            }\n        } else {\n            const item = this.checkbox;\n            this.formControls[item.name] = new FormControl(item.value ?? '', this.getValidators(item));\n        }\n    }\n\n    isArray(checkbox: FieldItem | FieldItem[]): checkbox is FieldItem[] {\n        return Array.isArray(checkbox);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseComponent"
            ]
        },
        {
            "name": "TwInputComponent",
            "id": "component-TwInputComponent-393aed72b870f02fed35c095fe985755fa9e7cee1b870e647907906d4bb53155c4694bcd9b94a263bbec2d1b6d968fda94560ab6144e493f619fbd42bd25b229",
            "file": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-input",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative flex flex-col\">\n    <label for=\"email\" class=\"block text-sm font-medium leading-6 text-gray-900 mb-1\">{{ getName(input) | titlecase }}</label>\n    <div class=\"relative\">\n        <input\n            [id]=\"getId(input)\"\n            [name]=\"getName(input)\"\n            [placeholder]=\"getPlaceholder(input)\"\n            [formControl]=\"formControls[getName(input)]\"\n            (blur)=\"onBlur(getName(input))\"\n            (change)=\"onChange(getName(input))\"\n            type=\"text\"\n            [ngClass]=\"{\n                'border-red-500 ring-red-500 placeholder-red-300': isError(input),\n                'border-gray-300 ring-gray-300 placeholder-gray-300': !isError(input)\n            }\"\n            class=\"block w-full rounded-md py-1.5 pr-10 ring-1 ring-inset focus:ring-2 sm:text-sm sm:leading-6\"\n        />\n        <div class=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n            <svg *ngIf=\"isError(input)\" class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                <path\n                    fill-rule=\"evenodd\"\n                    d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z\"\n                    clip-rule=\"evenodd\"\n                />\n            </svg>\n        </div>\n    </div>\n    <p class=\"mt-2 text-sm text-red-600\" [id]=\"getId(input) + '-error'\" *ngIf=\"isError(input)\">\n        {{ getErrorMessage(input) }}\n    </p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "input",
                    "defaultValue": "{\n        id: 'default',\n        name: 'default',\n        placeholder: 'Default Example',\n        hint: 'This is a default hint',\n        value: '',\n        ariaInvalid: true,\n        errorMessage: 'This field is required.',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "FieldItem",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControls",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAriaInvalid",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getId",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OptionItem[]",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getPlaceholder",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\n\nimport { BaseComponent, FieldItem } from './base.component';\n\n@Component({\n    selector: 'tw-input',\n    standalone: true,\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        <div class=\"relative flex flex-col\">\n            <label for=\"email\" class=\"block text-sm font-medium leading-6 text-gray-900 mb-1\">{{ getName(input) | titlecase }}</label>\n            <div class=\"relative\">\n                <input\n                    [id]=\"getId(input)\"\n                    [name]=\"getName(input)\"\n                    [placeholder]=\"getPlaceholder(input)\"\n                    [formControl]=\"formControls[getName(input)]\"\n                    (blur)=\"onBlur(getName(input))\"\n                    (change)=\"onChange(getName(input))\"\n                    type=\"text\"\n                    [ngClass]=\"{\n                        'border-red-500 ring-red-500 placeholder-red-300': isError(input),\n                        'border-gray-300 ring-gray-300 placeholder-gray-300': !isError(input)\n                    }\"\n                    class=\"block w-full rounded-md py-1.5 pr-10 ring-1 ring-inset focus:ring-2 sm:text-sm sm:leading-6\"\n                />\n                <div class=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n                    <svg *ngIf=\"isError(input)\" class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                        <path\n                            fill-rule=\"evenodd\"\n                            d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z\"\n                            clip-rule=\"evenodd\"\n                        />\n                    </svg>\n                </div>\n            </div>\n            <p class=\"mt-2 text-sm text-red-600\" [id]=\"getId(input) + '-error'\" *ngIf=\"isError(input)\">\n                {{ getErrorMessage(input) }}\n            </p>\n        </div>\n    `,\n})\nexport class TwInputComponent extends BaseComponent implements OnInit {\n    constructor() {\n        super();\n    }\n    @Input() input: FieldItem = {\n        id: 'default',\n        name: 'default',\n        placeholder: 'Default Example',\n        hint: 'This is a default hint',\n        value: '',\n        ariaInvalid: true,\n        errorMessage: 'This field is required.',\n    };\n\n    override formControls: { [key: string]: FormControl } = {};\n\n    ngOnInit(): void {\n        const item = this.input;\n        this.formControls[item.name] = new FormControl(item.value ?? '', this.getValidators(item));\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "extends": [
                "BaseComponent"
            ],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TwRadioComponent",
            "id": "component-TwRadioComponent-252d2899138b09a49ab8514fd480cec97d8c5726cca7797f41bac73d774dc31ba2f12f001b56ca7b95f0d58a38eaa3718415e8266a9c02ba8ff053bcb33314b0",
            "file": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-radio",
            "styleUrls": [],
            "styles": [],
            "template": "<fieldset aria-label=\"Plan\">\n    <div class=\"space-y-5\">\n        @if (isArray(radio)) { @for (r of radio; track $index) {\n        <div class=\"relative flex items-start\">\n            <div class=\"flex h-6 items-center\">\n                <input\n                    [id]=\"getId(r)\"\n                    [name]=\"groupName\"\n                    [value]=\"getName(r)\"\n                    [placeholder]=\"getPlaceholder(r)\"\n                    [formControl]=\"formControls[getName(r)]\"\n                    (blur)=\"onBlur(r.name)\"\n                    (change)=\"onChange(r.name)\"\n                    type=\"radio\"\n                    class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                />\n            </div>\n            <div class=\"ml-3 text-sm leading-6\">\n                <label [for]=\"getId(r)\" class=\"font-medium text-gray-900\">{{ r.name }}</label>\n                <p [id]=\"getId(r) + '-description'\" class=\"text-gray-500\">{{ r.description }}</p>\n            </div>\n        </div>\n        } } @else {\n        <div class=\"relative flex items-start\">\n            <div class=\"flex h-6 items-center\">\n                <input\n                    [id]=\"getId(radio)\"\n                    [name]=\"groupName\"\n                    [value]=\"radio.name\"\n                    [placeholder]=\"getPlaceholder(radio)\"\n                    [formControl]=\"formControl\"\n                    (blur)=\"onBlur(radio.name)\"\n                    (change)=\"onChange(radio.name)\"\n                    type=\"radio\"\n                    class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                />\n            </div>\n            <div class=\"ml-3 text-sm leading-6\">\n                <label [for]=\"getId(radio)\" class=\"font-medium text-gray-900\">{{ radio.name }}</label>\n                <p [id]=\"getId(radio) + '-description'\" class=\"text-gray-500\">{{ radio.description }}</p>\n            </div>\n        </div>\n        }\n    </div>\n</fieldset>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "groupName",
                    "defaultValue": "'radioGroup'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "radio",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "FieldItem | FieldItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControls",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "isArray",
                    "args": [
                        {
                            "name": "radio",
                            "type": "FieldItem | FieldItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FieldItem[]",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "radio",
                            "type": "FieldItem | FieldItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAriaInvalid",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getId",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OptionItem[]",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getPlaceholder",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { BaseComponent, FieldItem } from './base.component';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\n\nimport { CommonModule } from '@angular/common';\n@Component({\n    standalone: true,\n    selector: 'tw-radio',\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        <fieldset aria-label=\"Plan\">\n            <div class=\"space-y-5\">\n                @if (isArray(radio)) { @for (r of radio; track $index) {\n                <div class=\"relative flex items-start\">\n                    <div class=\"flex h-6 items-center\">\n                        <input\n                            [id]=\"getId(r)\"\n                            [name]=\"groupName\"\n                            [value]=\"getName(r)\"\n                            [placeholder]=\"getPlaceholder(r)\"\n                            [formControl]=\"formControls[getName(r)]\"\n                            (blur)=\"onBlur(r.name)\"\n                            (change)=\"onChange(r.name)\"\n                            type=\"radio\"\n                            class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                        />\n                    </div>\n                    <div class=\"ml-3 text-sm leading-6\">\n                        <label [for]=\"getId(r)\" class=\"font-medium text-gray-900\">{{ r.name }}</label>\n                        <p [id]=\"getId(r) + '-description'\" class=\"text-gray-500\">{{ r.description }}</p>\n                    </div>\n                </div>\n                } } @else {\n                <div class=\"relative flex items-start\">\n                    <div class=\"flex h-6 items-center\">\n                        <input\n                            [id]=\"getId(radio)\"\n                            [name]=\"groupName\"\n                            [value]=\"radio.name\"\n                            [placeholder]=\"getPlaceholder(radio)\"\n                            [formControl]=\"formControl\"\n                            (blur)=\"onBlur(radio.name)\"\n                            (change)=\"onChange(radio.name)\"\n                            type=\"radio\"\n                            class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                        />\n                    </div>\n                    <div class=\"ml-3 text-sm leading-6\">\n                        <label [for]=\"getId(radio)\" class=\"font-medium text-gray-900\">{{ radio.name }}</label>\n                        <p [id]=\"getId(radio) + '-description'\" class=\"text-gray-500\">{{ radio.description }}</p>\n                    </div>\n                </div>\n                }\n            </div>\n        </fieldset>\n    `,\n    styles: [],\n})\nexport class TwRadioComponent extends BaseComponent implements OnChanges {\n    @Input() radio: FieldItem | FieldItem[] = [];\n    @Input() groupName = 'radioGroup';\n    override formControls: { [key: string]: FormControl } = {};\n\n    ngOnInit(): void {\n        if (Array.isArray(this.radio)) {\n            for (const item of this.radio) {\n                this.formControls[item.name] = new FormControl(item.value ?? '', this.getValidators(item));\n            }\n        } else {\n            const item = this.radio as FieldItem;\n            this.formControls[item.name] = new FormControl(item.value ?? '', this.getValidators(item));\n        }\n    }\n\n    ngOnChanges({ radio }: SimpleChanges): void {\n        if (radio) {\n            const isString = radio.currentValue;\n            if (typeof isString === 'string') {\n                try {\n                    this.radio = JSON.parse(isString);\n                } catch (e) {\n                    console.error('Failed to parse radio input:', e, isString);\n                    this.radio = [];\n                }\n            } else {\n                this.radio = isString;\n            }\n        }\n    }\n\n    isArray(radio: FieldItem | FieldItem[]): radio is FieldItem[] {\n        return Array.isArray(radio);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseComponent"
            ],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "TwSelectComponent",
            "id": "component-TwSelectComponent-bc39b7987eac34dfb7e0fe53d484d48268132b969f1d9b3a14be4a92aa1d61fb8d36ab0625a439f3e07ce875eca0aa1d0bde754392b66644f904493d86284f2d",
            "file": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-select",
            "styleUrls": [],
            "styles": [],
            "template": "<div [ngClass]=\"width\">\n    <label id=\"listbox-label\" class=\"block text-sm font-medium leading-6 text-gray-900\">{{ getName(select) }}</label>\n    <div class=\"relative mt-2\">\n        <button\n            type=\"button\"\n            class=\"relative w-full min-w-[100px] cursor-default rounded-md bg-white py-1.5 pl-3 pr-10 text-left text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n            aria-haspopup=\"listbox\"\n            aria-expanded=\"true\"\n            aria-labelledby=\"listbox-label\"\n            (click)=\"toggleDropdown()\"\n        >\n            <span class=\"block truncate\">{{ selectedOption?.label || 'Select an option' }}</span>\n            <span class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\n                <svg class=\"h-5 w-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                    <path\n                        fill-rule=\"evenodd\"\n                        d=\"M10 3a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02L10 4.852 7.3 7.76a.75.75 0 01-1.1-1.02l3.25-3.5A.75.75 0 0110 3zm-3.76 9.2a.75.75 0 011.06.04l2.7 2.908 2.7-2.908a.75.75 0 111.1 1.02l-3.25 3.5a.75.75 0 01-1.1 0l-3.25-3.5a.75.75 0 01.04-1.06z\"\n                        clip-rule=\"evenodd\"\n                    />\n                </svg>\n            </span>\n        </button>\n\n        <ul\n            *ngIf=\"dropdownOpen\"\n            class=\"absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\"\n            tabindex=\"-1\"\n            role=\"listbox\"\n            aria-labelledby=\"listbox-label\"\n            aria-activedescendant=\"listbox-option-3\"\n        >\n            <li\n                *ngFor=\"let option of select.options; let i = index\"\n                class=\"relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900\"\n                [id]=\"'listbox-option-' + i\"\n                role=\"option\"\n                (click)=\"selectOption(option)\"\n                (mouseenter)=\"highlightOption(i)\"\n                (mouseleave)=\"highlightOption(-1)\"\n                [ngClass]=\"{ 'bg-indigo-600 text-white': highlightedIndex === i, 'text-gray-900': highlightedIndex !== i }\"\n            >\n                <span\n                    class=\"block truncate\"\n                    [ngClass]=\"{\n                        'font-semibold': selectedOption?.value === option.value,\n                        'font-normal': selectedOption?.value !== option.value\n                    }\"\n                    >{{ option.label }}</span\n                >\n                <span\n                    *ngIf=\"selectedOption?.value === option.value\"\n                    class=\"absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600\"\n                    [ngClass]=\"{ 'text-white': highlightedIndex === i, 'text-indigo-600': highlightedIndex !== i }\"\n                >\n                    <svg class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                        <path\n                            fill-rule=\"evenodd\"\n                            d=\"M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z\"\n                            clip-rule=\"evenodd\"\n                        />\n                    </svg>\n                </span>\n            </li>\n        </ul>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "select",
                    "defaultValue": "{\n        id: 'select',\n        options: [],\n        name: 'select',\n        placeholder: 'select',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "FieldItem",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'min-w-[200px]'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dropdownOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "formControls",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "highlightedIndex",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "methodsClass": [
                {
                    "name": "highlightOption",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "OptionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "OptionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAriaInvalid",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getId",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OptionItem[]",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getPlaceholder",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { BaseComponent, FieldItem, OptionItem } from './base.component';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\n\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'tw-select',\n    standalone: true,\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        <div [ngClass]=\"width\">\n            <label id=\"listbox-label\" class=\"block text-sm font-medium leading-6 text-gray-900\">{{ getName(select) }}</label>\n            <div class=\"relative mt-2\">\n                <button\n                    type=\"button\"\n                    class=\"relative w-full min-w-[100px] cursor-default rounded-md bg-white py-1.5 pl-3 pr-10 text-left text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                    aria-haspopup=\"listbox\"\n                    aria-expanded=\"true\"\n                    aria-labelledby=\"listbox-label\"\n                    (click)=\"toggleDropdown()\"\n                >\n                    <span class=\"block truncate\">{{ selectedOption?.label || 'Select an option' }}</span>\n                    <span class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\n                        <svg class=\"h-5 w-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                            <path\n                                fill-rule=\"evenodd\"\n                                d=\"M10 3a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02L10 4.852 7.3 7.76a.75.75 0 01-1.1-1.02l3.25-3.5A.75.75 0 0110 3zm-3.76 9.2a.75.75 0 011.06.04l2.7 2.908 2.7-2.908a.75.75 0 111.1 1.02l-3.25 3.5a.75.75 0 01-1.1 0l-3.25-3.5a.75.75 0 01.04-1.06z\"\n                                clip-rule=\"evenodd\"\n                            />\n                        </svg>\n                    </span>\n                </button>\n\n                <ul\n                    *ngIf=\"dropdownOpen\"\n                    class=\"absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\"\n                    tabindex=\"-1\"\n                    role=\"listbox\"\n                    aria-labelledby=\"listbox-label\"\n                    aria-activedescendant=\"listbox-option-3\"\n                >\n                    <li\n                        *ngFor=\"let option of select.options; let i = index\"\n                        class=\"relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900\"\n                        [id]=\"'listbox-option-' + i\"\n                        role=\"option\"\n                        (click)=\"selectOption(option)\"\n                        (mouseenter)=\"highlightOption(i)\"\n                        (mouseleave)=\"highlightOption(-1)\"\n                        [ngClass]=\"{ 'bg-indigo-600 text-white': highlightedIndex === i, 'text-gray-900': highlightedIndex !== i }\"\n                    >\n                        <span\n                            class=\"block truncate\"\n                            [ngClass]=\"{\n                                'font-semibold': selectedOption?.value === option.value,\n                                'font-normal': selectedOption?.value !== option.value\n                            }\"\n                            >{{ option.label }}</span\n                        >\n                        <span\n                            *ngIf=\"selectedOption?.value === option.value\"\n                            class=\"absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600\"\n                            [ngClass]=\"{ 'text-white': highlightedIndex === i, 'text-indigo-600': highlightedIndex !== i }\"\n                        >\n                            <svg class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                                <path\n                                    fill-rule=\"evenodd\"\n                                    d=\"M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z\"\n                                    clip-rule=\"evenodd\"\n                                />\n                            </svg>\n                        </span>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    `,\n})\nexport class TwSelectComponent extends BaseComponent implements OnInit {\n    @Input() select: FieldItem = {\n        id: 'select',\n        options: [],\n        name: 'select',\n        placeholder: 'select',\n    };\n    @Input() width: string = 'min-w-[200px]';\n    override formControls: { [key: string]: FormControl } = {};\n\n    selectedOption: any;\n    dropdownOpen = false;\n    highlightedIndex = -1;\n\n    ngOnInit(): void {\n        const item = this.select as FieldItem;\n        const options = item.options ?? [];\n        this.formControls[item.name] = new FormControl(item.value ?? '', this.getValidators(item));\n        this.selectedOption = options.find((option) => option.value === item.value) || null;\n    }\n\n    toggleDropdown(): void {\n        this.dropdownOpen = !this.dropdownOpen;\n    }\n\n    selectOption(option: OptionItem): void {\n        this.selectedOption = option;\n        this.formControls[this.select.name].setValue(option.value);\n        this.dropdownOpen = false;\n    }\n\n    highlightOption(index: number): void {\n        this.highlightedIndex = index;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "BaseComponent"
            ],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TwTextareaComponent",
            "id": "component-TwTextareaComponent-21c53bca55f377b6fbcdaa58ffc3c3f7d354d8c4df16147359d7de1178cef2125e7b8e558c1c039ce7e2ac0039bf140b08b0354e5993c8f719f79a8b521da8ef",
            "file": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-textarea",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative flex flex-col\">\n    <label for=\"textarea\" class=\"block text-sm font-medium leading-6 text-gray-900 mb-1\">{{ getName(input) | titlecase }}</label>\n    <div class=\"relative\">\n        <textarea\n            [id]=\"getId(input)\"\n            [name]=\"getName(input)\"\n            [placeholder]=\"getPlaceholder(input)\"\n            [formControl]=\"formControls[getName(input)]\"\n            (blur)=\"onBlur(getName(input))\"\n            (change)=\"onChange(getName(input))\"\n            [ngClass]=\"{\n                'border-red-500 ring-red-500 placeholder-red-300': isError(input),\n                'border-gray-300 ring-gray-300 placeholder-gray-300': !isError(input)\n            }\"\n            class=\"block w-full rounded-md py-1.5 pr-10 ring-1 ring-inset focus:ring-2 sm:text-sm sm:leading-6\"\n        ></textarea>\n        <div class=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n            <svg *ngIf=\"isError(input)\" class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                <path\n                    fill-rule=\"evenodd\"\n                    d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z\"\n                    clip-rule=\"evenodd\"\n                />\n            </svg>\n        </div>\n    </div>\n    <p class=\"mt-2 text-sm text-red-600\" [id]=\"getId(input) + '-error'\" *ngIf=\"isError(input)\">\n        {{ getErrorMessage(input) }}\n    </p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "input",
                    "defaultValue": "{\n        id: 'default',\n        name: 'default',\n        placeholder: 'Default Example',\n        hint: 'This is a default hint',\n        value: '',\n        ariaInvalid: true,\n        errorMessage: 'This field is required.',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "FieldItem",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControls",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAriaInvalid",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getId",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getName",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "OptionItem[]",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getPlaceholder",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "isError",
                    "args": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "FieldItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\n\nimport { BaseComponent, FieldItem } from './base.component';\n\n@Component({\n    selector: 'tw-textarea',\n    standalone: true,\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        <div class=\"relative flex flex-col\">\n            <label for=\"textarea\" class=\"block text-sm font-medium leading-6 text-gray-900 mb-1\">{{ getName(input) | titlecase }}</label>\n            <div class=\"relative\">\n                <textarea\n                    [id]=\"getId(input)\"\n                    [name]=\"getName(input)\"\n                    [placeholder]=\"getPlaceholder(input)\"\n                    [formControl]=\"formControls[getName(input)]\"\n                    (blur)=\"onBlur(getName(input))\"\n                    (change)=\"onChange(getName(input))\"\n                    [ngClass]=\"{\n                        'border-red-500 ring-red-500 placeholder-red-300': isError(input),\n                        'border-gray-300 ring-gray-300 placeholder-gray-300': !isError(input)\n                    }\"\n                    class=\"block w-full rounded-md py-1.5 pr-10 ring-1 ring-inset focus:ring-2 sm:text-sm sm:leading-6\"\n                ></textarea>\n                <div class=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n                    <svg *ngIf=\"isError(input)\" class=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                        <path\n                            fill-rule=\"evenodd\"\n                            d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z\"\n                            clip-rule=\"evenodd\"\n                        />\n                    </svg>\n                </div>\n            </div>\n            <p class=\"mt-2 text-sm text-red-600\" [id]=\"getId(input) + '-error'\" *ngIf=\"isError(input)\">\n                {{ getErrorMessage(input) }}\n            </p>\n        </div>\n    `,\n})\nexport class TwTextareaComponent extends BaseComponent implements OnInit {\n    constructor() {\n        super();\n    }\n    @Input() input: FieldItem = {\n        id: 'default',\n        name: 'default',\n        placeholder: 'Default Example',\n        hint: 'This is a default hint',\n        value: '',\n        ariaInvalid: true,\n        errorMessage: 'This field is required.',\n    };\n\n    override formControls: { [key: string]: FormControl } = {};\n\n    ngOnInit(): void {\n        const item = this.input;\n        this.formControls[item.name] = new FormControl(item.value ?? '', this.getValidators(item));\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "extends": [
                "BaseComponent"
            ],
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "CheckboxGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        checkbox: [\n            { id: 'comments', name: 'Comments', description: 'Get notified when someone posts a comment on a posting.' },\n            { id: 'candidates', name: 'Candidates', description: 'Get notified when a candidate applies for a job.' },\n            { id: 'offers', name: 'Offers', description: 'Get notified when a candidate accepts or rejects an offer.' },\n        ] as FieldItem[],\n    },\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n    stories: [\n        '../src/**/*.mdx',\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\n        '../projects/ng-lib/src/**/*.mdx',\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\n    ],\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\n    framework: {\n        name: '@storybook/angular',\n        options: {},\n    },\n    docs: {\n        autodocs: 'tag',\n    },\n}"
            },
            {
                "name": "customViewport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    large: {\n        name: 'Large Screen',\n        styles: {\n            width: '1920px',\n            height: '1080px',\n        },\n    },\n    small: {\n        name: 'Small Screen',\n        styles: {\n            width: '800px',\n            height: '963px',\n        },\n    },\n}"
            },
            {
                "name": "Input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        input: {\n            id: 'newsletter',\n            name: 'Newsletter',\n            placeholder: 'Newsletter Placeholder',\n            hint: 'Get notified when there is a new newsletter.',\n            value: '',\n            ariaInvalid: false,\n            errorMessage: '',\n        } as FieldItem,\n    },\n}"
            },
            {
                "name": "InputWithError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        input: {\n            id: 'newsletter',\n            name: 'Newsletter',\n            placeholder: 'Newsletter Placeholder',\n            hint: 'Get notified when there is a new newsletter.',\n            value: '',\n            required: true,\n            errorMessage: 'This field is required.',\n        } as FieldItem,\n    },\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwCheckboxComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Checkbox',\n    component: TwCheckboxComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwCheckboxComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              <div style=\"width: '80%'; margin: '0 auto'\">\n              ${story}\n              </div>\n            </div>`\n        ),\n    ],\n    args: {},\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwInputComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Input',\n    component: TwInputComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwInputComponent, ReactiveFormsModule],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"width:80%; margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwRadioComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Radio',\n    component: TwRadioComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwRadioComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              <div style=\"width: '80%'; margin: '0 auto'\">\n              ${story}\n              </div>\n            </div>`\n        ),\n    ],\n    args: {},\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwSelectComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Select',\n    component: TwSelectComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwSelectComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              <div style=\"width: '80%'; margin: '0 auto'\">\n              ${story}\n              </div>\n            </div>`\n        ),\n    ],\n    args: {},\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwTextareaComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Textarea',\n    component: TwTextareaComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwTextareaComponent, ReactiveFormsModule],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"width:80%; margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n    parameters: {\n        viewport: { viewport: customViewport },\n        actions: { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/,\n            },\n        },\n    },\n    decorators: [\n        withThemeByDataAttribute({\n            themes: {\n                light: 'light',\n                dark: 'dark',\n            },\n            defaultTheme: 'light',\n            attributeName: 'data-mode',\n        }),\n    ],\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "RadioGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        radio: [\n            { id: 'comments', name: 'Comments', description: 'Get notified when someone posts a comment on a posting.' },\n            { id: 'candidates', name: 'Candidates', description: 'Get notified when a candidate applies for a job.' },\n            { id: 'offers', name: 'Offers', description: 'Get notified when a candidate accepts or rejects an offer.' },\n        ] as FieldItem[],\n    },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        select: {\n            id: 'newsletter',\n            name: 'Newsletter',\n            description: 'Get notified when there is a new newsletter.',\n            options: [\n                { label: 'Yes', value: 'yes' },\n                { label: 'No', value: 'no' },\n            ],\n        } as FieldItem,\n    },\n}"
            },
            {
                "name": "SingleCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        checkbox: { id: 'newsletter', name: 'Newsletter', description: 'Get notified when there is a new newsletter.' } as FieldItem,\n    },\n}"
            },
            {
                "name": "SingleRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        radio: { id: 'newsletter', name: 'Newsletter', description: 'Get notified when there is a new newsletter.' } as FieldItem,\n    },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Textarea",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        input: {\n            id: 'comment',\n            name: 'comment',\n            placeholder: 'Comment Placeholder',\n            hint: 'Comment hint message.',\n            value: '',\n            ariaInvalid: false,\n            errorMessage: '',\n        } as FieldItem,\n    },\n}"
            },
            {
                "name": "TextareaWithError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        input: {\n            id: 'comment',\n            name: 'comment',\n            placeholder: 'Comment Placeholder',\n            hint: 'Comment hint message.',\n            value: '',\n            required: true,\n            errorMessage: 'This field is required.',\n        } as FieldItem,\n    },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwCheckboxComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwInputComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwRadioComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwSelectComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwTextareaComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts": [
                {
                    "name": "CheckboxGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        checkbox: [\n            { id: 'comments', name: 'Comments', description: 'Get notified when someone posts a comment on a posting.' },\n            { id: 'candidates', name: 'Candidates', description: 'Get notified when a candidate applies for a job.' },\n            { id: 'offers', name: 'Offers', description: 'Get notified when a candidate accepts or rejects an offer.' },\n        ] as FieldItem[],\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwCheckboxComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Checkbox',\n    component: TwCheckboxComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwCheckboxComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              <div style=\"width: '80%'; margin: '0 auto'\">\n              ${story}\n              </div>\n            </div>`\n        ),\n    ],\n    args: {},\n}"
                },
                {
                    "name": "SingleCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        checkbox: { id: 'newsletter', name: 'Newsletter', description: 'Get notified when there is a new newsletter.' } as FieldItem,\n    },\n}"
                }
            ],
            ".storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n    stories: [\n        '../src/**/*.mdx',\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\n        '../projects/ng-lib/src/**/*.mdx',\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\n    ],\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\n    framework: {\n        name: '@storybook/angular',\n        options: {},\n    },\n    docs: {\n        autodocs: 'tag',\n    },\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "customViewport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    large: {\n        name: 'Large Screen',\n        styles: {\n            width: '1920px',\n            height: '1080px',\n        },\n    },\n    small: {\n        name: 'Small Screen',\n        styles: {\n            width: '800px',\n            height: '963px',\n        },\n    },\n}"
                },
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n    parameters: {\n        viewport: { viewport: customViewport },\n        actions: { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/,\n            },\n        },\n    },\n    decorators: [\n        withThemeByDataAttribute({\n            themes: {\n                light: 'light',\n                dark: 'dark',\n            },\n            defaultTheme: 'light',\n            attributeName: 'data-mode',\n        }),\n    ],\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts": [
                {
                    "name": "Input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        input: {\n            id: 'newsletter',\n            name: 'Newsletter',\n            placeholder: 'Newsletter Placeholder',\n            hint: 'Get notified when there is a new newsletter.',\n            value: '',\n            ariaInvalid: false,\n            errorMessage: '',\n        } as FieldItem,\n    },\n}"
                },
                {
                    "name": "InputWithError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        input: {\n            id: 'newsletter',\n            name: 'Newsletter',\n            placeholder: 'Newsletter Placeholder',\n            hint: 'Get notified when there is a new newsletter.',\n            value: '',\n            required: true,\n            errorMessage: 'This field is required.',\n        } as FieldItem,\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwInputComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Input',\n    component: TwInputComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwInputComponent, ReactiveFormsModule],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"width:80%; margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwRadioComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Radio',\n    component: TwRadioComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwRadioComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              <div style=\"width: '80%'; margin: '0 auto'\">\n              ${story}\n              </div>\n            </div>`\n        ),\n    ],\n    args: {},\n}"
                },
                {
                    "name": "RadioGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        radio: [\n            { id: 'comments', name: 'Comments', description: 'Get notified when someone posts a comment on a posting.' },\n            { id: 'candidates', name: 'Candidates', description: 'Get notified when a candidate applies for a job.' },\n            { id: 'offers', name: 'Offers', description: 'Get notified when a candidate accepts or rejects an offer.' },\n        ] as FieldItem[],\n    },\n}"
                },
                {
                    "name": "SingleRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        radio: { id: 'newsletter', name: 'Newsletter', description: 'Get notified when there is a new newsletter.' } as FieldItem,\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwSelectComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Select',\n    component: TwSelectComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwSelectComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              <div style=\"width: '80%'; margin: '0 auto'\">\n              ${story}\n              </div>\n            </div>`\n        ),\n    ],\n    args: {},\n}"
                },
                {
                    "name": "Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        select: {\n            id: 'newsletter',\n            name: 'Newsletter',\n            description: 'Get notified when there is a new newsletter.',\n            options: [\n                { label: 'Yes', value: 'yes' },\n                { label: 'No', value: 'no' },\n            ],\n        } as FieldItem,\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwTextareaComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Field/Types/Textarea',\n    component: TwTextareaComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwTextareaComponent, ReactiveFormsModule],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"width:80%; margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
                },
                {
                    "name": "Textarea",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        input: {\n            id: 'comment',\n            name: 'comment',\n            placeholder: 'Comment Placeholder',\n            hint: 'Comment hint message.',\n            value: '',\n            ariaInvalid: false,\n            errorMessage: '',\n        } as FieldItem,\n    },\n}"
                },
                {
                    "name": "TextareaWithError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        input: {\n            id: 'comment',\n            name: 'comment',\n            placeholder: 'Comment Placeholder',\n            hint: 'Comment hint message.',\n            value: '',\n            required: true,\n            errorMessage: 'This field is required.',\n        } as FieldItem,\n    },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwCheckboxComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwInputComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwRadioComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwSelectComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwTextareaComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/base.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FieldItem",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/base.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OptionItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputWithError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RadioGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/stories/tw-textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextareaWithError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwRadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/modules/types/tw-textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}