{
    "pipes": [],
    "interfaces": [
        {
            "name": "Item",
            "id": "interface-Item-18c5d7ac3b2da8c4288c6b4a6309133b6d85abac8fb3827f2f9ab2200523540ff6c083dcb2148221d8be3ed66e2ca88213241f76e3c457f89a0d36b21606d378",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\ninterface Item {\r\n    name: string;\r\n    age: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-sortable-table-example',\r\n    template: `\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th (click)=\"sort('name')\">Name</th>\r\n                    <th (click)=\"sort('age')\">Age</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let item of sortedItems\">\r\n                    <td>{{ item.name }}</td>\r\n                    <td>{{ item.age }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    `,\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n})\r\nexport class SortableTableExampleComponent {\r\n    items: Item[] = [\r\n        { name: 'John Doe', age: 28 },\r\n        { name: 'Jane Smith', age: 34 },\r\n        { name: 'Sam Green', age: 22 },\r\n        { name: 'Emily Brown', age: 42 },\r\n    ];\r\n\r\n    sortedItems: Item[] = [...this.items];\r\n    currentSortKey: keyof Item = 'name';\r\n    currentSortDirection: 'asc' | 'desc' = 'asc';\r\n\r\n    sort(key: keyof Item): void {\r\n        if (this.currentSortKey === key) {\r\n            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';\r\n        } else {\r\n            this.currentSortDirection = 'asc';\r\n        }\r\n        this.currentSortKey = key;\r\n        this.sortedItems.sort((a, b) => {\r\n            if (a[key] < b[key]) return this.currentSortDirection === 'asc' ? -1 : 1;\r\n            if (a[key] > b[key]) return this.currentSortDirection === 'asc' ? 1 : -1;\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n\r\nconst meta: Meta<SortableTableExampleComponent> = {\r\n    component: SortableTableExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Sortable Table',\r\n};\r\nexport default meta;\r\ntype Story = StoryObj<SortableTableExampleComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Pagination",
            "id": "interface-Pagination-b6958d7279430a00401cb4bb376fd38111e09593d12d106a339ccd342a41f96619f8a4e4f126ee18bda63f8b1e1c73ecaafb116c358862d200732bb9e7ee934f",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/pagination.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Pagination {\r\n    currentPage: number;\r\n    totalPages: number;\r\n    pageSize: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RowData",
            "id": "interface-RowData-6f7828c3cff8b190560f18dec5bca470a808b57c4f6ca78eb9a6ab0013075b6a200ad5e375312dac8eee8b3235c42bfb5eca8247fe06bfbb0028575328718cc2",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\r\n    dataSource: any[];\r\n    draggedColIndex: number | null;\r\n    filterDataSource: { column: string; value: string };\r\n    headers: string[];\r\n    initialDataSource: any[];\r\n    initialHeaders: string[];\r\n    pagination: {\r\n        currentPage: number;\r\n        totalPages: number;\r\n        pageSize: number;\r\n    };\r\n    preferences: {\r\n        visibleColumns: string[];\r\n        groupBy: string | undefined;\r\n    };\r\n    selectedRows: any[];\r\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface RowData {\r\n    [key: string]: any;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-6f7828c3cff8b190560f18dec5bca470a808b57c4f6ca78eb9a6ab0013075b6a200ad5e375312dac8eee8b3235c42bfb5eca8247fe06bfbb0028575328718cc2",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "SortableItem",
            "id": "interface-SortableItem-d82e917610a5932f3fc19107a71524136965a303a5963c1dac40a9dd017fda6d5df28c9f105980db0bd6e3941f1ffb9eb5cde6f1875a7a5c8d89030001962f9f",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/sorting.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\r\n\r\nexport interface SortableItem {\r\n    id: string;\r\n    [key: string]: any;\r\n}\r\n\r\n@Directive({\r\n    selector: '[adk-sorting]',\r\n    exportAs: 'adkSorting',\r\n    standalone: true,\r\n})\r\nexport class AdkSorting<T extends SortableItem> {\r\n    #items = signal<T[]>([]);\r\n    #sortKey = signal<string | null>(null);\r\n    #sortDirection = signal<'asc' | 'desc'>('asc');\r\n\r\n    sortedItems = computed(() => {\r\n        const items = [...this.#items()];\r\n        const key = this.#sortKey();\r\n        const direction = this.#sortDirection();\r\n\r\n        if (!key) return items;\r\n\r\n        return items.sort((a, b) => {\r\n            const aValue = a[key];\r\n            const bValue = b[key];\r\n\r\n            if (aValue < bValue) {\r\n                return direction === 'asc' ? -1 : 1;\r\n            } else if (aValue > bValue) {\r\n                return direction === 'asc' ? 1 : -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Add items to the list\r\n     * @param newItems\r\n     */\r\n    add(...newItems: T[]): void {\r\n        this.#items.update((items) => [...items, ...newItems]);\r\n    }\r\n\r\n    /**\r\n     * Set the sorting key and direction\r\n     * @param key\r\n     * @param direction\r\n     */\r\n    sort(key: string, direction: 'asc' | 'desc'): void {\r\n        this.#sortKey.set(key);\r\n        this.#sortDirection.set(direction);\r\n    }\r\n\r\n    /**\r\n     * Clear the sorting\r\n     */\r\n    clearSort(): void {\r\n        this.#sortKey.set(null);\r\n        this.#sortDirection.set('asc');\r\n    }\r\n\r\n    /**\r\n     * Get the current sorting key\r\n     */\r\n    getSortKey(): string | null {\r\n        return this.#sortKey();\r\n    }\r\n\r\n    /**\r\n     * Get the current sorting direction\r\n     */\r\n    getSortDirection(): 'asc' | 'desc' {\r\n        return this.#sortDirection();\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-d82e917610a5932f3fc19107a71524136965a303a5963c1dac40a9dd017fda6d5df28c9f105980db0bd6e3941f1ffb9eb5cde6f1875a7a5c8d89030001962f9f",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "TableState",
            "id": "interface-TableState-6f7828c3cff8b190560f18dec5bca470a808b57c4f6ca78eb9a6ab0013075b6a200ad5e375312dac8eee8b3235c42bfb5eca8247fe06bfbb0028575328718cc2",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\r\n    dataSource: any[];\r\n    draggedColIndex: number | null;\r\n    filterDataSource: { column: string; value: string };\r\n    headers: string[];\r\n    initialDataSource: any[];\r\n    initialHeaders: string[];\r\n    pagination: {\r\n        currentPage: number;\r\n        totalPages: number;\r\n        pageSize: number;\r\n    };\r\n    preferences: {\r\n        visibleColumns: string[];\r\n        groupBy: string | undefined;\r\n    };\r\n    selectedRows: any[];\r\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface RowData {\r\n    [key: string]: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "draggedColIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "filterDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "initialDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "initialHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "preferences",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sortDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-6f7828c3cff8b190560f18dec5bca470a808b57c4f6ca78eb9a6ab0013075b6a200ad5e375312dac8eee8b3235c42bfb5eca8247fe06bfbb0028575328718cc2",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "TableDataSourceService",
            "id": "injectable-TableDataSourceService-040512502853ccccacc3cfb112c2e14ae2228073ba7caa276c4abb676dceff06429beef0e79a90ba5ffdf3654f339e41368168f10cea6002240d5eb2d6e520f3",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/table-datasource.service.ts",
            "properties": [
                {
                    "name": "#state",
                    "defaultValue": "signal<TableState>({\r\n    dataSource: [],\r\n    draggedColIndex: null,\r\n    filterDataSource: { column: '', value: '' },\r\n    headers: [],\r\n    initialDataSource: [],\r\n    initialHeaders: [],\r\n    pagination: {\r\n      currentPage: 1,\r\n      totalPages: 1,\r\n      pageSize: 10,\r\n    },\r\n    preferences: {\r\n      visibleColumns: [],\r\n      groupBy: undefined,\r\n    },\r\n    selectedRows: [],\r\n    sortDataSource: { key: '', direction: 'ascending' },\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filterRows",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "computed(() => this.#state())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dragDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTableState",
                    "args": [],
                    "optional": false,
                    "returnType": "TableState",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialFilterSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentPage",
                    "args": [
                        {
                            "name": "action",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDataSourcePagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "action",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGroupBy",
                    "args": [
                        {
                            "name": "groupBy",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupBy",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeaders",
                    "args": [
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPaginationState",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Partial<Pagination>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Partial<Pagination>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPreferences",
                    "args": [
                        {
                            "name": "action",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedRows",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTableDataSource",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortDataSource",
                    "args": [
                        {
                            "name": "sortDataSource",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortDataSource",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectedAllRows",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateChangedCurrentPage",
                    "args": [
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, computed, signal } from '@angular/core';\r\nimport { Pagination, RowData, TableState } from './models';\r\n\r\nimport { SortRowsUtil } from './utils/sort-rows.util';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TableDataSourceService {\r\n  #state = signal<TableState>({\r\n    dataSource: [],\r\n    draggedColIndex: null,\r\n    filterDataSource: { column: '', value: '' },\r\n    headers: [],\r\n    initialDataSource: [],\r\n    initialHeaders: [],\r\n    pagination: {\r\n      currentPage: 1,\r\n      totalPages: 1,\r\n      pageSize: 10,\r\n    },\r\n    preferences: {\r\n      visibleColumns: [],\r\n      groupBy: undefined,\r\n    },\r\n    selectedRows: [],\r\n    sortDataSource: { key: '', direction: 'ascending' },\r\n  });\r\n\r\n  readonly state = computed(() => this.#state());\r\n\r\n  constructor() {\r\n    console.log('TableDataSourceService', this.state());\r\n  }\r\n\r\n  get<K extends keyof TableState>(key: K): TableState[K] {\r\n    return this.#state()[key];\r\n  }\r\n\r\n  setHeaders(headers: string[]): void {\r\n    this.#state.update((state) => ({\r\n      ...state,\r\n      headers,\r\n      initialHeaders: headers,\r\n      preferences: {\r\n        ...state.preferences,\r\n        visibleColumns: headers,\r\n      },\r\n      filterDataSource: { column: headers[0], value: '' },\r\n    }));\r\n  }\r\n\r\n  setTableDataSource(dataSource: any[]): void {\r\n    this.#state.update((state) => ({\r\n      ...state,\r\n      dataSource,\r\n      initialDataSource: dataSource,\r\n    }));\r\n  }\r\n\r\n  initialFilterSearch(): void {\r\n    this.#state.update((state) => ({ ...state, filterDataSource: { column: state.headers[0], value: '' } }));\r\n  }\r\n\r\n  setFilter(action: { column: string | null; value: string }): void {\r\n    const column = action.column ?? this.state().filterDataSource.column;\r\n    const value = action.value ?? this.state().filterDataSource.value;\r\n    const filterDataSource = { column, value };\r\n    this.#state.update((state) => ({ ...state, filterDataSource }));\r\n    const selectedRows = this.state().selectedRows;\r\n    if (this.state().filterDataSource.column) {\r\n      if (this.state().filterDataSource.value === '') {\r\n        this.#state.update((state) => ({\r\n          ...state,\r\n          dataSource: state.initialDataSource,\r\n        }));\r\n      } else {\r\n        this.#state.update((state) => ({\r\n          ...state,\r\n          dataSource: this.filterRows(state.initialDataSource, { column, value }),\r\n        }));\r\n        if (this.state().dataSource.length > this.state().pagination.pageSize) {\r\n          this.setPaginationState(this.state().pagination);\r\n        }\r\n      }\r\n    }\r\n    if (selectedRows.length > 0) {\r\n      const newSelectedRows = selectedRows.filter((row) => this.state().dataSource.includes(row));\r\n      this.#state.update((state) => ({ ...state, selectedRows: newSelectedRows }));\r\n    }\r\n    if (value === '') this.setPaginationState(this.state().pagination);\r\n  }\r\n\r\n  private filterRows = (rows: any[], filter: { column: string; value: string }) => {\r\n    if (!filter.column || !filter.value) return rows; // Return all rows if no filter criteria\r\n    return rows.filter((row) => {\r\n      const column = filter.column.toLowerCase();\r\n      return row[column]?.toLowerCase().includes(filter.value.toLowerCase()); // Case-insensitive filter\r\n    });\r\n  };\r\n\r\n  setPreferences(action: { visibleColumns: string[]; groupBy: string }): void {\r\n    this.#state.update((state) => ({\r\n      ...state,\r\n      headers: action.visibleColumns,\r\n      preferences: {\r\n        visibleColumns: action.visibleColumns,\r\n        groupBy: action.groupBy,\r\n      },\r\n    }));\r\n    this.setDataSourcePagination();\r\n  }\r\n\r\n  setPaginationState(pagination: Partial<Pagination>): void {\r\n    const pageSize = pagination.pageSize ?? this.#state().pagination.pageSize;\r\n    this.#state.update((state) => ({\r\n      ...state,\r\n      pagination: {\r\n        ...state.pagination,\r\n        ...pagination,\r\n        totalPages: Math.ceil(state.initialDataSource.length / pageSize),\r\n      },\r\n    }));\r\n    this.setDataSourcePagination();\r\n  }\r\n\r\n  setCurrentPage(action: number) {\r\n    this.#state.update((state) => ({\r\n      ...state,\r\n      pagination: {\r\n        ...state.pagination,\r\n        currentPage: action,\r\n      },\r\n    }));\r\n\r\n    this.updateChangedCurrentPage(action);\r\n  }\r\n\r\n  updateChangedCurrentPage(action: any) {\r\n    // Update currentPage in pagination\r\n    this.#state.update((state) => ({\r\n      ...state,\r\n      pagination: {\r\n        ...state.pagination,\r\n        currentPage: action,\r\n      },\r\n    }));\r\n\r\n    // Update dataSource based on currentPage\r\n    this.setDataSourcePagination();\r\n  }\r\n\r\n  setDataSourcePagination() {\r\n    const state = this.#state();\r\n    // Calculate totalPages based on the full dataset (initialDataSource)\r\n    this.#state.update((state) => ({\r\n      ...state,\r\n      pagination: {\r\n        ...state.pagination,\r\n        totalPages: Math.ceil(state.initialDataSource.length / state.pagination.pageSize),\r\n      },\r\n    }));\r\n    // Check if there's data in the initialDataSource to paginate\r\n    if (state.initialDataSource.length > 0) {\r\n      // Use initialDataSource to slice the data for current page\r\n      this.#state.update((state) => ({\r\n        ...state,\r\n        dataSource: state.initialDataSource.slice(\r\n          (state.pagination.currentPage - 1) * state.pagination.pageSize,\r\n          state.pagination.currentPage * state.pagination.pageSize\r\n        ),\r\n      }));\r\n    }\r\n  }\r\n\r\n  setGroupBy(groupBy: string): void {\r\n    this.#state.update((state) => ({\r\n      ...state,\r\n      preferences: { ...state.preferences, groupBy: groupBy !== 'non' ? groupBy : 'key' },\r\n    }));\r\n  }\r\n\r\n  setSelectedRows(rowData: RowData): void {\r\n    this.#state.update((state) => {\r\n      const existingIndex = state.selectedRows.findIndex((row) => JSON.stringify(row) === JSON.stringify(rowData));\r\n      const newSelectedRows =\r\n        existingIndex !== -1 ? state.selectedRows.filter((_, index) => index !== existingIndex) : [...state.selectedRows, rowData];\r\n      return { ...state, selectedRows: newSelectedRows };\r\n    });\r\n  }\r\n\r\n  toggleSelectedAllRows(): void {\r\n    this.#state.update((state) => {\r\n      const allSelected = state.selectedRows.length === state.dataSource.length;\r\n      return {\r\n        ...state,\r\n        selectedRows: allSelected ? [] : [...state.dataSource],\r\n      };\r\n    });\r\n  }\r\n\r\n  sortDataSource(sortDataSource: { key: string; direction: 'ascending' | 'descending' }): void {\r\n    if (sortDataSource.key) {\r\n      const sort = new SortRowsUtil();\r\n      this.#state.update((state) => ({\r\n        ...state,\r\n        selectedRows: [],\r\n        sortDataSource,\r\n        dataSource: sort.sortRows(state.dataSource, sortDataSource),\r\n      }));\r\n    }\r\n  }\r\n\r\n  getTableState(): TableState {\r\n    return this.#state();\r\n  }\r\n\r\n  dragStart(index: number): void {\r\n    this.#state.update((state) => ({ ...state, draggedColIndex: index }));\r\n  }\r\n\r\n  dragDrop(index: number): void {\r\n    const targetIndex = index;\r\n    const draggedColIndex = this.state().draggedColIndex;\r\n    const dataSource = this.state().dataSource;\r\n    if (draggedColIndex === null || draggedColIndex === targetIndex) return; // If no valid drag action, exit\r\n\r\n    // Update headers array with dragged column\r\n    const newHeaders = [...this.state().headers];\r\n    const draggedHeader = newHeaders.splice(draggedColIndex, 1)[0];\r\n    newHeaders.splice(targetIndex, 0, draggedHeader);\r\n\r\n    // Update rows in dataSource array with dragged column\r\n    const newRows = dataSource.map((row: any) => {\r\n      const entries = Object.entries(row);\r\n      const draggedEntry = entries.splice(draggedColIndex, 1)[0];\r\n      entries.splice(targetIndex, 0, draggedEntry);\r\n      return Object.fromEntries(entries); // Convert back to object\r\n    });\r\n\r\n    // Update state with new headers, rows, and reset draggedColIndex\r\n    this.setHeaders(newHeaders);\r\n    this.setTableDataSource(newRows);\r\n    this.setSelectedRows([]);\r\n    this.#state.update((state) => ({ ...state, draggedColIndex: null }));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "DraggableUtil",
            "id": "class-DraggableUtil-64e2f35dfa6aa39b0164253e8b54ba14eb9155e66f31eff5b2dda14621941d3d96aef729bfc238df5e341a62245a1d2f340e6e0d70c175a974bdae1d35aea09e",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/draggable.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DraggableUtil {\r\n    headers: string[] = [];\r\n    dataSource = [];\r\n    draggedColIndex = null;\r\n    selectedRows = [];\r\n\r\n    // Function to handle dragging of columns\r\n    dragRows(state: any, action: any) {\r\n        const targetIndex = action.payload;\r\n        const draggedColIndex = state.draggedColIndex;\r\n        const dataSource = state.dataSource;\r\n        if (draggedColIndex === null || draggedColIndex === targetIndex) return; // If no valid drag action, exit\r\n\r\n        // Update headers array with dragged column\r\n        const newHeaders = [...state.headers];\r\n        const draggedHeader = newHeaders.splice(draggedColIndex, 1)[0];\r\n        newHeaders.splice(targetIndex, 0, draggedHeader);\r\n\r\n        // Update rows in dataSource array with dragged column\r\n        const newRows = dataSource.map((row: any) => {\r\n            const entries = Object.entries(row);\r\n            const draggedEntry = entries.splice(draggedColIndex, 1)[0];\r\n            entries.splice(targetIndex, 0, draggedEntry);\r\n            return Object.fromEntries(entries); // Convert back to object\r\n        });\r\n\r\n        // Update state with new headers, rows, and reset draggedColIndex\r\n        this.headers = newHeaders;\r\n        this.dataSource = newRows;\r\n        this.draggedColIndex = null;\r\n        this.selectedRows = [];\r\n    }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "draggedColIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "dragRows",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FieldBuilder",
            "id": "class-FieldBuilder-4848f8bd5c11856e14d479c2709c25dc3fd6fb5c200c58ffc626a39a9064983e1bcdee1409f4efe935471edb4ac51d5de93307a81b9bc517a7a152e89bab2c69",
            "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, FormControl, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Identifiable, TYPE, VALUE } from './identifiable';\r\n\r\nexport declare type AttributeEvent = (field: Field, event?: any) => void;\r\n\r\nexport declare type FieldSteps = Identifiable & {\r\n    [additionalProperties: string]: any;\r\n} & {\r\n    step: number;\r\n    label: string;\r\n    active: boolean;\r\n};\r\n\r\nexport declare type FieldOptions = Identifiable & {\r\n    [additionalProperties: string]: any;\r\n} & {\r\n    value: string | boolean | number;\r\n    label: string;\r\n    checked?: boolean;\r\n    description?: string;\r\n    category?: string;\r\n};\r\n\r\nexport type Field<\r\n    Props = FieldProps & {\r\n        [additionalProperties: string]: any;\r\n    }\r\n> = Identifiable & {\r\n    type: TYPE;\r\n    key: string;\r\n    value: VALUE;\r\n    description?: string;\r\n    errorMessage?: string;\r\n    hint?: string;\r\n    label?: string;\r\n    placeholder?: string;\r\n    showError?: boolean;\r\n    validation?: ValidatorFn[] | null;\r\n    disabled?: boolean;\r\n    props?: Props;\r\n    formControl?: AbstractControl | { [key: string]: AbstractControl };\r\n};\r\n\r\nexport type FieldProps = {\r\n    autocomplete?: string;\r\n    appearance?: string;\r\n    class?: string;\r\n    checked?: boolean;\r\n    errorMessage?: string;\r\n    labelClass?: string;\r\n    inputClass?: string;\r\n    options?: FieldOptions[];\r\n    rows?: number;\r\n    cols?: number;\r\n    max?: number;\r\n    min?: number;\r\n    minLength?: number;\r\n    isMultipleTag?: boolean;\r\n    pattern?: string | RegExp;\r\n    required?: boolean;\r\n    tabindex?: number;\r\n    attributes?: {\r\n        [key: string]: string | number;\r\n    };\r\n    step?: number;\r\n    focus?: AttributeEvent;\r\n    blur?: AttributeEvent;\r\n    keyup?: AttributeEvent;\r\n    keydown?: AttributeEvent;\r\n    click?: AttributeEvent;\r\n    change?: AttributeEvent;\r\n    keypress?: AttributeEvent;\r\n};\r\n\r\nexport class FieldBuilder {\r\n    private static idCounter = 0;\r\n\r\n    private static generateId(): string {\r\n        return `field_${this.idCounter++}`;\r\n    }\r\n\r\n    static createField(\r\n        type: TYPE,\r\n        key: string,\r\n        value: any,\r\n        label?: string,\r\n        placeholder?: string,\r\n        props?: FieldProps,\r\n        description?: string,\r\n        validation?: ValidatorFn[]\r\n    ): Field {\r\n        const id = this.generateId();\r\n        const field: Field = {\r\n            id,\r\n            type,\r\n            key,\r\n            value,\r\n            validation: validation || [],\r\n            label: label || '',\r\n            placeholder: placeholder || '',\r\n            description: description || '',\r\n            props: props || {},\r\n        };\r\n        const addedValidations = validation || [];\r\n        field.validation = props?.required ? [Validators.required, ...addedValidations] : field.validation;\r\n        field.formControl = field.type === 'checkbox' ? this.checkboxFormFields(field) : new FormControl(field.value, field.validation);\r\n        return field;\r\n    }\r\n\r\n    static validators = {\r\n        required: (required: boolean) => (required ? Validators.required : []),\r\n        email: (email: boolean) => (email ? Validators.email : []),\r\n        pattern: (pattern: string | RegExp) => (pattern ? Validators.pattern(pattern) : []),\r\n    };\r\n\r\n    static createOptionsField(\r\n        type: TYPE,\r\n        key: string,\r\n        label: string,\r\n        placeholder: string,\r\n        options: FieldOptions[],\r\n        props?: FieldProps,\r\n        description?: string\r\n    ): Field {\r\n        const id = this.generateId();\r\n        const field: Field = {\r\n            id,\r\n            type,\r\n            key,\r\n            value: '', // No initial value for options field\r\n            label,\r\n            placeholder,\r\n            description: description || '',\r\n            props: {\r\n                options,\r\n                ...props,\r\n            },\r\n        };\r\n        const addedValidations = field.validation || [];\r\n        field.validation = props?.required ? [Validators.required, ...addedValidations] : field.validation;\r\n        field.formControl = field.type === 'checkbox' ? this.checkboxFormFields(field) : new FormControl(field.value, field.validation);\r\n        return field;\r\n    }\r\n\r\n    static checkboxFormFields(field: Field): { [key: string]: AbstractControl } {\r\n        const formControls: { [key: string]: AbstractControl } = {};\r\n        field.props?.options?.forEach((option) => {\r\n            formControls[option.id] = new FormControl('');\r\n        });\r\n        return formControls;\r\n    }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "idCounter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123,
                        126
                    ]
                },
                {
                    "name": "validators",
                    "defaultValue": "{\r\n        required: (required: boolean) => (required ? Validators.required : []),\r\n        email: (email: boolean) => (email ? Validators.email : []),\r\n        pattern: (pattern: string | RegExp) => (pattern ? Validators.pattern(pattern) : []),\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkboxFormFields",
                    "args": [
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createField",
                    "args": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "validation",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validation",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createOptionsField",
                    "args": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "FieldOptions[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "FieldOptions[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ImperativeObservable",
            "id": "class-ImperativeObservable-dad59061df87f3e2e6f97e8afc83624a63fc979cce763b724eb5ef73f1000c1e0448aaa110953e9aaf2b7225fe171db1dcaec1c4a2d0bec137e4d629e4731ad4",
            "file": "projects/ng-lib/src/lib/utils/imperative-observable.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport class ImperativeObservable<T> {\r\n  private _subject: BehaviorSubject<T>;\r\n  private _change$: Observable<T>;\r\n\r\n  constructor(initialValue: T) {\r\n    this._subject = new BehaviorSubject<T>(initialValue);\r\n    this._change$ = this._subject.asObservable();\r\n  }\r\n\r\n  get value(): T {\r\n    return this._subject.value;\r\n  }\r\n  set value(value: T) {\r\n    this._subject.next(value);\r\n  }\r\n\r\n  get change$() {\r\n    return this._change$;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialValue",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "initialValue",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "_change$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_subject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<T>",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T",
                        "line": 12
                    }
                },
                "change$": {
                    "name": "change$",
                    "getSignature": {
                        "name": "change$",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                }
            },
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaginationUtil",
            "id": "class-PaginationUtil-e91c4d2dcc2e8a6c2a93bdef235e83d64e8515c5a49eacf4614d2e19d6023be29e206597fe465e4e4261c2c7ffc8ce2106149719cf629ba79970bf0f5205ef19",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/pagination.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TableState } from '../models';\r\n\r\nexport class PaginationUtil {\r\n    initialState: TableState;\r\n\r\n    constructor(initialState: TableState) {\r\n        this.initialState = initialState;\r\n        this.initialState.pagination.currentPage = 1;\r\n        this.initialState.pagination.totalPages = 0;\r\n        this.initialState.pagination.pageSize = 10;\r\n    }\r\n\r\n    // @ts-ignore\r\n    setDataSourcePagination = (action: any) => {\r\n        // Calculate totalPages based on the full dataset (initialDataSource)\r\n        const length = this.initialState.initialDataSource.length;\r\n        const pageSize = this.initialState.pagination.pageSize;\r\n        this.initialState.pagination.totalPages = Math.ceil(length / pageSize);\r\n\r\n        // Check if there's data in the initialDataSource to paginate\r\n        if (this.initialState.initialDataSource.length > 0) {\r\n            // Use initialDataSource to slice the data for current page\r\n            this.initialState.dataSource = this.initialState.initialDataSource.slice(\r\n                (this.initialState.pagination.currentPage - 1) * this.initialState.pagination.pageSize,\r\n                this.initialState.pagination.currentPage * this.initialState.pagination.pageSize\r\n            );\r\n        }\r\n    };\r\n\r\n    updateChangedCurrentPage = (action: any) => {\r\n        // Update currentPage in pagination\r\n        this.initialState.pagination.currentPage = action.payload;\r\n\r\n        // Update dataSource based on currentPage\r\n        this.setDataSourcePagination(action);\r\n    };\r\n\r\n    setPaginationState = (pageSize: number, currentPage: number) => {\r\n        // Set pageSize and currentPage in pagination state\r\n        this.initialState.pagination.pageSize = pageSize;\r\n        this.initialState.pagination.currentPage = currentPage;\r\n\r\n        // Recalculate totalPages based on the new pageSize\r\n        this.initialState.pagination.totalPages = Math.ceil(this.initialState.initialDataSource.length / pageSize);\r\n\r\n        // Update dataSource based on the new currentPage and pageSize\r\n        this.setDataSourcePagination({});\r\n    };\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialState",
                        "type": "TableState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "initialState",
                        "type": "TableState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableState",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "setDataSourcePagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "setPaginationState",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "updateChangedCurrentPage",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortRowsUtil",
            "id": "class-SortRowsUtil-aa7170209d1a03b5eddc364439fb8fe0ac312e053f10adcce35678f3e8fe0e7565042cccf0e53dcac295c9965f61c8d67d814783bae855248ee51706513c50e4",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sort-rows.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SortRowsUtil {\r\n    isDate(value: any) {\r\n        const date = new Date(value);\r\n        return !isNaN(date.getTime());\r\n    }\r\n\r\n    sortRows(rows: any[], sortConfig: { key: string; direction: string }) {\r\n        const lowerCaseSortKey = sortConfig.key.toLowerCase();\r\n        return rows.sort((a, b) => {\r\n            const aValue = String(a[lowerCaseSortKey]).toLowerCase();\r\n            const bValue = String(b[lowerCaseSortKey]).toLowerCase();\r\n\r\n            // Check if both values are valid dates\r\n            if (this.isDate(aValue) && this.isDate(bValue)) {\r\n                const dateA = new Date(aValue) as any;\r\n                const dateB = new Date(bValue) as any;\r\n                return sortConfig.direction === 'ascending' ? dateA - dateB : dateB - dateA;\r\n            } else {\r\n                // If not dates, compare as strings\r\n                if (aValue < bValue) return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                if (aValue > bValue) return sortConfig.direction === 'ascending' ? 1 : -1;\r\n            }\r\n            return 0; // Default case\r\n        });\r\n    }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "isDate",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortRows",
                    "args": [
                        {
                            "name": "rows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortConfig",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortConfig",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableBuilder",
            "id": "class-TableBuilder-3bbfcecd3d6e653c7b29484148b1b2a0d9ce988a14e44c3161aa53710a47899326d47b71f0b8df3fa9911884f593593ed6f4765d616609fe30c942efc291c9fb",
            "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Field } from './field';\r\nimport { Observable } from 'rxjs';\r\nimport { TABLE_TYPE } from './identifiable';\r\n\r\nexport declare type RowData = {\r\n    [additionalProperties: string]: any;\r\n} & {\r\n    [key: string]: any;\r\n    selected?: boolean;\r\n    id?: string;\r\n};\r\n\r\nexport type TableProps = {\r\n    height?: string;\r\n    title?: string;\r\n    caption?: string;\r\n    buttonText?: string;\r\n    buttonLink?: any[];\r\n    buttonAction?: any;\r\n    selectable?: boolean;\r\n    attributes?: {\r\n        [key: string]: string | number;\r\n    };\r\n    isField?: boolean;\r\n    field?: Field;\r\n    fieldCol?: string;\r\n};\r\n\r\nexport type Table = {\r\n    [additionalProperties: string]: any;\r\n} & {\r\n    type: TABLE_TYPE;\r\n    headers: string[];\r\n    rows: Observable<RowData[]>;\r\n    props?: TableProps;\r\n};\r\n\r\nexport class TableBuilder {\r\n    static createTable(type: TABLE_TYPE, headers: string[], rows: Observable<RowData[]>, props?: TableProps): Table {\r\n        const table = {\r\n            type,\r\n            headers: headers || [],\r\n            rows: rows,\r\n            props: props || {},\r\n        };\r\n        return table;\r\n    }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "createTable",
                    "args": [
                        {
                            "name": "type",
                            "type": "TABLE_TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rows",
                            "type": "Observable<RowData[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "TableProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Table",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TABLE_TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rows",
                            "type": "Observable<RowData[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "TableProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AdkDatasource",
            "id": "directive-AdkDatasource-baf4998c06985e852261aafa315e21e1f8c95ae85fae707fc0de28917021282f6e5fafd1fc1b41d948d9d141a5f10f74c320465ddb0c2ea42216f69a3a624456",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/data-source.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AdkList, AdkPagination, AdkSelection } from '../directives';\r\nimport { Directive, computed, inject } from '@angular/core';\r\nimport { ID, Identifiable } from '../models';\r\nimport { Observable, map } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[adk-datasource]',\r\n  exportAs: 'adkDatasource',\r\n  standalone: true,\r\n  /**\r\n   * Important! Angular Directive composition API in action!\r\n   */\r\n  hostDirectives: [\r\n    // { directive: AdkHttpClient, inputs: ['adkUrl', 'adkPage', 'adkLimit'] },\r\n    AdkList,\r\n    AdkSelection,\r\n    AdkPagination,\r\n  ],\r\n})\r\nexport class AdkDatasource<T extends Identifiable> {\r\n  // #httpClient = inject(AdkHttpClient, { self: true });\r\n  #list = inject<AdkList<T>>(AdkList, { self: true });\r\n  #selection = inject(AdkSelection, { self: true });\r\n  #pagination = inject(AdkPagination, { self: true });\r\n\r\n  /**\r\n   * The list of datasource items\r\n   */\r\n  readonly items = this.#list.items;\r\n\r\n  /**\r\n   * Check if we are on the first page\r\n   */\r\n  readonly first = this.#pagination.first;\r\n\r\n  /**\r\n   * Check if we are on the last page\r\n   */\r\n  readonly last = this.#pagination.last;\r\n\r\n  /**\r\n   * The selected items of the selected datasource\r\n   */\r\n  readonly selectedItems = computed(() => this.items().filter((item) => this.#selection.selected(item.id)));\r\n\r\n  async fetch(data: Observable<any[]>): Promise<void> {\r\n    data\r\n      .pipe(\r\n        map((items) => {\r\n          return items.map((item, i) => {\r\n            return {\r\n              ...item,\r\n              id: item.id ?? i,\r\n            };\r\n          });\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (value: any[]) => this.#list.add(...value),\r\n        complete: () => console.info('Fetched data successfully!'),\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Select datasource by their ids\r\n   * @param ids\r\n   */\r\n  select(...ids: ID[]): void {\r\n    this.#selection.select(...ids);\r\n  }\r\n\r\n  /**\r\n   * Select all datasource\r\n   */\r\n  selectAll(): void {\r\n    this.#selection.select(...this.items().map((todo) => todo.id));\r\n  }\r\n\r\n  /**\r\n   * Deselect all datasource\r\n   */\r\n  reset(): void {\r\n    this.#selection.clear();\r\n  }\r\n\r\n  /**\r\n   * Check if a todo is selected\r\n   * @param id\r\n   */\r\n  selected(id: ID): boolean {\r\n    return this.#selection.selected(id);\r\n  }\r\n\r\n  /**\r\n   * Deselect a todo by its id\r\n   * @param id\r\n   */\r\n  deselect(id: ID): void {\r\n    this.#selection.deselect(id);\r\n  }\r\n}\r\n",
            "selector": "[adk-datasource]",
            "providers": [],
            "exportAs": "adkDatasource",
            "hostDirectives": [
                {
                    "name": "AdkList"
                },
                {
                    "name": "AdkSelection"
                },
                {
                    "name": "AdkPagination"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#list",
                    "defaultValue": "inject<AdkList<T>>(AdkList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#pagination",
                    "defaultValue": "inject(AdkPagination, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#selection",
                    "defaultValue": "inject(AdkSelection, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "first",
                    "defaultValue": "this.#pagination.first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if we are on the first page</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nCheck if we are on the first page\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#list.items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The list of datasource items</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nThe list of datasource items\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "last",
                    "defaultValue": "this.#pagination.last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if we are on the last page</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nCheck if we are on the last page\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "computed(() => this.items().filter((item) => this.#selection.selected(item.id)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The selected items of the selected datasource</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nThe selected items of the selected datasource\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deselect",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect a todo by its id\n",
                    "description": "<p>Deselect a todo by its id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2334,
                                "end": 2336,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2328,
                                "end": 2333,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "data",
                            "type": "Observable<any[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Observable<any[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect all datasource\n",
                    "description": "<p>Deselect all datasource</p>\n"
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect datasource by their ids\n",
                    "description": "<p>Select datasource by their ids</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1810,
                                "end": 1813,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ids"
                            },
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1804,
                                "end": 1809,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect all datasource\n",
                    "description": "<p>Select all datasource</p>\n"
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if a todo is selected\n",
                    "description": "<p>Check if a todo is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2192,
                                "end": 2194,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2186,
                                "end": 2191,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkDraggableDirective",
            "id": "directive-AdkDraggableDirective-3fce6cf9f75958a9868d0c85ac92c5d3a36ab5dc3573115e266a69129ce2da2d02bb59156aeadf058e84c41336b1820f8106c7c241cb8a6359e840dd1fe25d68",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/drag.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Output, signal } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[adkDraggable]',\r\n    standalone: true,\r\n})\r\nexport class AdkDraggableDirective {\r\n    #isDragging = signal(false);\r\n\r\n    @Output() dragStart = new EventEmitter<DragEvent>();\r\n    @Output() dragEnd = new EventEmitter<DragEvent>();\r\n\r\n    @HostBinding('draggable') draggable = true;\r\n\r\n    @HostBinding('class.dragging')\r\n    get isDragging() {\r\n        return this.#isDragging();\r\n    }\r\n\r\n    @HostListener('dragstart', ['$event'])\r\n    onDragStart(event: DragEvent) {\r\n        this.#isDragging.set(true);\r\n        this.dragStart.emit(event);\r\n    }\r\n\r\n    @HostListener('dragend', ['$event'])\r\n    onDragEnd(event: DragEvent) {\r\n        this.#isDragging.set(false);\r\n        this.dragEnd.emit(event);\r\n    }\r\n}\r\n",
            "selector": "[adkDraggable]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "dragEnd",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                },
                {
                    "name": "dragStart",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.dragging",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "propertiesClass": [
                {
                    "name": "#isDragging",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'draggable'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragend', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragstart', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "isDragging": {
                    "name": "isDragging",
                    "getSignature": {
                        "name": "isDragging",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            }
        },
        {
            "name": "AdkDroppableDirective",
            "id": "directive-AdkDroppableDirective-8bc2cc032599db85f4c7e5f30bf94aa1280e07a77195d4cdc631b0fc0395e474bc1366b97ca3924b5a72ca06e3c4fe871b10e797c230ad6cdd646c55547e1a98",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/drop.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Output, signal } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[adkDroppable]',\r\n    standalone: true,\r\n})\r\nexport class AdkDroppableDirective {\r\n    #isOver = signal(false);\r\n\r\n    @Output() drop = new EventEmitter<DragEvent>();\r\n\r\n    @HostBinding('class.over')\r\n    get isOver() {\r\n        return this.#isOver();\r\n    }\r\n\r\n    @HostListener('dragover', ['$event'])\r\n    onDragOver(event: DragEvent) {\r\n        event.preventDefault();\r\n        this.#isOver.set(true);\r\n    }\r\n\r\n    @HostListener('dragleave', ['$event'])\r\n    onDragLeave(_event: DragEvent) {\r\n        this.#isOver.set(false);\r\n    }\r\n\r\n    @HostListener('drop', ['$event'])\r\n    onDrop(event: DragEvent) {\r\n        event.preventDefault();\r\n        this.#isOver.set(false);\r\n        this.drop.emit(event);\r\n    }\r\n}\r\n",
            "selector": "[adkDroppable]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "drop",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.over",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "#isOver",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "isOver": {
                    "name": "isOver",
                    "getSignature": {
                        "name": "isOver",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            }
        },
        {
            "name": "AdkFieldList",
            "id": "directive-AdkFieldList-be4ec88d1e16d2edd4e28f871c51e671f6af6b15f1238637f25c153b3e17ea885f18e7293a7facd21e284fc8b8968250e600979e139f0be98cac5864ee9e22ad",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/field-list.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\r\nimport { Field, ID } from '../models';\r\n\r\n@Directive({\r\n  selector: '[adz-field-builder]',\r\n  exportAs: 'adkFieldList',\r\n  standalone: true,\r\n})\r\nexport class AdkFieldList<T extends Field> {\r\n  #fields = signal<Record<ID, T>>({});\r\n\r\n  readonly fields = computed(() => Object.values(this.#fields()));\r\n\r\n  /**\r\n   * Get a field by id\r\n   * @param id\r\n   */\r\n  get(id: ID): T | undefined {\r\n    return this.#fields()[id];\r\n  }\r\n\r\n  /**\r\n   * Add new fields to the list\r\n   * @param newItems\r\n   */\r\n  add(...newFields: T[]): void {\r\n    this.#fields.update((fields) => newFields.reduce((accumulator, field) => ({ ...accumulator, [field.id]: field }), fields));\r\n  }\r\n\r\n  /**\r\n   * Update an field in the list\r\n   * @param field\r\n   */\r\n  update(field: T): void {\r\n    this.#fields.update((fields) => ({ ...fields, [field.id]: field }));\r\n  }\r\n\r\n  /**\r\n   * Remove an field from the list\r\n   * @param field\r\n   */\r\n  remove(field: T): void {\r\n    this.#fields.update((fields) => {\r\n      const { [field.id]: _, ...rest } = fields;\r\n      return rest;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear all fields from the list\r\n   */\r\n  clear(): void {\r\n    this.#fields.set({});\r\n  }\r\n}\r\n",
            "selector": "[adz-field-builder]",
            "providers": [],
            "exportAs": "adkFieldList",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#fields",
                    "defaultValue": "signal<Record<ID, T>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fields",
                    "defaultValue": "computed(() => Object.values(this.#fields()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newFields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd new fields to the list\n",
                    "description": "<p>Add new fields to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": "newFields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all fields from the list\n",
                    "description": "<p>Clear all fields from the list</p>\n"
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet a field by id\n",
                    "description": "<p>Get a field by id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 409,
                                "end": 411,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 403,
                                "end": 408,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "field",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove an field from the list\n",
                    "description": "<p>Remove an field from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 961,
                                "end": 966,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "field"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 955,
                                "end": 960,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "field",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate an field in the list\n",
                    "description": "<p>Update an field in the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 783,
                                "end": 788,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "field"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 777,
                                "end": 782,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkFields",
            "id": "directive-AdkFields-0ab37d826ad97bd3280f8a50d26848517ff5ebab8608d71c8689181e22961f0e6ed304a15504ddbd8d81296eb5bd820f2f49ae9277e2baf76204c22871caf581",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/field.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, inject } from '@angular/core';\r\n\r\nimport { AdkFieldList } from './field-list';\r\nimport { Field } from '../models';\r\n\r\n@Directive({\r\n  selector: '[adk-fields]',\r\n  exportAs: 'adkFields',\r\n  standalone: true,\r\n  hostDirectives: [AdkFieldList],\r\n})\r\nexport class AdkFields<T extends Field> {\r\n  #fields: AdkFieldList<T> = inject<AdkFieldList<T>>(AdkFieldList, { self: true });\r\n\r\n  /**\r\n   * The list of fields\r\n   */\r\n  readonly items = this.#fields.fields;\r\n\r\n  /**\r\n   * Set fields\r\n   */\r\n  async setFields(fields: T[]): Promise<void> {\r\n    this.#fields.add(...fields);\r\n  }\r\n}\r\n",
            "selector": "[adk-fields]",
            "providers": [],
            "exportAs": "adkFields",
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#fields",
                    "defaultValue": "inject<AdkFieldList<T>>(AdkFieldList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdkFieldList<T>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#fields.fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The list of fields</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nThe list of fields\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet fields\n",
                    "description": "<p>Set fields</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkFormGroup",
            "id": "directive-AdkFormGroup-bde7c37931a03eca467ccf5cba67dda08ac6cf9d9f56507ccf7f31e191a800ba6602c0608b1f929a5b58251fd62141fce024882d49e2e7c7c18f7697f58b5606",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/form-group.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AbstractControl, FormGroup } from '@angular/forms';\r\nimport { Directive, WritableSignal, signal } from '@angular/core';\r\nimport { Field, FieldOptions } from '../models';\r\n\r\n@Directive({\r\n    selector: '[adk-form-group]',\r\n    exportAs: 'adkFormGroup',\r\n    standalone: true,\r\n})\r\nexport class AdkFormGroup<T extends Field> {\r\n    #formGroup = signal<FormGroup<any>>(new FormGroup({}));\r\n\r\n    /**\r\n     * The form group\r\n     */\r\n    formGroup: WritableSignal<FormGroup<any>> = this.#formGroup;\r\n\r\n    /**\r\n     * Set the form group\r\n     */\r\n    setFormGroup(fields: T[]): void {\r\n        const formControls = fields.reduce((accumulator: any, field) => {\r\n            if (field.formControl instanceof AbstractControl) {\r\n                accumulator[field.key] = field.formControl;\r\n            } else if (field.formControl instanceof Object) {\r\n                // object of form controls\r\n                field.props?.options?.forEach((option: FieldOptions) => {\r\n                    const key = option.id;\r\n                    accumulator[key] = (field.formControl as { [key: string]: AbstractControl<any, any> })[key];\r\n                });\r\n            }\r\n            return accumulator;\r\n        }, {});\r\n\r\n        const formGroup = new FormGroup(formControls);\r\n        this.#formGroup.set(formGroup);\r\n    }\r\n\r\n    /**\r\n     * Reset the form group\r\n     */\r\n    reset(): void {\r\n        this.#formGroup.set(new FormGroup({}));\r\n    }\r\n}\r\n",
            "selector": "[adk-form-group]",
            "providers": [],
            "exportAs": "adkFormGroup",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "signal<FormGroup<any>>(new FormGroup({}))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formGroup",
                    "defaultValue": "this.#formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<FormGroup<any>>",
                    "optional": false,
                    "description": "<p>The form group</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nThe form group\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReset the form group\n",
                    "description": "<p>Reset the form group</p>\n"
                },
                {
                    "name": "setFormGroup",
                    "args": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the form group\n",
                    "description": "<p>Set the form group</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkHttpClient",
            "id": "directive-AdkHttpClient-d3ed0a54f7d516c6f4a80b3e9d8db970cd55a0a05872a4e18559958196d1acb79baaea81d48eefad48b5e89cee714eb6bede56bb588fd0a5f98c86d08feedf4e",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/http-client.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, inject, input } from '@angular/core';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[adk-http-client]',\r\n  exportAs: 'adkHttpClient',\r\n  standalone: true,\r\n})\r\nexport class AdkHttpClient {\r\n  #http = inject(HttpClient);\r\n  /**\r\n   * The URL to send the request to\r\n   */\r\n  url = input.required<string>({ alias: 'adkUrl' });\r\n  /**\r\n   * The page to get data from\r\n   */\r\n  page = input(1, { alias: 'adkPage' });\r\n  /**\r\n   * The number of items to get\r\n   */\r\n  limit = input(10, { alias: 'adkLimit' });\r\n  /**\r\n   * Get data from the server\r\n   * @param page\r\n   */\r\n  async get<T>(page = { page: 1, limit: 10 }): Promise<{ total: number; items: T[] }> {\r\n    const searchParams = new URLSearchParams({\r\n      _page: page.page.toString(),\r\n      _per_page: page.limit.toString(),\r\n    }).toString();\r\n\r\n    const response = await firstValueFrom(\r\n      this.#http.get<T[]>(`${this.url()}?${searchParams}`, {\r\n        observe: 'response',\r\n      })\r\n    );\r\n    const total = parseInt(response.headers.get('X-Total-Count') ?? '0', 10);\r\n    const items = response.body!;\r\n\r\n    return { total, items };\r\n  }\r\n}\r\n",
            "selector": "[adk-http-client]",
            "providers": [],
            "exportAs": "adkHttpClient",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "limit",
                    "defaultValue": "input(10, { alias: 'adkLimit' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The number of items to get</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nThe number of items to get\n"
                },
                {
                    "name": "page",
                    "defaultValue": "input(1, { alias: 'adkPage' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The page to get data from</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nThe page to get data from\n"
                },
                {
                    "name": "url",
                    "defaultValue": "input.required<string>({ alias: 'adkUrl' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The URL to send the request to</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nThe URL to send the request to\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "page",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ page: 1, limit: 10 }"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet data from the server\n",
                    "description": "<p>Get data from the server</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 654,
                                "end": 658,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "page"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ page: 1, limit: 10 }",
                            "tagName": {
                                "pos": 648,
                                "end": 653,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkList",
            "id": "directive-AdkList-09da21c84daee56df5aba8d3bb2dd3cfcef846bf16ef1df416a392937b8bd1a93a38e2cf852c88f2c8c4651fd89bb17932b49de0f25cef316989c6220cb852e1",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/list.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\r\nimport { ID, Identifiable } from '../models';\r\n\r\n@Directive({\r\n  selector: '[adz-list]',\r\n  exportAs: 'adkList',\r\n  standalone: true,\r\n})\r\nexport class AdkList<T extends Identifiable> {\r\n  #items = signal<Record<ID, T>>({});\r\n  readonly items = computed(() => Object.values(this.#items()));\r\n\r\n  /**\r\n   * Get an item by id\r\n   * @param id\r\n   */\r\n  get(id: ID): T | undefined {\r\n    return this.#items()[id];\r\n  }\r\n\r\n  /**\r\n   * Add new items to the list\r\n   * @param newItems\r\n   */\r\n  add(...newItems: T[]): void {\r\n    this.#items.update((items) =>\r\n      newItems.reduce((accumulator, item) => {\r\n        return { ...accumulator, [item.id]: item };\r\n      }, items)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update an item in the list\r\n   * @param item\r\n   */\r\n  update(item: T): void {\r\n    this.#items.update((items) => ({ ...items, [item.id]: item }));\r\n  }\r\n\r\n  /**\r\n   * Remove an item from the list\r\n   * @param item\r\n   */\r\n  remove(item: T): void {\r\n    this.#items.update((items) => {\r\n      const { [item.id]: _, ...rest } = items;\r\n      return rest;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear all items from the list\r\n   */\r\n  clear(): void {\r\n    this.#items.set({});\r\n  }\r\n}\r\n",
            "selector": "[adz-list]",
            "providers": [],
            "exportAs": "adkList",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<Record<ID, T>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "computed(() => Object.values(this.#items()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newItems",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd new items to the list\n",
                    "description": "<p>Add new items to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 531,
                                "end": 539,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "newItems"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 525,
                                "end": 530,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all items from the list\n",
                    "description": "<p>Clear all items from the list</p>\n"
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet an item by id\n",
                    "description": "<p>Get an item by id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 399,
                                "end": 401,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 393,
                                "end": 398,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove an item from the list\n",
                    "description": "<p>Remove an item from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 971,
                                "end": 975,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 965,
                                "end": 970,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate an item in the list\n",
                    "description": "<p>Update an item in the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 801,
                                "end": 805,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 795,
                                "end": 800,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkPagination",
            "id": "directive-AdkPagination-f0d41a78558c450f8a1445ba0a9b6b9cc50db0eb450cff1f495e0d923befadf77717c591ff2f921cc6d437ca8458b2ff5af36a624a4d603a5171d548b6547023",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/pagination.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[adk-pagination]',\r\n  exportAs: 'adkPagination',\r\n  standalone: true,\r\n})\r\nexport class AdkPagination {\r\n  #page = signal(1);\r\n  readonly page = computed(() => this.#page());\r\n  readonly limit = signal(10);\r\n  readonly total = signal(0);\r\n\r\n  /**\r\n   * Check if the current page is the first\r\n   */\r\n  first = computed(() => this.#page() === 1);\r\n\r\n  /**\r\n   * Check if the current page is the last\r\n   */\r\n  last = computed(() => this.#page() * this.limit() >= this.total());\r\n\r\n  /**\r\n   * Go to the next page\r\n   */\r\n  next(): void {\r\n    if (this.last()) {\r\n      throw new Error('You are already on the last page');\r\n    }\r\n    this.#page.update((page) => page + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous page\r\n   */\r\n  previous(): void {\r\n    if (this.first()) {\r\n      throw new Error('You are already on the first page');\r\n    }\r\n    this.#page.update((page) => page - 1);\r\n  }\r\n}\r\n",
            "selector": "[adk-pagination]",
            "providers": [],
            "exportAs": "adkPagination",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#page",
                    "defaultValue": "signal(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "first",
                    "defaultValue": "computed(() => this.#page() === 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if the current page is the first</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nCheck if the current page is the first\n"
                },
                {
                    "name": "last",
                    "defaultValue": "computed(() => this.#page() * this.limit() >= this.total())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if the current page is the last</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nCheck if the current page is the last\n"
                },
                {
                    "name": "limit",
                    "defaultValue": "signal(10)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "page",
                    "defaultValue": "computed(() => this.#page())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "total",
                    "defaultValue": "signal(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to the next page\n",
                    "description": "<p>Go to the next page</p>\n"
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to the previous page\n",
                    "description": "<p>Go to the previous page</p>\n"
                }
            ],
            "extends": []
        },
        {
            "name": "AdkSelection",
            "id": "directive-AdkSelection-7f59276b492f3ccb545e55d20676ec10c8b26d937132ab8870f2f9987c83668f540b5871e21429d4ae19ee21f12f7ff961b7e7f56ab0d666d3a8b899483d5d99",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/selection.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\r\n\r\nimport { ID } from '../models';\r\n\r\n@Directive({\r\n  selector: '[adk-selection]',\r\n  exportAs: 'adkSelection',\r\n  standalone: true,\r\n})\r\nexport class AdkSelection {\r\n  #items = signal<Record<ID, boolean>>({});\r\n  count = computed(() => Object.values(this.#items()).filter(Boolean).length);\r\n\r\n  /**\r\n   * Select multiple items\r\n   * @param ids\r\n   */\r\n  select(...ids: ID[]): void {\r\n    this.#items.update((items) => ids.reduce((accumulator, id) => ({ ...accumulator, [id]: true }), items));\r\n  }\r\n\r\n  /**\r\n   * Deselect an item\r\n   * @param id\r\n   */\r\n  deselect(id: ID): void {\r\n    this.#items.update((items) => {\r\n      const { [id]: _, ...rest } = items;\r\n      return rest;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear all selected items\r\n   */\r\n  clear(): void {\r\n    this.#items.set({});\r\n  }\r\n\r\n  /**\r\n   * Check if an item is selected\r\n   * @param id\r\n   */\r\n  selected(id: ID): boolean {\r\n    return this.#items()[id] ?? false;\r\n  }\r\n}\r\n",
            "selector": "[adk-selection]",
            "providers": [],
            "exportAs": "adkSelection",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<Record<ID, boolean>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "count",
                    "defaultValue": "computed(() => Object.values(this.#items()).filter(Boolean).length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all selected items\n",
                    "description": "<p>Clear all selected items</p>\n"
                },
                {
                    "name": "deselect",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect an item\n",
                    "description": "<p>Deselect an item</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 605,
                                "end": 607,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 599,
                                "end": 604,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect multiple items\n",
                    "description": "<p>Select multiple items</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 402,
                                "end": 405,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ids"
                            },
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 396,
                                "end": 401,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if an item is selected\n",
                    "description": "<p>Check if an item is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 911,
                                "end": 913,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 905,
                                "end": 910,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkSorting",
            "id": "directive-AdkSorting-d82e917610a5932f3fc19107a71524136965a303a5963c1dac40a9dd017fda6d5df28c9f105980db0bd6e3941f1ffb9eb5cde6f1875a7a5c8d89030001962f9f",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/sorting.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\r\n\r\nexport interface SortableItem {\r\n    id: string;\r\n    [key: string]: any;\r\n}\r\n\r\n@Directive({\r\n    selector: '[adk-sorting]',\r\n    exportAs: 'adkSorting',\r\n    standalone: true,\r\n})\r\nexport class AdkSorting<T extends SortableItem> {\r\n    #items = signal<T[]>([]);\r\n    #sortKey = signal<string | null>(null);\r\n    #sortDirection = signal<'asc' | 'desc'>('asc');\r\n\r\n    sortedItems = computed(() => {\r\n        const items = [...this.#items()];\r\n        const key = this.#sortKey();\r\n        const direction = this.#sortDirection();\r\n\r\n        if (!key) return items;\r\n\r\n        return items.sort((a, b) => {\r\n            const aValue = a[key];\r\n            const bValue = b[key];\r\n\r\n            if (aValue < bValue) {\r\n                return direction === 'asc' ? -1 : 1;\r\n            } else if (aValue > bValue) {\r\n                return direction === 'asc' ? 1 : -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Add items to the list\r\n     * @param newItems\r\n     */\r\n    add(...newItems: T[]): void {\r\n        this.#items.update((items) => [...items, ...newItems]);\r\n    }\r\n\r\n    /**\r\n     * Set the sorting key and direction\r\n     * @param key\r\n     * @param direction\r\n     */\r\n    sort(key: string, direction: 'asc' | 'desc'): void {\r\n        this.#sortKey.set(key);\r\n        this.#sortDirection.set(direction);\r\n    }\r\n\r\n    /**\r\n     * Clear the sorting\r\n     */\r\n    clearSort(): void {\r\n        this.#sortKey.set(null);\r\n        this.#sortDirection.set('asc');\r\n    }\r\n\r\n    /**\r\n     * Get the current sorting key\r\n     */\r\n    getSortKey(): string | null {\r\n        return this.#sortKey();\r\n    }\r\n\r\n    /**\r\n     * Get the current sorting direction\r\n     */\r\n    getSortDirection(): 'asc' | 'desc' {\r\n        return this.#sortDirection();\r\n    }\r\n}\r\n",
            "selector": "[adk-sorting]",
            "providers": [],
            "exportAs": "adkSorting",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<T[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#sortDirection",
                    "defaultValue": "signal<'asc' | 'desc'>('asc')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#sortKey",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sortedItems",
                    "defaultValue": "computed(() => {\r\n        const items = [...this.#items()];\r\n        const key = this.#sortKey();\r\n        const direction = this.#sortDirection();\r\n\r\n        if (!key) return items;\r\n\r\n        return items.sort((a, b) => {\r\n            const aValue = a[key];\r\n            const bValue = b[key];\r\n\r\n            if (aValue < bValue) {\r\n                return direction === 'asc' ? -1 : 1;\r\n            } else if (aValue > bValue) {\r\n                return direction === 'asc' ? 1 : -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newItems",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd items to the list\n",
                    "description": "<p>Add items to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1073,
                                "end": 1081,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "newItems"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1067,
                                "end": 1072,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clearSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the sorting\n",
                    "description": "<p>Clear the sorting</p>\n"
                },
                {
                    "name": "getSortDirection",
                    "args": [],
                    "optional": false,
                    "returnType": "\"asc\" | \"desc\"",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current sorting direction\n",
                    "description": "<p>Get the current sorting direction</p>\n"
                },
                {
                    "name": "getSortKey",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current sorting key\n",
                    "description": "<p>Get the current sorting key</p>\n"
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "direction",
                            "type": "\"asc\" | \"desc\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the sorting key and direction\n",
                    "description": "<p>Set the sorting key and direction</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1266,
                                "end": 1269,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1260,
                                "end": 1265,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1285,
                                "end": 1294,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "direction"
                            },
                            "type": "\"asc\" | \"desc\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1279,
                                "end": 1284,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkStepperDirective",
            "id": "directive-AdkStepperDirective-0216b60728a243dd2c28ee1e7522b16d6bda3f3777461f7fa979015966c1d4ab02716e99a89d7ea31f892a8a6bf4ab687db68021f98a5d61e20cd01986066ede",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stepper.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Output, EventEmitter, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[adkStepper]',\r\n  exportAs: 'adkStepper',\r\n})\r\nexport class AdkStepperDirective {\r\n  @Output() nextStep = new EventEmitter<void>();\r\n  @Output() previousStep = new EventEmitter<void>();\r\n\r\n  @HostListener('click', ['$event.target']) onClick(target: HTMLElement): void {\r\n    const action = target.getAttribute('data-action');\r\n    if (action === 'next') {\r\n      this.next();\r\n    } else if (action === 'previous') {\r\n      this.previous();\r\n    }\r\n  }\r\n\r\n  next(): void {\r\n    this.nextStep.emit();\r\n  }\r\n\r\n  previous(): void {\r\n    this.previousStep.emit();\r\n  }\r\n}\r\n",
            "selector": "[adkStepper]",
            "providers": [],
            "exportAs": "adkStepper",
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "nextStep",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter"
                },
                {
                    "name": "previousStep",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "AdkExpansionPanelComponent",
            "id": "component-AdkExpansionPanelComponent-3d9453602941246faf5e91eb25443f9c9b8f836eff682be85ede0082e6260095fc5765c1ce0ef842aa1ff7f685f78fab7976a0ce9e8b69b22804039152bec552",
            "file": "projects/ng-lib/src/lib/tw-ui/components/expansion-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-expansion-panel",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative mb-3\">\n  <h6 class=\"mb-0\">\n    <button\n      class=\"relative flex items-center w-full p-4 font-semibold text-left transition-all ease-in border-b border-solid cursor-pointer border-slate-100 text-slate-700 rounded-t-1 group text-dark-500\"\n      (click)=\"togglePanel()\"\n    >\n      <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n      <i\n        class=\"absolute right-0 pt-1 text-base transition-transform fa fa-chevron-down\"\n        [ngClass]=\"{ 'rotate-180': isOpen.change$ | async }\"\n      ></i>\n    </button>\n  </h6>\n  <div\n    class=\"overflow-hidden transition-all duration-300 ease-in-out\"\n    [ngClass]=\"{\n      'h-0 opacity-0': (isOpen.change$ | async) === false,\n      'h-auto opacity-100': isOpen.change$ | async\n    }\"\n  >\n    <div class=\"p-4 text-sm leading-normal text-blue-gray-500/80\">\n      <ng-container *ngTemplateOutlet=\"bodyTemplate\"></ng-container>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'expansionPanelBody'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'expansionPanelHeader'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "new ImperativeObservable(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "togglePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, CommonModule } from '@angular/common';\r\nimport { Component, ContentChild, TemplateRef } from '@angular/core';\r\n\r\nimport { ImperativeObservable } from '../../utils';\r\n\r\n@Component({\r\n  selector: 'adk-expansion-panel',\r\n  standalone: true,\r\n  imports: [CommonModule, AsyncPipe],\r\n  template: `\r\n    <div class=\"relative mb-3\">\r\n      <h6 class=\"mb-0\">\r\n        <button\r\n          class=\"relative flex items-center w-full p-4 font-semibold text-left transition-all ease-in border-b border-solid cursor-pointer border-slate-100 text-slate-700 rounded-t-1 group text-dark-500\"\r\n          (click)=\"togglePanel()\"\r\n        >\r\n          <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n          <i\r\n            class=\"absolute right-0 pt-1 text-base transition-transform fa fa-chevron-down\"\r\n            [ngClass]=\"{ 'rotate-180': isOpen.change$ | async }\"\r\n          ></i>\r\n        </button>\r\n      </h6>\r\n      <div\r\n        class=\"overflow-hidden transition-all duration-300 ease-in-out\"\r\n        [ngClass]=\"{\r\n          'h-0 opacity-0': (isOpen.change$ | async) === false,\r\n          'h-auto opacity-100': isOpen.change$ | async\r\n        }\"\r\n      >\r\n        <div class=\"p-4 text-sm leading-normal text-blue-gray-500/80\">\r\n          <ng-container *ngTemplateOutlet=\"bodyTemplate\"></ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class AdkExpansionPanelComponent {\r\n  isOpen = new ImperativeObservable(false);\r\n\r\n  @ContentChild('expansionPanelHeader') headerTemplate!: TemplateRef<any>;\r\n  @ContentChild('expansionPanelBody') bodyTemplate!: TemplateRef<any>;\r\n\r\n  togglePanel(): void {\r\n    this.isOpen.value = !this.isOpen.value;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7e3d260cb47c98099340cb750cbc30b20ec735c02baf85097b1810a2f2842b653717306ed0d94c9718ec6f2cc99616fe35d1805f14fdf521f812e7cb55c9d3eb",
            "file": "projects/ng-lib/src/lib/tw-ui/components/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-button",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n        width: 100%;\n      }\n      button:disabled {\n        cursor: not-allowed;\n        opacity: 0.5;\n      }\n    "
            ],
            "template": "<button\n  [ngClass]=\"getButtonClasses()\"\n  class=\"select-none rounded-lg bg-blue-500 py-2 px-4 text-center align-middle font-sans text-xs font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none w-full {{\n    disabled ? (disabledStyle$ | async) : (color$ | async)\n  }}\"\n  [disabled]=\"disabled\"\n  type=\"button\"\n>\n  <ng-content></ng-content>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "'bg-blue-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"warn\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledEffect",
                    "defaultValue": "'opacity-50 cursor-not-allowed opacity-50 disabled:cursor-not-allowed disabled:opacity-50'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hoverEffect",
                    "defaultValue": "'hover:shadow-lg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'text-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "\"filled\" | \"gradient\" | \"outlined\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "btnStyle",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "colorClasses",
                    "defaultValue": "{\r\n    primary: 'bg-blue-500',\r\n    secondary: 'bg-gray-700',\r\n    success: 'bg-green-500',\r\n    warn: 'bg-amber-500',\r\n    danger: 'bg-red-500',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "disabledStyle",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "variantClasses",
                    "defaultValue": "{\r\n    filled: 'text-white shadow-md shadow-gray-900/10',\r\n    gradient: 'bg-gradient-to-r from-{color}-500 to-{color}-600 text-white',\r\n    outlined: 'border border-{color}-500 text-{color}-500 hover:bg-{color}-500 hover:text-white',\r\n    text: 'text-{color}-500 hover:text-{color}-600',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getButtonClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { CommonModule, NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'adk-button',\r\n  standalone: true,\r\n  imports: [CommonModule, NgClass],\r\n  template: `\r\n    <button\r\n      [ngClass]=\"getButtonClasses()\"\r\n      class=\"select-none rounded-lg bg-blue-500 py-2 px-4 text-center align-middle font-sans text-xs font-bold uppercase text-white shadow-md shadow-gray-900/10 transition-all hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none w-full {{\r\n        disabled ? (disabledStyle$ | async) : (color$ | async)\r\n      }}\"\r\n      [disabled]=\"disabled\"\r\n      type=\"button\"\r\n    >\r\n      <ng-content></ng-content>\r\n    </button>\r\n  `,\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n      }\r\n      button:disabled {\r\n        cursor: not-allowed;\r\n        opacity: 0.5;\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ButtonComponent implements OnInit, OnChanges {\r\n  @Input() disabled!: boolean;\r\n  @Input() variant: 'filled' | 'gradient' | 'outlined' | 'text' = 'filled';\r\n  @Input() color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger' = 'primary';\r\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\r\n  @Input() customClasses = '';\r\n  @Input() bgColor = 'bg-blue-500';\r\n  @Input() textColor = 'text-white';\r\n  @Input() hoverEffect = 'hover:shadow-lg';\r\n  @Input() disabledEffect = 'opacity-50 cursor-not-allowed opacity-50 disabled:cursor-not-allowed disabled:opacity-50';\r\n\r\n  btnStyle = new BehaviorSubject<string>('');\r\n  disabledStyle = new BehaviorSubject<string>('');\r\n\r\n  get color$(): Observable<string> {\r\n    return this.btnStyle.asObservable();\r\n  }\r\n\r\n  get disabledStyle$(): Observable<string> {\r\n    return this.disabledStyle.asObservable();\r\n  }\r\n\r\n  private readonly colorClasses = {\r\n    primary: 'bg-blue-500',\r\n    secondary: 'bg-gray-700',\r\n    success: 'bg-green-500',\r\n    warn: 'bg-amber-500',\r\n    danger: 'bg-red-500',\r\n  };\r\n\r\n  private readonly variantClasses = {\r\n    filled: 'text-white shadow-md shadow-gray-900/10',\r\n    gradient: 'bg-gradient-to-r from-{color}-500 to-{color}-600 text-white',\r\n    outlined: 'border border-{color}-500 text-{color}-500 hover:bg-{color}-500 hover:text-white',\r\n    text: 'text-{color}-500 hover:text-{color}-600',\r\n  };\r\n\r\n  ngOnInit(): void {\r\n    this.getButtonClasses();\r\n  }\r\n\r\n  ngOnChanges({ disabled, variant, color, customClasses, bgColor, textColor, hoverEffect, disabledEffect }: SimpleChanges) {\r\n    if (variant || color || customClasses || bgColor || textColor || hoverEffect || disabledEffect || disabled) {\r\n      this.getButtonClasses();\r\n    }\r\n  }\r\n\r\n  getButtonClasses(): string {\r\n    const baseClasses =\r\n      'select-none rounded-lg py-2 px-4 text-center align-middle font-sans text-xs font-bold uppercase transition-all w-full';\r\n    const variantClass = this.variantClasses[this.variant] || this.variantClasses['filled'];\r\n    const colorClass = this.colorClasses[this.color] || this.colorClasses['primary'];\r\n    const hoverClass = this.disabled ? '' : this.hoverEffect;\r\n    const disabledClass = this.disabled ? this.disabledEffect : '';\r\n\r\n    return `${baseClasses} ${colorClass} ${variantClass} ${hoverClass} ${disabledClass} ${this.customClasses}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n        width: 100%;\n      }\n      button:disabled {\n        cursor: not-allowed;\n        opacity: 0.5;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "color$": {
                    "name": "color$",
                    "getSignature": {
                        "name": "color$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 49
                    }
                },
                "disabledStyle$": {
                    "name": "disabledStyle$",
                    "getSignature": {
                        "name": "disabledStyle$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 53
                    }
                }
            }
        },
        {
            "name": "ButtonWrapperComponent",
            "id": "component-ButtonWrapperComponent-4852606cf4ef914022af251c196399a65a6dc76f28ea97882cb6773c04994d1fbb0d9c1c90240efcad709f2203969ff3a5c5614d435842ede1cd38b4e5ca2892",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<adk-button [disabled]=\"disabled\" [color]=\"color\" [variant]=\"variant\"> Content for ng-content goes here </adk-button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"warn\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"filled\" | \"gradient\" | \"outlined\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "handleButtonRouteLink",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { type Meta, type StoryObj } from '@storybook/angular';\r\n\r\nimport { ButtonComponent } from '../button.component';\r\n\r\nimport { expect } from '@storybook/jest';\r\nimport { userEvent, within } from '@storybook/test';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'storybook-button-wrapper',\r\n    standalone: true,\r\n    imports: [CommonModule, ButtonComponent],\r\n    template: ` <adk-button [disabled]=\"disabled\" [color]=\"color\" [variant]=\"variant\"> Content for ng-content goes here </adk-button> `,\r\n})\r\nclass ButtonWrapperComponent {\r\n    @Input() disabled = false;\r\n    @Input() variant: 'filled' | 'gradient' | 'outlined' | 'text' = 'filled';\r\n    @Input() color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger' = 'primary';\r\n    @Output() handleButtonRouteLink = new EventEmitter();\r\n}\r\nconst meta: Meta<ButtonWrapperComponent> = {\r\n    component: ButtonWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Button',\r\n    tags: ['autodocs'],\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<ButtonWrapperComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'primary',\r\n    },\r\n};\r\n\r\nexport const Secondary: Story = {\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'secondary',\r\n    },\r\n};\r\n\r\nexport const Success: Story = {\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'success',\r\n    },\r\n};\r\n\r\nexport const Danger: Story = {\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'danger',\r\n    },\r\n};\r\n\r\nexport const Warn: Story = {\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'warn',\r\n    },\r\n};\r\n\r\nexport const ButtonActionsTesting: Story = {\r\n    args: {\r\n        disabled: false,\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvasElement.querySelector('adk-button');\r\n        if (button) {\r\n            await userEvent.click(button);\r\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\r\n        }\r\n    },\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardWrapperComponent",
            "id": "component-CardWrapperComponent-cc9476a73c9aec1166cf864112665b19549efeed41160200771d346ef3de73ea5eda5c776eeadddca65ee9fe6b57cfd030e9422d8dd1d2d50bd742da5fa5eb30",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-card-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<tw-card>\n    <h5\n        class=\"adk-card-header block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n    >\n        UI/UX Review Check\n    </h5>\n    <p class=\"adk-card-subtitle block font-sans text-base antialiased font-light leading-relaxed text-inherit\">\n        Card content goes here\n    </p>\n    <div class=\"adk-card-body\">Content for ng-content goes here</div>\n    <div class=\"adk-card-footer\">\n        <adk-button> Read More </adk-button>\n    </div>\n</tw-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { type Meta, type StoryObj } from '@storybook/angular';\r\n\r\nimport { expect } from '@storybook/jest';\r\nimport { userEvent, within } from '@storybook/test';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TwCardComponent } from '../card/tw-card.component';\r\nimport { ButtonComponent } from '../button.component';\r\n\r\n@Component({\r\n    selector: 'storybook-card-wrapper',\r\n    standalone: true,\r\n    imports: [CommonModule, TwCardComponent, ButtonComponent],\r\n    template: `\r\n        <tw-card>\r\n            <h5\r\n                class=\"adk-card-header block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\r\n            >\r\n                UI/UX Review Check\r\n            </h5>\r\n            <p class=\"adk-card-subtitle block font-sans text-base antialiased font-light leading-relaxed text-inherit\">\r\n                Card content goes here\r\n            </p>\r\n            <div class=\"adk-card-body\">Content for ng-content goes here</div>\r\n            <div class=\"adk-card-footer\">\r\n                <adk-button> Read More </adk-button>\r\n            </div>\r\n        </tw-card>\r\n    `,\r\n})\r\nclass CardWrapperComponent {}\r\nconst meta: Meta<CardWrapperComponent> = {\r\n    component: CardWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Card',\r\n    tags: ['autodocs'],\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<CardWrapperComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n\r\nexport const CardActionsTesting: Story = {\r\n    args: {\r\n        disabled: false,\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const card = canvasElement.querySelector('adk-card');\r\n        if (card) {\r\n            await userEvent.click(card);\r\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\r\n        }\r\n    },\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-4b658ded77cbd47cda457b92b0b9548a9628abd0253708f7cdf8b4d1b1f21d9e82f66473a0b8316cddf99cd208fe1661fe376233b68fdcc1ee76ab6e7a51e893",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-checkbox",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "@if (options.length > 0) {\n<div class=\"flex flex-col gap-4\">\n    @for (option of options; track (option.id)) {\n    <div class=\"inline-flex items-center\">\n        <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\n                [checked]=\"formControl[field.key][option.id].value\"\n                [name]=\"option.label\"\n                [id]=\"option.id\"\n                [value]=\"option.value\"\n                [formControl]=\"formControl[field.key][option.id]\"\n                [ngClass]=\"inputClass\"\n                (change)=\"onCheckChange($event, option.id)\"\n            />\n            <span\n                class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    class=\"h-3.5 w-3.5\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"1\"\n                >\n                    <path\n                        fill-rule=\"evenodd\"\n                        d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                        clip-rule=\"evenodd\"\n                    ></path>\n                </svg>\n            </span>\n        </label>\n        <label class=\"mt-px font-light text-gray-700 cursor-pointer select-none\" htmlFor=\"ripple-on\"> {{ option.label }}</label>\n    </div>\n    }\n</div>\n} @else {\n<div class=\"inline-flex items-center\">\n    <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\n        <input\n            type=\"checkbox\"\n            class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\n            [checked]=\"formControl[field.key].value\"\n            [name]=\"id\"\n            [id]=\"id\"\n            [value]=\"field.value\"\n            [formControl]=\"formControl[field.key]\"\n            [ngClass]=\"inputClass\"\n            (change)=\"onCheckChange($event, id)\"\n        />\n        <span\n            class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\n        >\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"h-3.5 w-3.5\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                stroke=\"currentColor\"\n                stroke-width=\"1\"\n            >\n                <path\n                    fill-rule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                    clip-rule=\"evenodd\"\n                ></path>\n            </svg>\n        </span>\n    </label>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "Field",
                    "decorators": []
                },
                {
                    "name": "isChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 101
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCheckChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { AfterViewInit, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, inject } from '@angular/core';\r\n\r\nimport { AdkFormGroup } from '../../directives';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Field } from '../../models';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-checkbox',\r\n    imports: [CommonModule, ReactiveFormsModule],\r\n    template: `\r\n        @if (options.length > 0) {\r\n        <div class=\"flex flex-col gap-4\">\r\n            @for (option of options; track (option.id)) {\r\n            <div class=\"inline-flex items-center\">\r\n                <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\r\n                        [checked]=\"formControl[field.key][option.id].value\"\r\n                        [name]=\"option.label\"\r\n                        [id]=\"option.id\"\r\n                        [value]=\"option.value\"\r\n                        [formControl]=\"formControl[field.key][option.id]\"\r\n                        [ngClass]=\"inputClass\"\r\n                        (change)=\"onCheckChange($event, option.id)\"\r\n                    />\r\n                    <span\r\n                        class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\r\n                    >\r\n                        <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            class=\"h-3.5 w-3.5\"\r\n                            viewBox=\"0 0 20 20\"\r\n                            fill=\"currentColor\"\r\n                            stroke=\"currentColor\"\r\n                            stroke-width=\"1\"\r\n                        >\r\n                            <path\r\n                                fill-rule=\"evenodd\"\r\n                                d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\r\n                                clip-rule=\"evenodd\"\r\n                            ></path>\r\n                        </svg>\r\n                    </span>\r\n                </label>\r\n                <label class=\"mt-px font-light text-gray-700 cursor-pointer select-none\" htmlFor=\"ripple-on\"> {{ option.label }}</label>\r\n            </div>\r\n            }\r\n        </div>\r\n        } @else {\r\n        <div class=\"inline-flex items-center\">\r\n            <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\r\n                    [checked]=\"formControl[field.key].value\"\r\n                    [name]=\"id\"\r\n                    [id]=\"id\"\r\n                    [value]=\"field.value\"\r\n                    [formControl]=\"formControl[field.key]\"\r\n                    [ngClass]=\"inputClass\"\r\n                    (change)=\"onCheckChange($event, id)\"\r\n                />\r\n                <span\r\n                    class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\r\n                >\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"h-3.5 w-3.5\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        fill=\"currentColor\"\r\n                        stroke=\"currentColor\"\r\n                        stroke-width=\"1\"\r\n                    >\r\n                        <path\r\n                            fill-rule=\"evenodd\"\r\n                            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\r\n                            clip-rule=\"evenodd\"\r\n                        ></path>\r\n                    </svg>\r\n                </span>\r\n            </label>\r\n        </div>\r\n        }\r\n    `,\r\n    hostDirectives: [AdkFormGroup],\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class CheckboxComponent implements OnChanges, AfterViewInit {\r\n    @Input() field!: Field;\r\n    @Input() isChecked?: boolean;\r\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n    formControl: { [key: string]: AbstractControl | any } = {};\r\n    #formGroup = inject(AdkFormGroup, { self: true });\r\n\r\n    get formGroup() {\r\n        return this.#formGroup.formGroup();\r\n    }\r\n    get id() {\r\n        return `${this.field.id}`;\r\n    }\r\n\r\n    get props() {\r\n        return this.field?.props;\r\n    }\r\n\r\n    get options() {\r\n        return this.props?.options ?? [];\r\n    }\r\n\r\n    get autocomplete() {\r\n        return this.props?.autocomplete ?? 'off';\r\n    }\r\n\r\n    get label() {\r\n        return this.field.label;\r\n    }\r\n\r\n    get description() {\r\n        return this.field?.description;\r\n    }\r\n\r\n    get placeholder() {\r\n        return this.field.placeholder ?? '';\r\n    }\r\n\r\n    get class() {\r\n        return this.props?.class ?? 'sm:col-span-3';\r\n    }\r\n\r\n    get labelClass() {\r\n        return this.props?.labelClass ?? 'font-medium text-gray-900';\r\n    }\r\n\r\n    get inputClass() {\r\n        return this.props?.inputClass ?? 'h-4 w-4 rounded border-gray-300 text-gray-600 focus:ring-gray-600';\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.initFormControl();\r\n    }\r\n\r\n    ngOnChanges({ field, isChecked }: SimpleChanges): void {\r\n        if (field) {\r\n            this.field = field.currentValue;\r\n            this.initFormControl();\r\n        }\r\n        if (isChecked) {\r\n            this.formControl[this.field.key].patchValue(isChecked.currentValue);\r\n        }\r\n    }\r\n\r\n    private initFormControl(): void {\r\n        this.formControl[this.field.key] = this.field.formControl;\r\n        if (this.options.length > 0) {\r\n            this.options.forEach((option: any) => {\r\n                this.formControl[this.field.key][option.id] = new FormControl(option.value);\r\n            });\r\n            this.#formGroup.setFormGroup([this.field]);\r\n        } else {\r\n            this.formControl[this.field.key] = new FormControl(false);\r\n        }\r\n    }\r\n\r\n    onCheckChange(event: any, id: any) {\r\n        let value = event.target.checked;\r\n        if (this.options.length > 0) {\r\n            this.formControl[this.field.key][id].patchValue(value);\r\n        } else {\r\n            value = this.isChecked !== undefined ? this.isChecked : value;\r\n            this.formControl[this.field.key].patchValue(value);\r\n        }\r\n        this.valueChange.emit(this.field.value);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 104
                    }
                },
                "id": {
                    "name": "id",
                    "getSignature": {
                        "name": "id",
                        "type": "",
                        "returnType": "",
                        "line": 107
                    }
                },
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 111
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 115
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 123
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 127
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 131
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 135
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 139
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 143
                    }
                }
            }
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-3389544a1c7d5c83bf4a456700c28f36f2a5fe25bfdcc05cdf2cee37b273f49c27324a08cda25b785d8d6697700db3c62da493641aee2f3f0e3a818f19fa8882",
            "file": "projects/ng-lib/src/lib/tw-ui/components/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-dialog",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "@if(isOpen) {\n<div\n    class=\"fixed inset-0 z-[999] grid h-screen w-screen place-items-center bg-black bg-opacity-60 backdrop-blur-sm transition-opacity duration-300\"\n>\n    <div class=\"relative mx-auto flex w-full max-w-[24rem] flex-col rounded-xl bg-white text-gray-700 shadow-md\">\n        <ng-content></ng-content>\n    </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "isOpenChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'tw-dialog',\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n    template: `\r\n        @if(isOpen) {\r\n        <div\r\n            class=\"fixed inset-0 z-[999] grid h-screen w-screen place-items-center bg-black bg-opacity-60 backdrop-blur-sm transition-opacity duration-300\"\r\n        >\r\n            <div class=\"relative mx-auto flex w-full max-w-[24rem] flex-col rounded-xl bg-white text-gray-700 shadow-md\">\r\n                <ng-content></ng-content>\r\n            </div>\r\n        </div>\r\n        }\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n                width: 100%;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class DialogComponent {\r\n    @Input() isOpen = false;\r\n    @Output() isOpenChange = new EventEmitter<boolean>();\r\n\r\n    closeDialog() {\r\n        this.isOpen = false;\r\n        this.isOpenChange.emit(this.isOpen);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "DragDropExampleComponent",
            "id": "component-DragDropExampleComponent-43e936d19906b2321bef598017aeb04f4d4821ef48d0abc88128cec3091c9f6d3c7913caa172f60e698a2b4472b53db242c05af5912250c0a2521daf44d3884c",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drag-drop-example",
            "styleUrls": [],
            "styles": [
                "\n            .drag-item {\n                width: 100px;\n                height: 100px;\n                background-color: #f0f0f0;\n                border: 1px solid #ccc;\n                text-align: center;\n                line-height: 100px;\n            }\n            .drop-zone {\n                width: 200px;\n                height: 200px;\n                background-color: #f9f9f9;\n                border: 2px dashed #ccc;\n                margin-top: 20px;\n                text-align: center;\n                line-height: 200px;\n            }\n        "
            ],
            "template": "<div class=\"drag-item\" adkDraggable (dragStart)=\"onDragStart($event)\" (dragEnd)=\"onDragEnd($event)\">Drag me!</div>\n<div class=\"drop-zone\" adkDroppable (drop)=\"onDrop($event)\">\n    {{ droppedItem ? 'Dropped: ' + droppedItem : 'Drop here' }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "droppedItem",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkDraggableDirective",
                    "type": "directive"
                },
                {
                    "name": "AdkDroppableDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { AdkDraggableDirective } from '../drag';\r\nimport { AdkDroppableDirective } from '../drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-drag-drop-example',\r\n    template: `\r\n        <div class=\"drag-item\" adkDraggable (dragStart)=\"onDragStart($event)\" (dragEnd)=\"onDragEnd($event)\">Drag me!</div>\r\n        <div class=\"drop-zone\" adkDroppable (drop)=\"onDrop($event)\">\r\n            {{ droppedItem ? 'Dropped: ' + droppedItem : 'Drop here' }}\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n            .drag-item {\r\n                width: 100px;\r\n                height: 100px;\r\n                background-color: #f0f0f0;\r\n                border: 1px solid #ccc;\r\n                text-align: center;\r\n                line-height: 100px;\r\n            }\r\n            .drop-zone {\r\n                width: 200px;\r\n                height: 200px;\r\n                background-color: #f9f9f9;\r\n                border: 2px dashed #ccc;\r\n                margin-top: 20px;\r\n                text-align: center;\r\n                line-height: 200px;\r\n            }\r\n        `,\r\n    ],\r\n    standalone: true,\r\n    imports: [CommonModule, AdkDraggableDirective, AdkDroppableDirective],\r\n})\r\nexport class DragDropExampleComponent {\r\n    droppedItem: string | null = null;\r\n\r\n    onDragStart(_event: DragEvent) {}\r\n\r\n    onDragEnd(_event: DragEvent) {}\r\n\r\n    onDrop(_event: DragEvent) {\r\n        this.droppedItem = 'Item dropped';\r\n    }\r\n}\r\n\r\nconst meta: Meta<typeof DragDropExampleComponent> = {\r\n    component: DragDropExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Draggable Table',\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<typeof DragDropExampleComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            .drag-item {\n                width: 100px;\n                height: 100px;\n                background-color: #f0f0f0;\n                border: 1px solid #ccc;\n                text-align: center;\n                line-height: 100px;\n            }\n            .drop-zone {\n                width: 200px;\n                height: 200px;\n                background-color: #f9f9f9;\n                border: 2px dashed #ccc;\n                margin-top: 20px;\n                text-align: center;\n                line-height: 200px;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "EmailComponent",
            "id": "component-EmailComponent-e7bdc306c1dfdbfe55639963892ac5e8bcb61370a9cee201de3f6a05bfbaa264ae7071ed4246e9753bbea665eac7f269b04fc1810a6ba31f0ad0d5d60e10a959",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/email.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-email-input",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  @if (field ) {\n  <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  }\n  <div class=\"mt-2\">\n    <input\n      type=\"email\"\n      [formControl]=\"formControl[field.key]\"\n      [pattern]=\"pattern\"\n      [placeholder]=\"placeholder\"\n      [name]=\"field.key\"\n      [id]=\"field.key\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    />\n  </div>\n  @if (description && !formControl[field.key].touched){\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  } @else {\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    <div *ngIf=\"formControl[field.key].errors['minlength']\">\n      Must be at least\n      {{ formControl[field.key].errors['minlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n      Must not exceed\n      {{ formControl[field.key].errors['maxlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['pattern']\">{{ errorMessage }}</div>\n  </div>\n  }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Field } from '../../models';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'adk-email-input',\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  template: `\r\n    @if (field) {\r\n    <div [ngClass]=\"class\">\r\n      @if (field ) {\r\n      <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\r\n      }\r\n      <div class=\"mt-2\">\r\n        <input\r\n          type=\"email\"\r\n          [formControl]=\"formControl[field.key]\"\r\n          [pattern]=\"pattern\"\r\n          [placeholder]=\"placeholder\"\r\n          [name]=\"field.key\"\r\n          [id]=\"field.key\"\r\n          [autocomplete]=\"autocomplete\"\r\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\r\n          [required]=\"required\"\r\n        />\r\n      </div>\r\n      @if (description && !formControl[field.key].touched){\r\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\r\n        {{ description }}\r\n      </p>\r\n      } @else {\r\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\r\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\r\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\r\n          Must be at least\r\n          {{ formControl[field.key].errors['minlength'].requiredLength }}\r\n          characters\r\n        </div>\r\n        <div *ngIf=\"formControl[field.key].errors['maxlength']\">\r\n          Must not exceed\r\n          {{ formControl[field.key].errors['maxlength'].requiredLength }}\r\n          characters\r\n        </div>\r\n        <div *ngIf=\"formControl[field.key].errors['pattern']\">{{ errorMessage }}</div>\r\n      </div>\r\n      }\r\n    </div>\r\n    }\r\n  `,\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class EmailComponent implements OnChanges {\r\n  @Input() field!: Field;\r\n  formControl: { [key: string]: AbstractControl | any } = {};\r\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\r\n\r\n  get props() {\r\n    return this.field?.props;\r\n  }\r\n\r\n  get autocomplete() {\r\n    return this.props?.autocomplete ?? 'off';\r\n  }\r\n\r\n  get label() {\r\n    return this.field.label;\r\n  }\r\n\r\n  get description() {\r\n    return this.field.description;\r\n  }\r\n\r\n  get errorMessage() {\r\n    return this.props?.errorMessage ?? 'Invalid pattern entered';\r\n  }\r\n\r\n  get placeholder() {\r\n    return this.field.placeholder ?? '';\r\n  }\r\n\r\n  get class() {\r\n    return this.props?.class ?? 'sm:col-span-3';\r\n  }\r\n\r\n  get labelClass() {\r\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\r\n  }\r\n\r\n  get pattern() {\r\n    return this.props?.pattern ?? '';\r\n  }\r\n\r\n  get required() {\r\n    return this.props?.required ?? true;\r\n  }\r\n\r\n  get inputClass() {\r\n    if (this.props && this.props.inputClass) {\r\n      return this.props.inputClass;\r\n    }\r\n    return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6';\r\n  }\r\n\r\n  ngOnChanges({ field }: SimpleChanges): void {\r\n    if (field) {\r\n      this.field = field.currentValue;\r\n      this.initFormControl();\r\n    }\r\n  }\r\n\r\n  private initFormControl(): void {\r\n    this.formControl[this.field.key] = this.field.formControl;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 74
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                },
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "",
                        "line": 82
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 98
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 102
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 106
                    }
                }
            }
        },
        {
            "name": "FieldComponent",
            "id": "component-FieldComponent-68e476cd2833a6585b0302e06cab7ea467483becd20e833ab684362fb5978517084c5fc29d3ddf743e5926ccb0a2481d3935c7b6f8ec4de940fe19d664cbd0f2",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-field",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "@if(field) { @switch(field.type) { @case('checkbox') {\n<adk-checkbox [field]=\"field\"></adk-checkbox>\n} @case('radio') {\n<adk-radio [field]=\"field\"></adk-radio>\n} @case('textarea') {\n<adk-textarea [field]=\"field\"></adk-textarea>\n} @case('password') {\n<adk-password-input [field]=\"field\"></adk-password-input>\n} @case('email') {\n<adk-email-input [field]=\"field\"></adk-email-input>\n}@case('select') {\n<adk-select [field]=\"field\"></adk-select>\n}@case('multi-select') {\n<adk-multi-select [field]=\"field\"></adk-multi-select>\n} @default {\n<adk-input [field]=\"field\" (fieldValueChange)=\"emitValueChange($event)\"></adk-input>\n} } }\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldValueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "components",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\n\r\nimport { CheckboxComponent } from './types/checkbox.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EmailComponent } from './types/email.component';\r\nimport { Field } from '../models';\r\nimport { InputComponent } from './types/input.component';\r\nimport { MultiSelectComponent } from './types/multi-select.component';\r\nimport { PasswordComponent } from './types/password.component';\r\nimport { RadioComponent } from './types/radio.component';\r\nimport { SelectComponent } from './types/select.component';\r\nimport { TextareaComponent } from './types/textarea.component';\r\n\r\nconst components = [\r\n    InputComponent,\r\n    CheckboxComponent,\r\n    RadioComponent,\r\n    TextareaComponent,\r\n    PasswordComponent,\r\n    SelectComponent,\r\n    MultiSelectComponent,\r\n    SelectComponent,\r\n    EmailComponent,\r\n];\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-field',\r\n    imports: [CommonModule, components],\r\n    template: `\r\n        @if(field) { @switch(field.type) { @case('checkbox') {\r\n        <adk-checkbox [field]=\"field\"></adk-checkbox>\r\n        } @case('radio') {\r\n        <adk-radio [field]=\"field\"></adk-radio>\r\n        } @case('textarea') {\r\n        <adk-textarea [field]=\"field\"></adk-textarea>\r\n        } @case('password') {\r\n        <adk-password-input [field]=\"field\"></adk-password-input>\r\n        } @case('email') {\r\n        <adk-email-input [field]=\"field\"></adk-email-input>\r\n        }@case('select') {\r\n        <adk-select [field]=\"field\"></adk-select>\r\n        }@case('multi-select') {\r\n        <adk-multi-select [field]=\"field\"></adk-multi-select>\r\n        } @default {\r\n        <adk-input [field]=\"field\" (fieldValueChange)=\"emitValueChange($event)\"></adk-input>\r\n        } } }\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n                width: 100%;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class FieldComponent implements OnChanges {\r\n    @Input() field!: Field;\r\n    @Output() fieldValueChange = new EventEmitter<string>();\r\n    get props() {\r\n        return this.field?.props;\r\n    }\r\n\r\n    get steps() {\r\n        return this.props?.['steps'] ?? [];\r\n    }\r\n\r\n    ngOnChanges({ field }: SimpleChanges): void {\r\n        if (field) this.field = field.currentValue;\r\n    }\r\n\r\n    emitValueChange(value: string) {\r\n        this.fieldValueChange.emit(value);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "steps": {
                    "name": "steps",
                    "getSignature": {
                        "name": "steps",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            }
        },
        {
            "name": "FieldDirectiveComponent",
            "id": "component-FieldDirectiveComponent-34ab29d4341eae14637e7c56c7523f4da376d3c890daa6b214977fcec62e263c0b1ecf6bad0afb78fb509b983861b6b63f80e1092de3aa2d3bedcbaee0dc4346",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFields"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { AdkFields } from '../field';\r\nimport { Component } from '@angular/core';\r\nimport { expect } from '@storybook/jest';\r\nimport { within } from '@storybook/testing-library';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-host',\r\n    template: ``,\r\n    hostDirectives: [AdkFields],\r\n})\r\nclass FieldDirectiveComponent {}\r\n\r\nconst meta: Meta<FieldDirectiveComponent> = {\r\n    component: FieldDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Form / Field',\r\n};\r\nexport default meta;\r\ntype Story = StoryObj<FieldDirectiveComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n\r\nexport const Heading: Story = {\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\r\n    },\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "FieldListDirective",
            "id": "component-FieldListDirective-423f60119a178957fd0df0d1a1004c3f994a2bb182c84fb3967bdc7f87a5c51d6c8c63fb87c5064baf024a2bfd4a4c4cd306b0b345a1faab05de56bc177c7639",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { AdkFieldList } from '../field-list';\r\n/* eslint-disable @angular-eslint/component-class-suffix */\r\nimport { Component } from '@angular/core';\r\nimport { expect } from '@storybook/jest';\r\nimport { within } from '@storybook/testing-library';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-host',\r\n    template: ``,\r\n    hostDirectives: [AdkFieldList],\r\n})\r\nclass FieldListDirective {}\r\n\r\nconst meta: Meta<FieldListDirective> = {\r\n    component: FieldListDirective,\r\n    title: '(TW) Angular UI / Directives / Form / Field List',\r\n};\r\nexport default meta;\r\ntype Story = StoryObj<FieldListDirective>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n\r\nexport const Heading: Story = {\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\r\n    },\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "FieldsComponent",
            "id": "component-FieldsComponent-316a2b9c453442681ccb4e3ed6aba5f08741c060c329487d6047d1e2f4f39cc1256e3994bd26dc1938ec23ede268d4022f0d166a801e5a4ec13478705ac8d0eb",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/fields.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-fields",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<div [class]=\"wrapperClass\">\n    @for (field of fields.fields(); track (field.id)) {\n    <adk-field [field]=\"field\"> </adk-field>\n    }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                },
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "fieldConfig",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "Field[]",
                    "decorators": []
                },
                {
                    "name": "wrapperClass",
                    "defaultValue": "'w-full'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fields",
                    "defaultValue": "inject(AdkFieldList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\r\n\r\nimport { AdkFieldList } from '../directives';\r\nimport { AdkFormGroup } from '../directives/form-group';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Field } from '../models';\r\nimport { FieldComponent } from './field.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-fields',\r\n    imports: [CommonModule, ReactiveFormsModule, FieldComponent],\r\n    hostDirectives: [AdkFieldList, AdkFormGroup],\r\n    template: `\r\n        <div [class]=\"wrapperClass\">\r\n            @for (field of fields.fields(); track (field.id)) {\r\n            <adk-field [field]=\"field\"> </adk-field>\r\n            }\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n                width: 100%;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class FieldsComponent implements OnChanges {\r\n    fields = inject(AdkFieldList, { self: true });\r\n\r\n    @Input() fieldConfig: Field[] = [];\r\n    @Input() wrapperClass = 'w-full';\r\n\r\n    ngOnChanges({ fieldConfig }: SimpleChanges): void {\r\n        if (fieldConfig) {\r\n            this.fields.clear();\r\n            this.fields.add(...fieldConfig.currentValue);\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "HttpClientDirectiveComponent",
            "id": "component-HttpClientDirectiveComponent-adcb186fd05eaf1c4f04b0c11eeb07002568dbcbb4ec668248ffed82cbdda8b9763dbe07c4d640fd8c7d90d42a7f368318f6879e232dfad9a7298c1a149f40ec",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkHttpClient",
                    "inputs": [
                        "adkUrl"
                    ],
                    "outputs": []
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { AdkHttpClient } from '../http-client';\r\nimport { Component } from '@angular/core';\r\nimport { expect } from '@storybook/jest';\r\nimport { within } from '@storybook/testing-library';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-host',\r\n    template: ``,\r\n    hostDirectives: [{ directive: AdkHttpClient, inputs: ['adkUrl'] }],\r\n})\r\nclass HttpClientDirectiveComponent {}\r\n\r\nconst meta: Meta<HttpClientDirectiveComponent> = {\r\n    component: HttpClientDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Http Client',\r\n};\r\nexport default meta;\r\ntype Story = StoryObj<HttpClientDirectiveComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n\r\nexport const Heading: Story = {\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\r\n    },\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-af0c6cfcc90262f7d8f128bbf5517f82e7b9b448812513b2c3e487b39f39ae5a99eea96664c58ebeff3147aea0e3209e3ddacffb6247e049b76a9e6f679cc541",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/icon-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-icon-button",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "<button\n    class=\"relative align-middle select-none font-sans font-medium text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none w-8 max-w-[32px] h-8 max-h-[32px] rounded-lg text-xs text-blue-gray-500 hover:bg-blue-gray-500/10 active:bg-blue-gray-500/30\"\n    type=\"button\"\n>\n    <span class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform\"\n        ><svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            class=\"h-5 w-5\"\n        >\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\"></path></svg\n    ></span>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'adk-icon-button',\r\n    standalone: true,\r\n    imports: [],\r\n    template: `\r\n        <button\r\n            class=\"relative align-middle select-none font-sans font-medium text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none w-8 max-w-[32px] h-8 max-h-[32px] rounded-lg text-xs text-blue-gray-500 hover:bg-blue-gray-500/10 active:bg-blue-gray-500/30\"\r\n            type=\"button\"\r\n        >\r\n            <span class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform\"\r\n                ><svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-width=\"2\"\r\n                    class=\"h-5 w-5\"\r\n                >\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\"></path></svg\r\n            ></span>\r\n        </button>\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class IconButtonComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-6e9d73a18d8acfea9308ffd6544f01b4bc2589819b9a86f375fb5b4de141e182308e0902564223ac6a76e93ccd94c2ea715225504d16bc54263932a9b604c9c8",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-input",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n    <div class=\"relative w-full min-w-[200px] h-10\">\n        <input\n            type=\"text\"\n            [formControl]=\"formControl[field.key]\"\n            [pattern]=\"pattern\"\n            [placeholder]=\"''\"\n            [id]=\"field.key\"\n            [autocomplete]=\"autocomplete\"\n            [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n            [required]=\"required\"\n            class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 transition-all placeholder-shown:border placeholder-shown:border-gray-200 placeholder-shown:border-t-gray-200 border focus:border-2 border-t-transparent focus:border-t-transparent text-sm px-3 py-2.5 rounded-[7px] border-gray-200 focus:border-gray-900\"\n        />\n        <label\n            class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal !overflow-visible truncate peer-placeholder-shown:text-gray-500 leading-tight peer-focus:leading-tight peer-disabled:text-transparent peer-disabled:peer-placeholder-shown:text-gray-500 transition-all -top-1.5 peer-placeholder-shown:text-sm text-[11px] peer-focus:text-[11px] before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 peer-placeholder-shown:before:border-transparent before:rounded-tl-md before:border-t peer-focus:before:border-t-2 before:border-l peer-focus:before:border-l-2 before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 peer-placeholder-shown:after:border-transparent after:rounded-tr-md after:border-t peer-focus:after:border-t-2 after:border-r peer-focus:after:border-r-2 after:pointer-events-none after:transition-all peer-disabled:after:border-transparent peer-placeholder-shown:leading-[3.75] text-gray-500 peer-focus:text-gray-900 before:border-gray-200 peer-focus:before:!border-gray-900 after:border-gray-200 peer-focus:after:!border-gray-900\"\n            style=\"z-index: 1;\"\n        >\n            {{ label }}\n        </label>\n    </div>\n    @if (description && !formControl[field.key].touched){\n    <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n    </p>\n    } @else {\n    <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n            Must be at least\n            {{ formControl[field.key].errors['minlength'].requiredLength }}\n        </div>\n    </div>\n    }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldValueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "'mt-1 block w-full px-3 py-2 bg-white border border-red-500 rounded-md text-sm shadow-sm placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-red-500 invalid:text-red-600 focus:invalid:border-red-500 focus:invalid:ring-red-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Field } from '../../models';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-input',\r\n    imports: [CommonModule, ReactiveFormsModule],\r\n    template: `\r\n        @if (field) {\r\n        <div [ngClass]=\"class\">\r\n            <div class=\"relative w-full min-w-[200px] h-10\">\r\n                <input\r\n                    type=\"text\"\r\n                    [formControl]=\"formControl[field.key]\"\r\n                    [pattern]=\"pattern\"\r\n                    [placeholder]=\"''\"\r\n                    [id]=\"field.key\"\r\n                    [autocomplete]=\"autocomplete\"\r\n                    [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\r\n                    [required]=\"required\"\r\n                    class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 transition-all placeholder-shown:border placeholder-shown:border-gray-200 placeholder-shown:border-t-gray-200 border focus:border-2 border-t-transparent focus:border-t-transparent text-sm px-3 py-2.5 rounded-[7px] border-gray-200 focus:border-gray-900\"\r\n                />\r\n                <label\r\n                    class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal !overflow-visible truncate peer-placeholder-shown:text-gray-500 leading-tight peer-focus:leading-tight peer-disabled:text-transparent peer-disabled:peer-placeholder-shown:text-gray-500 transition-all -top-1.5 peer-placeholder-shown:text-sm text-[11px] peer-focus:text-[11px] before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 peer-placeholder-shown:before:border-transparent before:rounded-tl-md before:border-t peer-focus:before:border-t-2 before:border-l peer-focus:before:border-l-2 before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 peer-placeholder-shown:after:border-transparent after:rounded-tr-md after:border-t peer-focus:after:border-t-2 after:border-r peer-focus:after:border-r-2 after:pointer-events-none after:transition-all peer-disabled:after:border-transparent peer-placeholder-shown:leading-[3.75] text-gray-500 peer-focus:text-gray-900 before:border-gray-200 peer-focus:before:!border-gray-900 after:border-gray-200 peer-focus:after:!border-gray-900\"\r\n                    style=\"z-index: 1;\"\r\n                >\r\n                    {{ label }}\r\n                </label>\r\n            </div>\r\n            @if (description && !formControl[field.key].touched){\r\n            <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\r\n                {{ description }}\r\n            </p>\r\n            } @else {\r\n            <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\r\n                <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\r\n                <div *ngIf=\"formControl[field.key].errors['minlength']\">\r\n                    Must be at least\r\n                    {{ formControl[field.key].errors['minlength'].requiredLength }}\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n        }\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n                width: 100%;\r\n            }\r\n        `,\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class InputComponent implements OnChanges {\r\n    @Input() field!: Field;\r\n    @Output() fieldValueChange = new EventEmitter<string>();\r\n\r\n    formControl: { [key: string]: AbstractControl | any } = {};\r\n    errorClass =\r\n        'mt-1 block w-full px-3 py-2 bg-white border border-red-500 rounded-md text-sm shadow-sm placeholder-red-400 focus:outline-none focus:border-red-500 focus:ring-1 focus:ring-red-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-red-500 invalid:text-red-600 focus:invalid:border-red-500 focus:invalid:ring-red-500';\r\n\r\n    get props() {\r\n        return this.field?.props;\r\n    }\r\n\r\n    get autocomplete() {\r\n        return this.props?.autocomplete ?? 'off';\r\n    }\r\n\r\n    get label() {\r\n        return this.field.label;\r\n    }\r\n\r\n    get description() {\r\n        return this.field.description;\r\n    }\r\n\r\n    get placeholder() {\r\n        return this.field.placeholder ?? '';\r\n    }\r\n\r\n    get class() {\r\n        return this.props?.class ?? 'flex flex-row gap-2 w-full flex-wrap z-[20000] mb-2';\r\n    }\r\n\r\n    get labelClass() {\r\n        return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\r\n    }\r\n\r\n    get pattern() {\r\n        return this.props?.pattern ?? '';\r\n    }\r\n\r\n    get required() {\r\n        return this.props?.required ?? true;\r\n    }\r\n\r\n    get inputClass() {\r\n        if (this.props && this.props.inputClass) {\r\n            return this.props.inputClass;\r\n        }\r\n        return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6';\r\n    }\r\n\r\n    ngOnChanges({ field }: SimpleChanges): void {\r\n        if (field) {\r\n            this.field = field.currentValue;\r\n            this.initFormControl();\r\n        }\r\n        this.formControl[this.field.key].valueChanges.subscribe((value: string) => {\r\n            this.emitValueChange(value);\r\n        });\r\n    }\r\n\r\n    private initFormControl(): void {\r\n        this.formControl[this.field.key] = this.field.formControl;\r\n    }\r\n\r\n    emitValueChange(value: string) {\r\n        this.fieldValueChange.emit(value);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 83
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 103
                    }
                }
            }
        },
        {
            "name": "ListDirectiveComponent",
            "id": "component-ListDirectiveComponent-03d4871d30e1045f0ae7d954dbfc6c4f4fb80ede8d02f22bf1f955c3e112d27e8b7796619c4024c069ab7d24025b5182460109acf5948cdf9ab9c6b06a399fa8",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkList"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { AdkList } from '../list';\r\nimport { Component } from '@angular/core';\r\nimport { expect } from '@storybook/jest';\r\nimport { within } from '@storybook/testing-library';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-host',\r\n    template: ``,\r\n    hostDirectives: [AdkList],\r\n})\r\nclass ListDirectiveComponent {}\r\n\r\nconst meta: Meta<ListDirectiveComponent> = {\r\n    component: ListDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / List',\r\n};\r\nexport default meta;\r\ntype Story = StoryObj<ListDirectiveComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n\r\nexport const Heading: Story = {\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\r\n    },\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-040adbe546b27b4710ffaf5fa8ad5e6d0ad5371b2498109943d78a34a616e78c59fa479b1f49c052cfd6c53adb1a3ca7596f22bd078eb750b829fa03b6fd583d",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-multi-select",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div class=\"w-full flex items-center justify-center\">\n  <div class=\"w-full relative\">\n    <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n    <div\n      (click)=\"toggle()\"\n      tabindex=\"0\"\n      aria-expanded=\"true\"\n      [id]=\"field.id\"\n      class=\"mt-2 m-auto flex text-sm cursor-pointer text-gray-500 border border-gray-300 rounded shadow-sm transition-all duration-300 focus:outline-none bg-white hover:border-gray-400 focus:border-purple-500 focus:ring focus:ring-purple-500/20\"\n    >\n      <div class=\"grow pl-2.5 py-2 pr-2 flex flex-wrap gap-1\">\n        @if(isMultipleTag) { @for (option of selectedOptions; track $index) {\n        <div class=\"bg-gray-200 border rounded-sm flex space-x-1 pl-1 items-center\">\n          <p class=\"truncate cursor-default select-none\">\n            {{ option.label }}\n          </p>\n          <div\n            (click)=\"toggleOption(option)\"\n            class=\"flex items-center px-1 cursor-pointer rounded-r-sm hover:bg-red-200 hover:text-red-600\"\n          >\n            <span class=\"material-symbols-outlined text-sm\"> close </span>\n          </div>\n        </div>\n        } } @else {\n        <p class=\"truncate cursor-default select-none self-center\">\n          @if (selectedOptions[0]){\n          {{ selectedOptions[0].label }}\n          }\n        </p>\n        }\n      </div>\n      <div class=\"flex flex-none items-center gap-1 py-1.5 px-1\">\n        <div (click)=\"clearOption()\" class=\"mt-1\">\n          <span class=\"cursor-pointer p-0 !m-auto material-symbols-outlined\"> restart_alt </span>\n        </div>\n        <div class=\"h-full w-px bg-gray-300 inline-block\"></div>\n        <span class=\"material-symbols-outlined\"> @if (open) { expand_less } @else { expand_more } </span>\n      </div>\n    </div>\n    @if (open) {\n    <div class=\"absolute z-10 w-full bg-white shadow-lg border rounded py-1 mt-1.5 text-sm text-gray-700\" tabindex=\"-1\">\n      <div class=\"relative py-1 px-2.5\">\n        <span class=\"absolute w-5 h-5 mt-2.5 pb-0.5 ml-2 text-gray-500 material-symbols-outlined\"> search </span>\n        <input\n          #searchInput\n          type=\"text\"\n          name=\"Search\"\n          id=\"Search\"\n          [(ngModel)]=\"searchText\"\n          (input)=\"onSearchChange()\"\n          placeholder=\"Search...\"\n          class=\"w-full py-2 pl-8 text-sm text-gray-500 bg-gray-100 border border-gray-200 rounded focus:border-gray-200 focus:ring-0 focus:outline-none\"\n        />\n      </div>\n      <div role=\"option\" class=\"max-h-72 overflow-y-auto\">\n        @if (filteredOptions.length !== 0) { @for (option of filteredOptions; track $index) {\n        <div class=\"px-2.5 last:border-0 border-b-[1px] py-2 border-gray-200\">\n          @if (option.category) {\n          <div class=\"pr-2 py-2 cursor-default select-none truncate font-bold text-gray-700\">\n            {{ option.category }}\n          </div>\n          }\n          <li\n            class=\"block transition duration-200 px-2 py-2 cursor-pointer select-none truncate rounded text-gray-500 hover:bg-blue-100 hover:text-blue-500\"\n            role=\"option\"\n            aria-selected=\"false\"\n            (click)=\"toggleOption(option)\"\n          >\n            {{ option.label }}\n          </li>\n        </div>\n        } } @else {\n        <div class=\"px-2 py-2 cursor-not-allowed truncate text-gray-400 select-none\">No options found</div>\n        }\n      </div>\n    </div>\n\n    }\n  </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clearOptionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "clearOptionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "required": false
                },
                {
                    "name": "filteredOptions",
                    "defaultValue": "this.options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "output<FieldOptions[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "selectedOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "methodsClass": [
                {
                    "name": "clearOption",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "FieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "FieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Component, Input, OnChanges, SimpleChanges, output } from '@angular/core';\r\nimport { Field, FieldOptions } from '../../models';\r\n\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'adk-multi-select',\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\r\n  template: `\r\n    @if (field) {\r\n    <div class=\"w-full flex items-center justify-center\">\r\n      <div class=\"w-full relative\">\r\n        <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\r\n        <div\r\n          (click)=\"toggle()\"\r\n          tabindex=\"0\"\r\n          aria-expanded=\"true\"\r\n          [id]=\"field.id\"\r\n          class=\"mt-2 m-auto flex text-sm cursor-pointer text-gray-500 border border-gray-300 rounded shadow-sm transition-all duration-300 focus:outline-none bg-white hover:border-gray-400 focus:border-purple-500 focus:ring focus:ring-purple-500/20\"\r\n        >\r\n          <div class=\"grow pl-2.5 py-2 pr-2 flex flex-wrap gap-1\">\r\n            @if(isMultipleTag) { @for (option of selectedOptions; track $index) {\r\n            <div class=\"bg-gray-200 border rounded-sm flex space-x-1 pl-1 items-center\">\r\n              <p class=\"truncate cursor-default select-none\">\r\n                {{ option.label }}\r\n              </p>\r\n              <div\r\n                (click)=\"toggleOption(option)\"\r\n                class=\"flex items-center px-1 cursor-pointer rounded-r-sm hover:bg-red-200 hover:text-red-600\"\r\n              >\r\n                <span class=\"material-symbols-outlined text-sm\"> close </span>\r\n              </div>\r\n            </div>\r\n            } } @else {\r\n            <p class=\"truncate cursor-default select-none self-center\">\r\n              @if (selectedOptions[0]){\r\n              {{ selectedOptions[0].label }}\r\n              }\r\n            </p>\r\n            }\r\n          </div>\r\n          <div class=\"flex flex-none items-center gap-1 py-1.5 px-1\">\r\n            <div (click)=\"clearOption()\" class=\"mt-1\">\r\n              <span class=\"cursor-pointer p-0 !m-auto material-symbols-outlined\"> restart_alt </span>\r\n            </div>\r\n            <div class=\"h-full w-px bg-gray-300 inline-block\"></div>\r\n            <span class=\"material-symbols-outlined\"> @if (open) { expand_less } @else { expand_more } </span>\r\n          </div>\r\n        </div>\r\n        @if (open) {\r\n        <div class=\"absolute z-10 w-full bg-white shadow-lg border rounded py-1 mt-1.5 text-sm text-gray-700\" tabindex=\"-1\">\r\n          <div class=\"relative py-1 px-2.5\">\r\n            <span class=\"absolute w-5 h-5 mt-2.5 pb-0.5 ml-2 text-gray-500 material-symbols-outlined\"> search </span>\r\n            <input\r\n              #searchInput\r\n              type=\"text\"\r\n              name=\"Search\"\r\n              id=\"Search\"\r\n              [(ngModel)]=\"searchText\"\r\n              (input)=\"onSearchChange()\"\r\n              placeholder=\"Search...\"\r\n              class=\"w-full py-2 pl-8 text-sm text-gray-500 bg-gray-100 border border-gray-200 rounded focus:border-gray-200 focus:ring-0 focus:outline-none\"\r\n            />\r\n          </div>\r\n          <div role=\"option\" class=\"max-h-72 overflow-y-auto\">\r\n            @if (filteredOptions.length !== 0) { @for (option of filteredOptions; track $index) {\r\n            <div class=\"px-2.5 last:border-0 border-b-[1px] py-2 border-gray-200\">\r\n              @if (option.category) {\r\n              <div class=\"pr-2 py-2 cursor-default select-none truncate font-bold text-gray-700\">\r\n                {{ option.category }}\r\n              </div>\r\n              }\r\n              <li\r\n                class=\"block transition duration-200 px-2 py-2 cursor-pointer select-none truncate rounded text-gray-500 hover:bg-blue-100 hover:text-blue-500\"\r\n                role=\"option\"\r\n                aria-selected=\"false\"\r\n                (click)=\"toggleOption(option)\"\r\n              >\r\n                {{ option.label }}\r\n              </li>\r\n            </div>\r\n            } } @else {\r\n            <div class=\"px-2 py-2 cursor-not-allowed truncate text-gray-400 select-none\">No options found</div>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        }\r\n      </div>\r\n    </div>\r\n    }\r\n  `,\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class MultiSelectComponent implements OnChanges {\r\n  @Input() field!: Field;\r\n\r\n  formControl: { [key: string]: AbstractControl | any } = {};\r\n  open = false;\r\n  selectedOptions: FieldOptions[] = [];\r\n  filteredOptions: FieldOptions[] = this.options;\r\n  selectedOptionChange = output<FieldOptions[]>();\r\n  clearOptionChange = output();\r\n  searchText = '';\r\n\r\n  get props() {\r\n    return this.field?.props;\r\n  }\r\n\r\n  get isMultipleTag() {\r\n    return this.props?.isMultipleTag ?? false;\r\n  }\r\n\r\n  get options() {\r\n    return this.props?.options ?? [];\r\n  }\r\n\r\n  get autocomplete() {\r\n    return this.props?.autocomplete ?? 'off';\r\n  }\r\n\r\n  get label() {\r\n    return this.field.label;\r\n  }\r\n\r\n  get description() {\r\n    return this.field?.description;\r\n  }\r\n\r\n  get placeholder() {\r\n    return this.field.placeholder ?? '';\r\n  }\r\n\r\n  get class() {\r\n    return this.props?.class ?? 'sm:col-span-3';\r\n  }\r\n\r\n  get labelClass() {\r\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\r\n  }\r\n\r\n  get inputClass() {\r\n    return (\r\n        this.props?.inputClass ??\r\n        'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6'\r\n    );\r\n  }\r\n\r\n  ngOnChanges({ field }: SimpleChanges): void {\r\n    if (field) {\r\n      this.field = field.currentValue;\r\n      this.filteredOptions = this.field?.props?.options\r\n        ? this.field?.props?.options.filter((opt) => opt.label.toLowerCase().includes(this.searchText.toLowerCase()))\r\n        : [];\r\n      this.initFormControl();\r\n    }\r\n  }\r\n\r\n  onOptionSelected(value: string) {\r\n    this.formControl[this.field.key].setValue(value);\r\n  }\r\n\r\n  private initFormControl(): void {\r\n    this.formControl[this.field.key] = this.field.formControl;\r\n  }\r\n\r\n  onSearchChange() {\r\n    if (!this.searchText || this.searchText === '') {\r\n      this.filteredOptions = this.options;\r\n    } else {\r\n      this.filteredOptions = this.options.filter((opt) => opt.label.toLowerCase().includes(this.searchText.toLowerCase()));\r\n    }\r\n  }\r\n\r\n  toggle() {\r\n    this.open = !this.open;\r\n  }\r\n\r\n  toggleOption(option: FieldOptions) {\r\n    if (this.isMultipleTag) {\r\n      if (this.selectedOptions.includes(option)) {\r\n        this.selectedOptions = this.selectedOptions.filter((value) => value !== option);\r\n        this.filteredOptions.push(option);\r\n        const selectedOptionVal = this.selectedOptions.map((opt) => opt.value);\r\n        this.formControl[this.field.key].setValue(selectedOptionVal);\r\n      } else {\r\n        this.selectedOptions.push(option);\r\n        this.filteredOptions = this.filteredOptions.filter((value) => value !== option);\r\n        const selectedOptionVal = this.selectedOptions.map((opt) => opt.value);\r\n        this.formControl[this.field.key].setValue(selectedOptionVal);\r\n      }\r\n    } else {\r\n      this.selectedOptions = [option];\r\n      this.filteredOptions = this.options.filter((value) => value !== option);\r\n      const selectedOptionVal = option.value;\r\n      this.formControl[this.field.key].setValue(selectedOptionVal);\r\n    }\r\n\r\n    this.selectedOptionChange.emit(this.selectedOptions);\r\n  }\r\n\r\n  clearOption() {\r\n    this.filteredOptions = this.filteredOptions.concat(this.selectedOptions);\r\n    this.selectedOptions = [];\r\n    this.selectedOptionChange.emit(this.selectedOptions);\r\n    this.formControl[this.field.key].setValue('');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                },
                "isMultipleTag": {
                    "name": "isMultipleTag",
                    "getSignature": {
                        "name": "isMultipleTag",
                        "type": "",
                        "returnType": "",
                        "line": 118
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 122
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 126
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 130
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 134
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 138
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 142
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 146
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 150
                    }
                }
            }
        },
        {
            "name": "PaginationDirectiveComponent",
            "id": "component-PaginationDirectiveComponent-e251782c1677614b159266894740f523b617e87459c017b013f38cc8bacc278a6dfe41cff2b0af14f85db92d6e242fe5be128a21769ed606a3a790f038f07eb7",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkPagination"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { AdkPagination } from '../pagination';\r\nimport { Component } from '@angular/core';\r\nimport { expect } from '@storybook/jest';\r\nimport { within } from '@storybook/testing-library';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-host',\r\n    template: ``,\r\n    hostDirectives: [AdkPagination],\r\n})\r\nclass PaginationDirectiveComponent {}\r\n\r\nconst meta: Meta<PaginationDirectiveComponent> = {\r\n    component: PaginationDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Pagination',\r\n};\r\nexport default meta;\r\ntype Story = StoryObj<PaginationDirectiveComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n\r\nexport const Heading: Story = {\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\r\n    },\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PasswordComponent",
            "id": "component-PasswordComponent-43cae0b80583cac0483696fb9711d50a92d77d3a9b703a0152d3b9b43dfcdc8f100c315c42e4b9deac149c6de2ddea29f6669385169a7d1c03c88376b5f66188",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-password-input",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  <div class=\"mt-2 relative\">\n    <input\n      [type]=\"showPassword ? 'text' : 'password'\"\n      [formControl]=\"formControl[field.key]\"\n      [pattern]=\"pattern\"\n      [placeholder]=\"placeholder\"\n      [name]=\"field.key\"\n      [id]=\"field.key\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    />\n    <button\n      type=\"button\"\n      (click)=\"togglePasswordVisibility()\"\n      class=\"absolute inset-y-0 right-0 flex items-center px-2 focus:outline-none\"\n    >\n      {{ showPassword ? 'Hide' : 'Show' }}\n    </button>\n  </div>\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    <div *ngIf=\"formControl[field.key].errors['minlength']\">\n      Must be at least\n      {{ formControl[field.key].errors['minlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n      Must not exceed\n      {{ formControl[field.key].errors['maxlength'].requiredLength }}\n      characters\n    </div>\n  </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Field } from '../../models';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'adk-password-input',\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  template: `\r\n    @if (field) {\r\n    <div [ngClass]=\"class\">\r\n      <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\r\n      <div class=\"mt-2 relative\">\r\n        <input\r\n          [type]=\"showPassword ? 'text' : 'password'\"\r\n          [formControl]=\"formControl[field.key]\"\r\n          [pattern]=\"pattern\"\r\n          [placeholder]=\"placeholder\"\r\n          [name]=\"field.key\"\r\n          [id]=\"field.key\"\r\n          [autocomplete]=\"autocomplete\"\r\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\r\n          [required]=\"required\"\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          (click)=\"togglePasswordVisibility()\"\r\n          class=\"absolute inset-y-0 right-0 flex items-center px-2 focus:outline-none\"\r\n        >\r\n          {{ showPassword ? 'Hide' : 'Show' }}\r\n        </button>\r\n      </div>\r\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\r\n        {{ description }}\r\n      </p>\r\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\r\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\r\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\r\n          Must be at least\r\n          {{ formControl[field.key].errors['minlength'].requiredLength }}\r\n          characters\r\n        </div>\r\n        <div *ngIf=\"formControl[field.key].errors['maxlength']\">\r\n          Must not exceed\r\n          {{ formControl[field.key].errors['maxlength'].requiredLength }}\r\n          characters\r\n        </div>\r\n      </div>\r\n    </div>\r\n    }\r\n  `,\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class PasswordComponent implements OnChanges {\r\n  @Input() field!: Field;\r\n  formControl: { [key: string]: AbstractControl | any } = {};\r\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\r\n\r\n  get props() {\r\n    return this.field?.props;\r\n  }\r\n\r\n  get autocomplete() {\r\n    return this.props?.autocomplete ?? 'off';\r\n  }\r\n\r\n  get label() {\r\n    return this.field.label;\r\n  }\r\n\r\n  get description() {\r\n    return this.field.description;\r\n  }\r\n\r\n  get placeholder() {\r\n    return this.field.placeholder ?? '';\r\n  }\r\n\r\n  get class() {\r\n    return this.props?.class ?? 'sm:col-span-3';\r\n  }\r\n\r\n  get labelClass() {\r\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\r\n  }\r\n\r\n  get pattern() {\r\n    return this.props?.pattern ?? '';\r\n  }\r\n\r\n  get required() {\r\n    return this.props?.required ?? true;\r\n  }\r\n\r\n  get inputClass() {\r\n    if (this.props && this.props.inputClass) {\r\n      return this.props.inputClass;\r\n    }\r\n    return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6';\r\n  }\r\n\r\n  showPassword = false;\r\n\r\n  ngOnChanges({ field }: SimpleChanges): void {\r\n    if (field) {\r\n      this.field = field.currentValue;\r\n      this.initFormControl();\r\n    }\r\n  }\r\n\r\n  private initFormControl(): void {\r\n    this.formControl[this.field.key] = this.field.formControl;\r\n  }\r\n\r\n  togglePasswordVisibility(): void {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 83
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 103
                    }
                }
            }
        },
        {
            "name": "PillComponent",
            "id": "component-PillComponent-0651571fb14b48d72e8417ffe8c36469fc2927b6ac531135c95ff8f4723ccab7e5627dda6c7278d5d628dd397bfce359f9d465d46a4a8b32e469ececc0893c13",
            "file": "projects/ng-lib/src/lib/tw-ui/components/pill.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-pill",
            "styleUrls": [],
            "styles": [],
            "template": "<span class=\"badge badge-pill mr-0.5 text-white\" [ngClass]=\"getRandomColor()\">\n  <ng-content></ng-content>\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-amber-500', 'bg-indigo-500', 'bg-purple-500', 'bg-pink-500']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { CommonModule, NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'adk-pill',\r\n  standalone: true,\r\n  imports: [CommonModule, NgClass],\r\n  template: `\r\n    <span class=\"badge badge-pill mr-0.5 text-white\" [ngClass]=\"getRandomColor()\">\r\n      <ng-content></ng-content>\r\n    </span>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PillComponent {\r\n  colors = ['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-amber-500', 'bg-indigo-500', 'bg-purple-500', 'bg-pink-500'];\r\n\r\n  getRandomColor() {\r\n    return this.colors[Math.floor(Math.random() * this.colors.length)];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PillWrapperComponent",
            "id": "component-PillWrapperComponent-df02ad94b2b42de9cffb376dd22dcf490d69e1991e4e3bfc4279d27053f9ea993dd3304ff4e47ec9d8e1b5a43fa4aced7fe99b58fc2d25d0d1f632e614549eb1",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<adk-pill> This is a pill </adk-pill>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PillComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { type Meta, type StoryObj } from '@storybook/angular';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { PillComponent } from '../pill.component';\r\n\r\n@Component({\r\n    selector: 'storybook-button-wrapper',\r\n    standalone: true,\r\n    imports: [CommonModule, PillComponent],\r\n    template: ` <adk-pill> This is a pill </adk-pill> `,\r\n})\r\nclass PillWrapperComponent {}\r\nconst meta: Meta<PillWrapperComponent> = {\r\n    component: PillWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Pill',\r\n    tags: ['autodocs'],\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<PillWrapperComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-a52c214c2c11c88434b8e21d5d4fe3db705c0f6934f5833718e1e076a9b201c9b528603ead467f3832aab56396aaa74a8ae284c97db59607b5ccc1a3fad5969e",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-radio",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  @for (option of options; track option; let i = $index) {\n  <div class=\"relative flex gap-x-3 mt-2\">\n    <div class=\"flex items-center gap-x-3\">\n      <input type=\"radio\" [id]=\"option.id\" [value]=\"option.value\" [formControl]=\"formControl[field.key]\" [ngClass]=\"inputClass\" />\n    </div>\n    <div class=\"text-sm leading-6\">\n      <label [for]=\"option.id\" [ngClass]=\"labelClass\">{{ option.label }}</label>\n      <p *ngIf=\"option.description\" class=\"text-gray-500\">{{ option.description }}</p>\n    </div>\n  </div>\n  }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Field } from '../../models';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'adk-radio',\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  template: `\r\n    @if (field) {\r\n    <div [ngClass]=\"class\">\r\n      @for (option of options; track option; let i = $index) {\r\n      <div class=\"relative flex gap-x-3 mt-2\">\r\n        <div class=\"flex items-center gap-x-3\">\r\n          <input type=\"radio\" [id]=\"option.id\" [value]=\"option.value\" [formControl]=\"formControl[field.key]\" [ngClass]=\"inputClass\" />\r\n        </div>\r\n        <div class=\"text-sm leading-6\">\r\n          <label [for]=\"option.id\" [ngClass]=\"labelClass\">{{ option.label }}</label>\r\n          <p *ngIf=\"option.description\" class=\"text-gray-500\">{{ option.description }}</p>\r\n        </div>\r\n      </div>\r\n      }\r\n    </div>\r\n    }\r\n  `,\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class RadioComponent implements OnChanges {\r\n  @Input() field!: Field;\r\n  formControl: { [key: string]: AbstractControl | any } = {};\r\n\r\n  get props() {\r\n    return this.field?.props;\r\n  }\r\n\r\n  get options() {\r\n    return this.props?.options ?? [];\r\n  }\r\n\r\n  get autocomplete() {\r\n    return this.props?.autocomplete ?? 'off';\r\n  }\r\n\r\n  get label() {\r\n    return this.field.label;\r\n  }\r\n\r\n  get description() {\r\n    return this.field?.description;\r\n  }\r\n\r\n  get placeholder() {\r\n    return this.field.placeholder ?? '';\r\n  }\r\n\r\n  get class() {\r\n    return this.props?.class ?? 'sm:col-span-3';\r\n  }\r\n\r\n  get labelClass() {\r\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\r\n  }\r\n\r\n  get inputClass() {\r\n    return this.props?.inputClass ?? 'h-4 w-4 border-gray-300 text-gray-600 focus:ring-gray-600';\r\n  }\r\n\r\n  ngOnChanges({ field }: SimpleChanges): void {\r\n    if (field) {\r\n      this.field = field.currentValue;\r\n      this.initFormControl();\r\n    }\r\n  }\r\n\r\n  private initFormControl(): void {\r\n    this.formControl[this.field.key] = this.field.formControl;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                }
            }
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-20d5f9036e33efc72e0ea718cb1fa08e4ea47fddc16cfc0c8fe0c3b0937b0ca77d3c29b1d7c5bf594c1ca7d77ae1c5323d06f6731c70aa69f35437ea3b63eb87",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-select",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                position: relative;\n            }\n        "
            ],
            "template": "@if (field) {\n<div class=\"relative w-full min-w-[200px] h-10\">\n    <button\n        type=\"button\"\n        #dropdownButton\n        class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal text-left outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 disabled:cursor-not-allowed transition-all border-2 text-sm px-3 py-2.5 rounded-[7px] border-gray-500 border-t-transparent\"\n        aria-expanded=\"true\"\n        aria-haspopup=\"listbox\"\n        role=\"combobox\"\n        aria-controls=\":r1l:\"\n        (click)=\"toggleDropdown()\"\n    >\n        <span class=\"absolute top-2/4 -translate-y-2/4 left-3 pt-0.5\">{{ value | titlecase }}</span>\n        <div\n            class=\"grid place-items-center absolute top-2/4 right-2 pt-px w-5 h-5 text-gray-400 rotate-0 -translate-y-2/4 transition-all rotate-180 mt-px\"\n        >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path\n                    fill-rule=\"evenodd\"\n                    d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n                    clip-rule=\"evenodd\"\n                ></path>\n            </svg>\n        </div>\n    </button>\n    <label\n        class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal transition-all -top-1.5 before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 before:rounded-tl-md before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 after:rounded-tr-md after:pointer-events-none after:transition-all peer-disabled:after:border-transparent text-[11px] peer-disabled:text-transparent before:border-t-2 before:border-l-2 after:border-t-2 after:border-r-2 leading-tight text-gray-500 before:border-gray-500 after:border-gray-500\"\n    >\n        {{ label | titlecase }}\n    </label>\n    @if (isOpen) {\n    <ul\n        #dropdownList\n        tabindex=\"-1\"\n        role=\"listbox\"\n        class=\"w-full max-h-96 bg-white p-3 border border-gray-50 rounded-md shadow-lg shadow-gray-500/10 font-sans text-sm font-normal text-gray-500 overflow-auto focus:outline-none\"\n        [ngStyle]=\"{ top: dropdownTop, left: dropdownLeft, width: dropdownWidth, position: 'absolute', zIndex: '1000' }\"\n        id=\":r1l:\"\n        aria-orientation=\"vertical\"\n    >\n        @for (option of options; track $index) {\n        <li\n            [id]=\"'material-tailwind-select-' + option.value\"\n            role=\"option\"\n            class=\"pt-[9px] pb-2 px-3 rounded-md leading-tight cursor-pointer select-none hover:bg-gray-50 focus:bg-gray-50 hover:bg-opacity-80 focus:bg-opacity-80 hover:text-gray-900 focus:text-gray-900 outline outline-0 transition-all\"\n            [ngClass]=\"{ 'bg-gray-50': option.value === field.value }\"\n            [attr.tabindex]=\"option.value === field.value ? 0 : -1\"\n            [attr.aria-selected]=\"option.value === field.value\"\n            (click)=\"selectOption(option.value)\"\n        >\n            {{ option.label | titlecase }}\n        </li>\n        }\n    </ul>\n    }\n    <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n    </p>\n    <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldValueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dropdownButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdownButton'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "dropdownLeft",
                    "defaultValue": "'0px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "dropdownList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdownList'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "dropdownTop",
                    "defaultValue": "'0px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "dropdownWidth",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "methodsClass": [
                {
                    "name": "emitValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDropdownPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Field } from '../../models';\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'adk-select',\r\n    imports: [CommonModule, ReactiveFormsModule],\r\n    template: `\r\n        @if (field) {\r\n        <div class=\"relative w-full min-w-[200px] h-10\">\r\n            <button\r\n                type=\"button\"\r\n                #dropdownButton\r\n                class=\"peer w-full h-full bg-transparent text-gray-700 font-sans font-normal text-left outline outline-0 focus:outline-0 disabled:bg-gray-50 disabled:border-0 disabled:cursor-not-allowed transition-all border-2 text-sm px-3 py-2.5 rounded-[7px] border-gray-500 border-t-transparent\"\r\n                aria-expanded=\"true\"\r\n                aria-haspopup=\"listbox\"\r\n                role=\"combobox\"\r\n                aria-controls=\":r1l:\"\r\n                (click)=\"toggleDropdown()\"\r\n            >\r\n                <span class=\"absolute top-2/4 -translate-y-2/4 left-3 pt-0.5\">{{ value | titlecase }}</span>\r\n                <div\r\n                    class=\"grid place-items-center absolute top-2/4 right-2 pt-px w-5 h-5 text-gray-400 rotate-0 -translate-y-2/4 transition-all rotate-180 mt-px\"\r\n                >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path\r\n                            fill-rule=\"evenodd\"\r\n                            d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\r\n                            clip-rule=\"evenodd\"\r\n                        ></path>\r\n                    </svg>\r\n                </div>\r\n            </button>\r\n            <label\r\n                class=\"flex w-full h-full select-none pointer-events-none absolute left-0 font-normal transition-all -top-1.5 before:content[' '] before:block before:box-border before:w-2.5 before:h-1.5 before:mt-[6.5px] before:mr-1 before:rounded-tl-md before:pointer-events-none before:transition-all peer-disabled:before:border-transparent after:content[' '] after:block after:flex-grow after:box-border after:w-2.5 after:h-1.5 after:mt-[6.5px] after:ml-1 after:rounded-tr-md after:pointer-events-none after:transition-all peer-disabled:after:border-transparent text-[11px] peer-disabled:text-transparent before:border-t-2 before:border-l-2 after:border-t-2 after:border-r-2 leading-tight text-gray-500 before:border-gray-500 after:border-gray-500\"\r\n            >\r\n                {{ label | titlecase }}\r\n            </label>\r\n            @if (isOpen) {\r\n            <ul\r\n                #dropdownList\r\n                tabindex=\"-1\"\r\n                role=\"listbox\"\r\n                class=\"w-full max-h-96 bg-white p-3 border border-gray-50 rounded-md shadow-lg shadow-gray-500/10 font-sans text-sm font-normal text-gray-500 overflow-auto focus:outline-none\"\r\n                [ngStyle]=\"{ top: dropdownTop, left: dropdownLeft, width: dropdownWidth, position: 'absolute', zIndex: '1000' }\"\r\n                id=\":r1l:\"\r\n                aria-orientation=\"vertical\"\r\n            >\r\n                @for (option of options; track $index) {\r\n                <li\r\n                    [id]=\"'material-tailwind-select-' + option.value\"\r\n                    role=\"option\"\r\n                    class=\"pt-[9px] pb-2 px-3 rounded-md leading-tight cursor-pointer select-none hover:bg-gray-50 focus:bg-gray-50 hover:bg-opacity-80 focus:bg-opacity-80 hover:text-gray-900 focus:text-gray-900 outline outline-0 transition-all\"\r\n                    [ngClass]=\"{ 'bg-gray-50': option.value === field.value }\"\r\n                    [attr.tabindex]=\"option.value === field.value ? 0 : -1\"\r\n                    [attr.aria-selected]=\"option.value === field.value\"\r\n                    (click)=\"selectOption(option.value)\"\r\n                >\r\n                    {{ option.label | titlecase }}\r\n                </li>\r\n                }\r\n            </ul>\r\n            }\r\n            <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\r\n                {{ description }}\r\n            </p>\r\n            <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\r\n                <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\r\n            </div>\r\n        </div>\r\n        }\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n                position: relative;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class SelectComponent implements OnChanges {\r\n    @Input() field!: Field;\r\n    @Output() fieldValueChange = new EventEmitter<string>();\r\n    @ViewChild('dropdownButton') dropdownButton!: ElementRef;\r\n    @ViewChild('dropdownList') dropdownList!: ElementRef;\r\n\r\n    formControl: { [key: string]: AbstractControl | any } = {};\r\n    isOpen = false;\r\n    dropdownTop = '0px';\r\n    dropdownLeft = '0px';\r\n    dropdownWidth = '100%';\r\n\r\n    get props() {\r\n        return this.field?.props;\r\n    }\r\n\r\n    get options() {\r\n        return this.props?.options ?? [];\r\n    }\r\n\r\n    get label() {\r\n        return this.field.label;\r\n    }\r\n\r\n    get value(): string {\r\n        return `${this.field.value}`;\r\n    }\r\n\r\n    get description() {\r\n        return this.field.description;\r\n    }\r\n\r\n    ngOnChanges({ field }: SimpleChanges): void {\r\n        if (field) {\r\n            this.field = field.currentValue;\r\n            this.initFormControl();\r\n        }\r\n\r\n        this.formControl[this.field.key].valueChanges.subscribe((value: string) => {\r\n            this.emitValueChange(value);\r\n        });\r\n    }\r\n\r\n    private initFormControl(): void {\r\n        this.formControl[this.field.key] = this.field.formControl;\r\n    }\r\n\r\n    toggleDropdown() {\r\n        this.isOpen = !this.isOpen;\r\n        if (this.isOpen) {\r\n            this.updateDropdownPosition();\r\n        }\r\n    }\r\n\r\n    selectOption(value: string) {\r\n        this.field.value = value;\r\n        this.formControl[this.field.key].patchValue(value);\r\n        this.isOpen = false;\r\n    }\r\n\r\n    emitValueChange(value: string) {\r\n        this.fieldValueChange.emit(value);\r\n    }\r\n\r\n    private updateDropdownPosition() {\r\n        const buttonRect = this.dropdownButton.nativeElement.getBoundingClientRect();\r\n        this.dropdownTop = `${buttonRect.height}px`;\r\n        this.dropdownLeft = `0px`;\r\n        this.dropdownWidth = `${buttonRect.width}px`;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                position: relative;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 101
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 109
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 113
                    }
                }
            }
        },
        {
            "name": "SettingsIconComponent",
            "id": "component-SettingsIconComponent-925057f3eeead4b151665bc6b9be0bf5cd48fc138d61a90f6fb615e200a750739173d10e2f120a1c1ac5ecc17fac0af2b2477d4c08937f329ee375311294eaf2",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/settings-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-settings-icon",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<div class=\"flex items-center gap-3 cursor-pointer\">\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n        data-slot=\"icon\"\n        stroke-width=\"2\"\n        class=\"h-4 w-4\"\n        style=\"\"\n    >\n        <path\n            d=\"M17.004 10.407c.138.435-.216.842-.672.842h-3.465a.75.75 0 0 1-.65-.375l-1.732-3c-.229-.396-.053-.907.393-1.004a5.252 5.252 0 0 1 6.126 3.537ZM8.12 8.464c.307-.338.838-.235 1.066.16l1.732 3a.75.75 0 0 1 0 .75l-1.732 3c-.229.397-.76.5-1.067.161A5.23 5.23 0 0 1 6.75 12a5.23 5.23 0 0 1 1.37-3.536ZM10.878 17.13c-.447-.098-.623-.608-.394-1.004l1.733-3.002a.75.75 0 0 1 .65-.375h3.465c.457 0 .81.407.672.842a5.252 5.252 0 0 1-6.126 3.539Z\"\n        ></path>\n        <path\n            fill-rule=\"evenodd\"\n            d=\"M21 12.75a.75.75 0 1 0 0-1.5h-.783a8.22 8.22 0 0 0-.237-1.357l.734-.267a.75.75 0 1 0-.513-1.41l-.735.268a8.24 8.24 0 0 0-.689-1.192l.6-.503a.75.75 0 1 0-.964-1.149l-.6.504a8.3 8.3 0 0 0-1.054-.885l.391-.678a.75.75 0 1 0-1.299-.75l-.39.676a8.188 8.188 0 0 0-1.295-.47l.136-.77a.75.75 0 0 0-1.477-.26l-.136.77a8.36 8.36 0 0 0-1.377 0l-.136-.77a.75.75 0 1 0-1.477.26l.136.77c-.448.121-.88.28-1.294.47l-.39-.676a.75.75 0 0 0-1.3.75l.392.678a8.29 8.29 0 0 0-1.054.885l-.6-.504a.75.75 0 1 0-.965 1.149l.6.503a8.243 8.243 0 0 0-.689 1.192L3.8 8.216a.75.75 0 1 0-.513 1.41l.735.267a8.222 8.222 0 0 0-.238 1.356h-.783a.75.75 0 0 0 0 1.5h.783c.042.464.122.917.238 1.356l-.735.268a.75.75 0 0 0 .513 1.41l.735-.268c.197.417.428.816.69 1.191l-.6.504a.75.75 0 0 0 .963 1.15l.601-.505c.326.323.679.62 1.054.885l-.392.68a.75.75 0 0 0 1.3.75l.39-.679c.414.192.847.35 1.294.471l-.136.77a.75.75 0 0 0 1.477.261l.137-.772a8.332 8.332 0 0 0 1.376 0l.136.772a.75.75 0 1 0 1.477-.26l-.136-.771a8.19 8.19 0 0 0 1.294-.47l.391.677a.75.75 0 0 0 1.3-.75l-.393-.679a8.29 8.29 0 0 0 1.054-.885l.601.504a.75.75 0 0 0 .964-1.15l-.6-.503c.261-.375.492-.774.69-1.191l.735.267a.75.75 0 1 0 .512-1.41l-.734-.267c.115-.439.195-.892.237-1.356h.784Zm-2.657-3.06a6.744 6.744 0 0 0-1.19-2.053 6.784 6.784 0 0 0-1.82-1.51A6.705 6.705 0 0 0 12 5.25a6.8 6.8 0 0 0-1.225.11 6.7 6.7 0 0 0-2.15.793 6.784 6.784 0 0 0-2.952 3.489.76.76 0 0 1-.036.098A6.74 6.74 0 0 0 5.251 12a6.74 6.74 0 0 0 3.366 5.842l.009.005a6.704 6.704 0 0 0 2.18.798l.022.003a6.792 6.792 0 0 0 2.368-.004 6.704 6.704 0 0 0 2.205-.811 6.785 6.785 0 0 0 1.762-1.484l.009-.01.009-.01a6.743 6.743 0 0 0 1.18-2.066c.253-.707.39-1.469.39-2.263a6.74 6.74 0 0 0-.408-2.309Z\"\n            clip-rule=\"evenodd\"\n        ></path>\n    </svg>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'adk-settings-icon',\r\n    standalone: true,\r\n    template: `\r\n        <div class=\"flex items-center gap-3 cursor-pointer\">\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"currentColor\"\r\n                aria-hidden=\"true\"\r\n                data-slot=\"icon\"\r\n                stroke-width=\"2\"\r\n                class=\"h-4 w-4\"\r\n                style=\"\"\r\n            >\r\n                <path\r\n                    d=\"M17.004 10.407c.138.435-.216.842-.672.842h-3.465a.75.75 0 0 1-.65-.375l-1.732-3c-.229-.396-.053-.907.393-1.004a5.252 5.252 0 0 1 6.126 3.537ZM8.12 8.464c.307-.338.838-.235 1.066.16l1.732 3a.75.75 0 0 1 0 .75l-1.732 3c-.229.397-.76.5-1.067.161A5.23 5.23 0 0 1 6.75 12a5.23 5.23 0 0 1 1.37-3.536ZM10.878 17.13c-.447-.098-.623-.608-.394-1.004l1.733-3.002a.75.75 0 0 1 .65-.375h3.465c.457 0 .81.407.672.842a5.252 5.252 0 0 1-6.126 3.539Z\"\r\n                ></path>\r\n                <path\r\n                    fill-rule=\"evenodd\"\r\n                    d=\"M21 12.75a.75.75 0 1 0 0-1.5h-.783a8.22 8.22 0 0 0-.237-1.357l.734-.267a.75.75 0 1 0-.513-1.41l-.735.268a8.24 8.24 0 0 0-.689-1.192l.6-.503a.75.75 0 1 0-.964-1.149l-.6.504a8.3 8.3 0 0 0-1.054-.885l.391-.678a.75.75 0 1 0-1.299-.75l-.39.676a8.188 8.188 0 0 0-1.295-.47l.136-.77a.75.75 0 0 0-1.477-.26l-.136.77a8.36 8.36 0 0 0-1.377 0l-.136-.77a.75.75 0 1 0-1.477.26l.136.77c-.448.121-.88.28-1.294.47l-.39-.676a.75.75 0 0 0-1.3.75l.392.678a8.29 8.29 0 0 0-1.054.885l-.6-.504a.75.75 0 1 0-.965 1.149l.6.503a8.243 8.243 0 0 0-.689 1.192L3.8 8.216a.75.75 0 1 0-.513 1.41l.735.267a8.222 8.222 0 0 0-.238 1.356h-.783a.75.75 0 0 0 0 1.5h.783c.042.464.122.917.238 1.356l-.735.268a.75.75 0 0 0 .513 1.41l.735-.268c.197.417.428.816.69 1.191l-.6.504a.75.75 0 0 0 .963 1.15l.601-.505c.326.323.679.62 1.054.885l-.392.68a.75.75 0 0 0 1.3.75l.39-.679c.414.192.847.35 1.294.471l-.136.77a.75.75 0 0 0 1.477.261l.137-.772a8.332 8.332 0 0 0 1.376 0l.136.772a.75.75 0 1 0 1.477-.26l-.136-.771a8.19 8.19 0 0 0 1.294-.47l.391.677a.75.75 0 0 0 1.3-.75l-.393-.679a8.29 8.29 0 0 0 1.054-.885l.601.504a.75.75 0 0 0 .964-1.15l-.6-.503c.261-.375.492-.774.69-1.191l.735.267a.75.75 0 1 0 .512-1.41l-.734-.267c.115-.439.195-.892.237-1.356h.784Zm-2.657-3.06a6.744 6.744 0 0 0-1.19-2.053 6.784 6.784 0 0 0-1.82-1.51A6.705 6.705 0 0 0 12 5.25a6.8 6.8 0 0 0-1.225.11 6.7 6.7 0 0 0-2.15.793 6.784 6.784 0 0 0-2.952 3.489.76.76 0 0 1-.036.098A6.74 6.74 0 0 0 5.251 12a6.74 6.74 0 0 0 3.366 5.842l.009.005a6.704 6.704 0 0 0 2.18.798l.022.003a6.792 6.792 0 0 0 2.368-.004 6.704 6.704 0 0 0 2.205-.811 6.785 6.785 0 0 0 1.762-1.484l.009-.01.009-.01a6.743 6.743 0 0 0 1.18-2.066c.253-.707.39-1.469.39-2.263a6.74 6.74 0 0 0-.408-2.309Z\"\r\n                    clip-rule=\"evenodd\"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n                width: 100%;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class SettingsIconComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-9b7197856ac78000e889589ea4e40f9a27c6ef5b7d32881713840ebeda96d0eb58ae91795d363e1ad4b265d7a3a3da1c71785613cbc336bd15dddb1812b7d94b",
            "file": "projects/ng-lib/src/lib/tw-ui/components/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-sidebar",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative flex h-[calc(100vh-3rem)] w-screen flex-row\">\n    @if (isExpanded) {\n    <div\n        class=\"relative flex h-full w-full max-w-[20rem] flex-col rounded-xl bg-white bg-clip-border p-4 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n    >\n        <div class=\"p-4 mb-2\">\n            <div class=\"flex flex-row\">\n                <h5 class=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n                    {{ title }}\n                </h5>\n                <span class=\"flex-auto\"></span>\n                <button\n                    type=\"button\"\n                    class=\"flex items-center w-[60px] p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                    (click)=\"toggleSidebar()\"\n                >\n                    <span class=\"material-symbols-outlined\"> menu </span>\n                </button>\n            </div>\n        </div>\n        <nav class=\"flex min-w-[240px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n            @for (nav of navigation; track nav.link) {\n            <div\n                role=\"button\"\n                class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                [routerLink]=\"[nav.link]\"\n                [routerLinkActive]=\"'active'\"\n            >\n                <div class=\"grid mr-4 place-items-center\">\n                    <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n                </div>\n                {{ nav.text | titlecase }}\n            </div>\n            }\n        </nav>\n    </div>\n    } @else {\n    <div\n        class=\"relative flex h-full w-full max-w-[5rem] flex-col rounded-xl bg-white bg-clip-border p-2 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n    >\n        <div class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-center font-normal text-blue-gray-700\">\n            <button\n                type=\"button\"\n                class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                (click)=\"toggleSidebar()\"\n            >\n                <span class=\"material-symbols-outlined\"> arrow_forward_ios </span>\n            </button>\n        </div>\n        <nav class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n            @for (nav of navigation; track nav.link) {\n            <div\n                role=\"button\"\n                class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n                [routerLink]=\"[nav.link]\"\n                [routerLinkActive]=\"'active'\"\n            >\n                <div class=\"grid mr-4 place-items-center\">\n                    <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n                </div>\n            </div>\n            }\n        </nav>\n    </div>\n    }\n    <div class=\"relative h-full w-full\">\n        <ng-content [select]=\"'.sidebar-content'\"></ng-content>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "navigation",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Sidebar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "toggleSidebar",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'adk-sidebar',\r\n    standalone: true,\r\n    imports: [CommonModule, RouterModule],\r\n    template: `\r\n        <div class=\"relative flex h-[calc(100vh-3rem)] w-screen flex-row\">\r\n            @if (isExpanded) {\r\n            <div\r\n                class=\"relative flex h-full w-full max-w-[20rem] flex-col rounded-xl bg-white bg-clip-border p-4 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\r\n            >\r\n                <div class=\"p-4 mb-2\">\r\n                    <div class=\"flex flex-row\">\r\n                        <h5 class=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\r\n                            {{ title }}\r\n                        </h5>\r\n                        <span class=\"flex-auto\"></span>\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"flex items-center w-[60px] p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\r\n                            (click)=\"toggleSidebar()\"\r\n                        >\r\n                            <span class=\"material-symbols-outlined\"> menu </span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <nav class=\"flex min-w-[240px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\r\n                    @for (nav of navigation; track nav.link) {\r\n                    <div\r\n                        role=\"button\"\r\n                        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\r\n                        [routerLink]=\"[nav.link]\"\r\n                        [routerLinkActive]=\"'active'\"\r\n                    >\r\n                        <div class=\"grid mr-4 place-items-center\">\r\n                            <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\r\n                        </div>\r\n                        {{ nav.text | titlecase }}\r\n                    </div>\r\n                    }\r\n                </nav>\r\n            </div>\r\n            } @else {\r\n            <div\r\n                class=\"relative flex h-full w-full max-w-[5rem] flex-col rounded-xl bg-white bg-clip-border p-2 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\r\n            >\r\n                <div class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-center font-normal text-blue-gray-700\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\r\n                        (click)=\"toggleSidebar()\"\r\n                    >\r\n                        <span class=\"material-symbols-outlined\"> arrow_forward_ios </span>\r\n                    </button>\r\n                </div>\r\n                <nav class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\r\n                    @for (nav of navigation; track nav.link) {\r\n                    <div\r\n                        role=\"button\"\r\n                        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\r\n                        [routerLink]=\"[nav.link]\"\r\n                        [routerLinkActive]=\"'active'\"\r\n                    >\r\n                        <div class=\"grid mr-4 place-items-center\">\r\n                            <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\r\n                        </div>\r\n                    </div>\r\n                    }\r\n                </nav>\r\n            </div>\r\n            }\r\n            <div class=\"relative h-full w-full\">\r\n                <ng-content [select]=\"'.sidebar-content'\"></ng-content>\r\n            </div>\r\n        </div>\r\n    `,\r\n})\r\nexport class SidebarComponent implements OnChanges {\r\n    @Input() title = 'Sidebar';\r\n    @Input() navigation: { link: string; icon: string; text: string }[] = [];\r\n\r\n    isExpanded = true;\r\n    toggleSidebar = () => {\r\n        ('SidebarComponent: toggleSidebar');\r\n        this.isExpanded = !this.isExpanded;\r\n    };\r\n\r\n    ngOnChanges({ title, navigation }: SimpleChanges) {\r\n        if (title) this.title = title.currentValue;\r\n        if (navigation) this.navigation = navigation.currentValue;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "SortableIconComponent",
            "id": "component-SortableIconComponent-eaa2efc32cea10d14f87345be2c1aa2450c3259835e9db4b552071030bf9542ad7154925ba19e9852bb991c70b604e2fb85c53d06ad906f23c9b1a8027ef0762",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sortable-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-sortable-icon",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: inline-block;\n            }\n        "
            ],
            "template": "<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke-width=\"2\"\n    stroke=\"currentColor\"\n    aria-hidden=\"true\"\n    class=\"w-4 h-4\"\n>\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9\"></path>\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'tw-sortable-icon',\r\n    standalone: true,\r\n    template: `\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke-width=\"2\"\r\n            stroke=\"currentColor\"\r\n            aria-hidden=\"true\"\r\n            class=\"w-4 h-4\"\r\n        >\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9\"></path>\r\n        </svg>\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class SortableIconComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: inline-block;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "SortableTableExampleComponent",
            "id": "component-SortableTableExampleComponent-18c5d7ac3b2da8c4288c6b4a6309133b6d85abac8fb3827f2f9ab2200523540ff6c083dcb2148221d8be3ed66e2ca88213241f76e3c457f89a0d36b21606d378",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sortable-table-example",
            "styleUrls": [],
            "styles": [],
            "template": "<table>\n    <thead>\n        <tr>\n            <th (click)=\"sort('name')\">Name</th>\n            <th (click)=\"sort('age')\">Age</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let item of sortedItems\">\n            <td>{{ item.name }}</td>\n            <td>{{ item.age }}</td>\n        </tr>\n    </tbody>\n</table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentSortDirection",
                    "defaultValue": "'asc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"asc\" | \"desc\"",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "currentSortKey",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "items",
                    "defaultValue": "[\r\n        { name: 'John Doe', age: 28 },\r\n        { name: 'Jane Smith', age: 34 },\r\n        { name: 'Sam Green', age: 22 },\r\n        { name: 'Emily Brown', age: 42 },\r\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sortedItems",
                    "defaultValue": "[...this.items]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\ninterface Item {\r\n    name: string;\r\n    age: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-sortable-table-example',\r\n    template: `\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th (click)=\"sort('name')\">Name</th>\r\n                    <th (click)=\"sort('age')\">Age</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let item of sortedItems\">\r\n                    <td>{{ item.name }}</td>\r\n                    <td>{{ item.age }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    `,\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n})\r\nexport class SortableTableExampleComponent {\r\n    items: Item[] = [\r\n        { name: 'John Doe', age: 28 },\r\n        { name: 'Jane Smith', age: 34 },\r\n        { name: 'Sam Green', age: 22 },\r\n        { name: 'Emily Brown', age: 42 },\r\n    ];\r\n\r\n    sortedItems: Item[] = [...this.items];\r\n    currentSortKey: keyof Item = 'name';\r\n    currentSortDirection: 'asc' | 'desc' = 'asc';\r\n\r\n    sort(key: keyof Item): void {\r\n        if (this.currentSortKey === key) {\r\n            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';\r\n        } else {\r\n            this.currentSortDirection = 'asc';\r\n        }\r\n        this.currentSortKey = key;\r\n        this.sortedItems.sort((a, b) => {\r\n            if (a[key] < b[key]) return this.currentSortDirection === 'asc' ? -1 : 1;\r\n            if (a[key] > b[key]) return this.currentSortDirection === 'asc' ? 1 : -1;\r\n            return 0;\r\n        });\r\n    }\r\n}\r\n\r\nconst meta: Meta<SortableTableExampleComponent> = {\r\n    component: SortableTableExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Sortable Table',\r\n};\r\nexport default meta;\r\ntype Story = StoryObj<SortableTableExampleComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TableExampleComponent",
            "id": "component-TableExampleComponent-3b583761b8ced4f9e8ac019c0bbec6ee890d56f19abfb647375b5429aaa60d0e57db2714edf1cb3c266bf3c6c2c90bb0e42009bb5460803a57a6d6c242b3fd28",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-example",
            "styleUrls": [],
            "styles": [],
            "template": "<div adk-selection #selection=\"adkSelection\">\n    <table>\n        <thead>\n            <tr>\n                <th>\n                    <input type=\"checkbox\" (change)=\"toggleSelectAll($event)\" />\n                </th>\n                <th>Item</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let item of items\">\n                <td>\n                    <input type=\"checkbox\" [checked]=\"selection.selected(item)\" (change)=\"toggleSelectItem(item)\" />\n                </td>\n                <td>{{ item }}</td>\n            </tr>\n        </tbody>\n    </table>\n    <p>Selected items: {{ selection.count() }}</p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "['item1', 'item2', 'item3', 'item4']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selection', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkSelection"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\r\nimport type { Meta, StoryObj } from '@storybook/angular';\r\n\r\nimport { AdkSelection } from '../selection';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'app-table-example',\r\n    template: `\r\n        <div adk-selection #selection=\"adkSelection\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <input type=\"checkbox\" (change)=\"toggleSelectAll($event)\" />\r\n                        </th>\r\n                        <th>Item</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let item of items\">\r\n                        <td>\r\n                            <input type=\"checkbox\" [checked]=\"selection.selected(item)\" (change)=\"toggleSelectItem(item)\" />\r\n                        </td>\r\n                        <td>{{ item }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <p>Selected items: {{ selection.count() }}</p>\r\n        </div>\r\n    `,\r\n    standalone: true,\r\n    imports: [CommonModule, AdkSelection],\r\n})\r\nexport class TableExampleComponent {\r\n    @ViewChild('selection', { static: true }) selection: any;\r\n    items = ['item1', 'item2', 'item3', 'item4'];\r\n\r\n    toggleSelectAll(event: Event): void {\r\n        const isChecked = (event.target as HTMLInputElement).checked;\r\n        if (isChecked) {\r\n            this.items.forEach((item) => this.selection.select(item));\r\n        } else {\r\n            this.selection.clear();\r\n        }\r\n    }\r\n\r\n    toggleSelectItem(item: string): void {\r\n        if (this.selection.selected(item)) {\r\n            this.selection.deselect(item);\r\n        } else {\r\n            this.selection.select(item);\r\n        }\r\n    }\r\n}\r\n\r\nconst meta: Meta<TableExampleComponent> = {\r\n    component: TableExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Selection',\r\n};\r\nexport default meta;\r\ntype Story = StoryObj<TableExampleComponent>;\r\n\r\nexport const Primary: Story = {\r\n    args: {},\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-202cdd8f93a36ca91caa366f691acfba22d30dce6b34ca32f3c5d96cd133d2fc211823fbd630cc35b8c4140e7877a4999ad2b0a3d245fb402ad8cdd0d8260620",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-textarea",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "<div [ngClass]=\"class\">\n  <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  <div class=\"mt-2\">\n    <textarea\n      [formControl]=\"formControl[field.key]\"\n      [pattern]=\"pattern\"\n      [placeholder]=\"placeholder\"\n      [name]=\"field.key\"\n      [id]=\"field.key\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    ></textarea>\n  </div>\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    <div *ngIf=\"formControl[field.key].errors['minlength']\">\n      Must be at least\n      {{ formControl[field.key].errors['minlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n      Must not exceed\n      {{ formControl[field.key].errors['maxlength'].requiredLength }}\n      characters\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { Field } from '../../models';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'adk-textarea',\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  template: `\r\n    <div [ngClass]=\"class\">\r\n      <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\r\n      <div class=\"mt-2\">\r\n        <textarea\r\n          [formControl]=\"formControl[field.key]\"\r\n          [pattern]=\"pattern\"\r\n          [placeholder]=\"placeholder\"\r\n          [name]=\"field.key\"\r\n          [id]=\"field.key\"\r\n          [autocomplete]=\"autocomplete\"\r\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\r\n          [required]=\"required\"\r\n        ></textarea>\r\n      </div>\r\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\r\n        {{ description }}\r\n      </p>\r\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\r\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\r\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\r\n          Must be at least\r\n          {{ formControl[field.key].errors['minlength'].requiredLength }}\r\n          characters\r\n        </div>\r\n        <div *ngIf=\"formControl[field.key].errors['maxlength']\">\r\n          Must not exceed\r\n          {{ formControl[field.key].errors['maxlength'].requiredLength }}\r\n          characters\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class TextareaComponent implements OnChanges {\r\n  @Input() field!: Field;\r\n  formControl: { [key: string]: AbstractControl | any } = {};\r\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\r\n\r\n  get props() {\r\n    return this.field?.props;\r\n  }\r\n\r\n  get autocomplete() {\r\n    return this.props?.autocomplete ?? 'off';\r\n  }\r\n\r\n  get label() {\r\n    return this.field.label;\r\n  }\r\n\r\n  get description() {\r\n    return this.field.description;\r\n  }\r\n\r\n  get placeholder() {\r\n    return this.field.placeholder ?? '';\r\n  }\r\n\r\n  get class() {\r\n    return this.props?.class ?? 'col-span-full';\r\n  }\r\n\r\n  get labelClass() {\r\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\r\n  }\r\n\r\n  get required() {\r\n    return this.props?.required ?? true;\r\n  }\r\n\r\n  get pattern() {\r\n    return this.props?.pattern ?? '';\r\n  }\r\n\r\n  get inputClass() {\r\n    return (\r\n        this.props?.inputClass ??\r\n        'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-gray-600 sm:text-sm sm:leading-6'\r\n    );\r\n  }\r\n\r\n  ngOnChanges({ field }: SimpleChanges): void {\r\n    if (field) {\r\n      this.field = field.currentValue;\r\n      this.initFormControl();\r\n    }\r\n  }\r\n\r\n  private initFormControl(): void {\r\n    this.formControl[this.field.key] = this.field.formControl;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 85
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                }
            }
        },
        {
            "name": "TwCardComponent",
            "id": "component-TwCardComponent-86a22adae2851816f36e8e7b4d43e92501ef06127bd2f2955a1bf1d2086c6d1b107e2bf079365f3ea60aa91e764e835759f3fd3e6e9d6e1c173c9beecdf46854",
            "file": "projects/ng-lib/src/lib/tw-ui/components/card/tw-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-card",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    [ngClass]=\"isHeaderWrapped ? 'gap-4' : ''\"\n    class=\"relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-md bg-clip-border\"\n>\n    <div [ngClass]=\"isHeaderWrapped ? 'p-6 pb-1 gap-4' : ''\" class=\"flex flex-col\">\n        <ng-content select=\".adk-card-header\"></ng-content>\n        <ng-content select=\".adk-card-subtitle\"></ng-content>\n        <ng-content select=\".adk-card-body\"></ng-content>\n    </div>\n    <div [ngClass]=\"isFooterWrapped ? 'p-6 pt-0' : ''\">\n        <ng-content select=\".adk-card-footer\"></ng-content>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isFooterWrapped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isHeaderWrapped",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'tw-card',\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n    template: `\r\n        <div\r\n            [ngClass]=\"isHeaderWrapped ? 'gap-4' : ''\"\r\n            class=\"relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-md bg-clip-border\"\r\n        >\r\n            <div [ngClass]=\"isHeaderWrapped ? 'p-6 pb-1 gap-4' : ''\" class=\"flex flex-col\">\r\n                <ng-content select=\".adk-card-header\"></ng-content>\r\n                <ng-content select=\".adk-card-subtitle\"></ng-content>\r\n                <ng-content select=\".adk-card-body\"></ng-content>\r\n            </div>\r\n            <div [ngClass]=\"isFooterWrapped ? 'p-6 pt-0' : ''\">\r\n                <ng-content select=\".adk-card-footer\"></ng-content>\r\n            </div>\r\n        </div>\r\n    `,\r\n})\r\nexport class TwCardComponent implements OnChanges {\r\n    @Input() isHeaderWrapped = false;\r\n    @Input() isFooterWrapped = false;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['isHeaderWrapped']) this.isHeaderWrapped = changes['isHeaderWrapped'].currentValue;\r\n        if (changes['isFooterWrapped']) this.isFooterWrapped = changes['isFooterWrapped'].currentValue;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "TwDefaultTableComponent",
            "id": "component-TwDefaultTableComponent-caeaffcb688bc680b4ca0f03d9f557cf1f227d990633e67ffe70991629ebc13439d168ad5fd5b3a97c5383e07f708393ff242a20da0cda8e909663a0de57e6da",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-default-table",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "templateUrl": [
                "./tw-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "TemplateRef<any> | string",
                    "decorators": []
                },
                {
                    "name": "actionColName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "groupBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "isActionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isPaginationAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "RowData[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "datasource",
                    "defaultValue": "this.tdss.get('dataSource')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "groupData",
                    "defaultValue": "new ImperativeObservable<{ [key: string]: RowData[] }>({ key: this.tdss.get('dataSource') })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "isAllRowsSelected",
                    "defaultValue": "new ImperativeObservable<boolean>(this.selectedRows.value.length === this.datasource.length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "selectedIndex",
                    "defaultValue": "new ImperativeObservable<number>(this.tdss.get('draggedColIndex') ?? 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "selectedRow",
                    "defaultValue": "new ImperativeObservable<RowData | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "new ImperativeObservable<RowData[]>(this.tdss.get('selectedRows'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selection', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableDataSourceService",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "groupByData",
                    "args": [
                        {
                            "name": "array",
                            "type": "RowData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "RowData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragStart",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Drag and Drop Handlers\n",
                    "description": "<p> Drag and Drop Handlers</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6708,
                                "end": 6713,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6702,
                                "end": 6707,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRowSelected",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "objectKeysGroupData",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortRows",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groupKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nisSelectable actions\n",
                    "description": "<p>isSelectable actions</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5539,
                                "end": 5544,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "event"
                            },
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5533,
                                "end": 5538,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 5560,
                                "end": 5568,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "groupKey"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5554,
                                "end": 5559,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleSelectItem",
                    "args": [
                        {
                            "name": "row",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGroupData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkSelection"
                },
                {
                    "name": "AdkExpansionPanelComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "SortableIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges, TemplateRef, ViewChild, inject } from '@angular/core';\r\n\r\nimport { AdkExpansionPanelComponent } from '../expansion-panel.component';\r\nimport { AdkSelection } from '../../../tw-form-ui/directives';\r\nimport { CheckboxComponent } from '../../../tw-form-ui/components/types/checkbox.component';\r\nimport { ImperativeObservable } from '../../../utils';\r\nimport { RowData } from './models';\r\nimport { SortableIconComponent } from './utils';\r\nimport { TableDataSourceService } from './table-datasource.service';\r\nimport { TwTypographyComponent } from '../typography.component';\r\n\r\n@Component({\r\n    selector: 'tw-default-table',\r\n    templateUrl: './tw-table.component.html',\r\n    standalone: true,\r\n    imports: [\r\n        CommonModule,\r\n        AdkSelection,\r\n        AdkExpansionPanelComponent,\r\n        AsyncPipe,\r\n        TwTypographyComponent,\r\n        CheckboxComponent,\r\n        SortableIconComponent,\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n                width: 100%;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class TwDefaultTableComponent implements OnChanges {\r\n    @ViewChild('selection', { static: true }) selection: any;\r\n    @Input() isSelectable = false;\r\n    @Input() isSortable = false;\r\n    @Input() isDraggable = false;\r\n    @Input() headers: string[] = [];\r\n    @Input() actionColName?: string;\r\n    @Input() actionButton?: TemplateRef<any> | string;\r\n    @Input() rows: RowData[] = [];\r\n    @Input() groupBy = '';\r\n    @Input() isPaginationAction?: boolean;\r\n    @Input() isActionChange?: boolean;\r\n\r\n    tdss: TableDataSourceService = inject(TableDataSourceService);\r\n    datasource = this.tdss.get('dataSource');\r\n    // maybe add groupData to the state management service\r\n    groupData = new ImperativeObservable<{ [key: string]: RowData[] }>({ key: this.tdss.get('dataSource') });\r\n    selectedRows = new ImperativeObservable<RowData[]>(this.tdss.get('selectedRows'));\r\n    selectedRow = new ImperativeObservable<RowData | null>(null);\r\n    isAllRowsSelected = new ImperativeObservable<boolean>(this.selectedRows.value.length === this.datasource.length);\r\n    selectedIndex = new ImperativeObservable<number>(this.tdss.get('draggedColIndex') ?? 0);\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        console.log('changes', changes);\r\n        if (changes['headers']) this.tdss.setHeaders(changes['headers'].currentValue);\r\n        if (changes['rows']) this.tdss.setTableDataSource(changes['rows'].currentValue);\r\n        if (changes['isActionChange']) {\r\n            if (!changes['isActionChange'].firstChange) {\r\n                this.headers = this.tdss.get('headers');\r\n                this.rows = this.tdss.get('dataSource');\r\n            }\r\n        }\r\n        if (changes['isPaginationAction'])\r\n            this.groupData.value = this.groupByData(this.tdss.get('dataSource'), this.tdss.get('preferences').groupBy ?? 'key');\r\n        if (changes['isSelectable']) this.isSelectable = changes['isSelectable'].currentValue;\r\n        if (changes['isSortable']) this.isSortable = changes['isSortable'].currentValue;\r\n        if (changes['isDraggable']) this.isDraggable = changes['isDraggable'].currentValue;\r\n        if (changes['groupBy']) this.tdss.setGroupBy(changes['groupBy'].currentValue);\r\n        this.updateGroupData();\r\n        this.sortRows('key');\r\n\r\n        console.log('tdss', this.tdss.state());\r\n    }\r\n\r\n    trackBy(index: any) {\r\n        return index;\r\n    }\r\n\r\n    private updateGroupData(): void {\r\n        const groupByVar = this.tdss.get('preferences').groupBy;\r\n        const groupData =\r\n            groupByVar && groupByVar !== 'key'\r\n                ? this.groupByData(this.tdss.get('dataSource'), groupByVar)\r\n                : ({ key: this.tdss.get('dataSource') } as { [key: string]: RowData[] });\r\n        this.groupData.value = { ...groupData };\r\n    }\r\n\r\n    objectKeysGroupData(obj: any): any {\r\n        return Object.keys(obj);\r\n    }\r\n\r\n    private groupByData(array: RowData[], key: string): { [key: string]: RowData[] } {\r\n        const gKey = key.toLowerCase();\r\n        return array.reduce((result, currentValue) => {\r\n            const normalizedCurrentValue: RowData = Object.keys(currentValue).reduce((acc, k) => {\r\n                acc[k.toLowerCase()] = currentValue[k];\r\n                return acc;\r\n            }, {} as RowData);\r\n\r\n            const groupKey = normalizedCurrentValue[gKey] as string;\r\n            if (!result[groupKey]) {\r\n                result[groupKey] = [];\r\n            }\r\n            result[groupKey].push(currentValue);\r\n            return result;\r\n        }, {} as { [key: string]: RowData[] });\r\n    }\r\n\r\n    isSelected(row: RowData): boolean {\r\n        const selectedRowStr = JSON.stringify(this.selectedRow.value);\r\n        const rowStr = JSON.stringify(row);\r\n        return selectedRowStr === rowStr;\r\n    }\r\n\r\n    get allRowsSelected(): boolean {\r\n        const dataSource = this.tdss.get('dataSource');\r\n        const selectedRows = this.tdss.get('selectedRows');\r\n        return dataSource.length > 0 && selectedRows.length === dataSource.length;\r\n    }\r\n\r\n    isRowSelected(rowData: any): boolean {\r\n        return this.selectedRows.value.some((selectedRow: any) => JSON.stringify(selectedRow) === JSON.stringify(rowData));\r\n    }\r\n    /**\r\n     * isSelectable actions\r\n     * @param event\r\n     * @param groupKey\r\n     */\r\n    toggleSelectAll(event: Event, groupKey: string): void {\r\n        const isChecked = (event.target as HTMLInputElement).checked;\r\n        if (isChecked) {\r\n            this.tdss.toggleSelectedAllRows();\r\n            this.groupData.value[groupKey].forEach((item) => this.selection.select(item));\r\n        } else {\r\n            this.tdss.toggleSelectedAllRows();\r\n            this.selection.clear();\r\n        }\r\n    }\r\n\r\n    toggleSelectItem(row: object): void {\r\n        const itemStr = JSON.stringify(row);\r\n        if (this.selection.selected(itemStr)) {\r\n            this.selection.deselect(itemStr);\r\n        } else {\r\n            this.selection.select(itemStr);\r\n        }\r\n        this.tdss.setSelectedRows(row);\r\n    }\r\n\r\n    sortRows(key: string): void {\r\n        const currentDirection = this.tdss.get('sortDataSource').direction;\r\n        const newDirection: 'ascending' | 'descending' = currentDirection === 'ascending' ? 'descending' : 'ascending';\r\n\r\n        this.tdss.sortDataSource({ key, direction: newDirection });\r\n        this.updateGroupData();\r\n    }\r\n    /**\r\n     *  Drag and Drop Handlers\r\n     * @param index\r\n     */\r\n    handleDragStart(index: number): void {\r\n        this.tdss.dragStart(index);\r\n    }\r\n\r\n    handleDragOver(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleDrop(index: number, event: DragEvent): void {\r\n        event.preventDefault();\r\n        this.tdss.dragDrop(index);\r\n      this.headers = this.tdss.get('headers');\r\n      console.log('groupBy', this.tdss.get('preferences').groupBy);\r\n\r\n        this.groupData.value = this.groupByData(this.tdss.get('dataSource'), this.tdss.get('preferences').groupBy ?? 'key');\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "allRowsSelected": {
                    "name": "allRowsSelected",
                    "getSignature": {
                        "name": "allRowsSelected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 120
                    }
                }
            },
            "templateData": "<div adk-selection #selection=\"adkSelection\">\r\n  <table *ngIf=\"(groupData.change$ | async) as groupData\" aria-hidden=\"true\"\r\n    class=\"w-full text-left table-auto min-w-max\">\r\n    <thead>\r\n      <ng-container\r\n        *ngTemplateOutlet=\"renderThead; context: { groupData, headers: tdss.get('headers'), selectedRows: (selectedRows.change$ | async), isSelectable, sortDataSource: tdss.get('sortDataSource')}\"></ng-container>\r\n    </thead>\r\n    <tbody>\r\n      @for(groupKey of objectKeysGroupData(groupData); track $index){\r\n      @if(groupBy && groupKey !== 'key') {\r\n      <ng-container\r\n        *ngTemplateOutlet=\"groupByRender; context: { groupData, headers, isSelectable, groupKey }\"></ng-container>\r\n      } @else {\r\n      @for(rowData of groupData[groupKey]; track $index) {\r\n      <ng-container\r\n        *ngTemplateOutlet=\"renderRow; context: { headers, rowData, rowIndex: $index, isSelectable }\"></ng-container>\r\n      }\r\n      }\r\n      }\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<ng-template #renderThead let-groupData=\"groupData\" let-header=\"headers\" let-isSelectable=\"isSelectable\"\r\n  let-sortDataSource=\"sortDataSource\" let-selectedRows=\"selectedRows\">\r\n  <tr>\r\n    @if(isSelectable) {\r\n    <th id=\"checkAll\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-1 max-w-[10px]\">\r\n      <div class=\"inline-flex items-center\">\r\n        <label for=\"selectAllCheckbox\" class=\"relative flex items-center cursor-pointer p-3 rounded-full\">\r\n          <input id=\"selectAllCheckbox\" name=\"selectAllCheckbox\" type=\"checkbox\"\r\n            (change)=\"toggleSelectAll($event, objectKeysGroupData(groupData))\"\r\n            class=\"peer relative appearance-none border rounded-md border-blue-gray-200 cursor-pointer transition-all before:content[''] before:block before:bg-blue-gray-500 before:w-12 before:h-12 before:rounded-full before:absolute before:top-2/4 before:left-2/4 before:-translate-y-2/4 before:-translate-x-2/4 before:opacity-0 hover:before:opacity-10 before:transition-opacity checked:bg-gray-900 checked:border-gray-900 checked:before:bg-gray-900 w-4 h-4\" />\r\n        </label>\r\n      </div>\r\n    </th>\r\n    }\r\n    @for(header of headers; track $index) {\r\n    <th [id]=\"header\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-3 cursor-pointer\" [attr.key]=\"header\"\r\n      [ngClass]=\"{'border-b border-blue-gray-100 bg-blue-gray-50 p-3 cursor-pointer': true}\"\r\n      [attr.draggable]=\"isDraggable\" (dragstart)=\"handleDragStart($index)\" (dragover)=\"handleDragOver($event)\"\r\n      (drop)=\"handleDrop($index, $event)\" (drop)=\"handleDrop($index, $event)\" scope=\"col\">\r\n      <tw-typography [variant]=\"'small'\" [color]=\"'blue-gray'\"\r\n        [classStyle]=\"'flex items-center justify-between gap-2 font-normal leading-none opacity-70'\">\r\n        {{ header ?? ' ' | uppercase}}\r\n        <div class=\"flex flex-row gap-2\">\r\n          @if($index !== headers.length && isSortable) {\r\n          <tw-sortable-icon (click)=\"sortRows(header)\"\r\n            (keydown)=\"sortRows(header)\"></tw-sortable-icon>\r\n          } @if(tdss.get('sortDataSource').key === header && isSortable) {\r\n          <span>{{ sortDataSource.direction === 'ascending' ? '🔼' : '🔽' }}</span>\r\n          }\r\n        </div>\r\n      </tw-typography>\r\n    </th>\r\n    }\r\n  </tr>\r\n</ng-template>\r\n\r\n<!-- Group By Render -->\r\n<ng-template #groupByRender let-groupData=\"groupData\" let-headers=\"headers\" let-isSelectable=\"isSelectable\"\r\n  let-groupKey=\"groupKey\">\r\n  <tr>\r\n    <td [colSpan]=\"headers.length + (isSelectable ? 1 : 0) + (actionButton ? 1 : 0)\">\r\n      <adk-expansion-panel>\r\n        <ng-template #expansionPanelHeader>\r\n          {{groupKey}}\r\n        </ng-template>\r\n        <ng-template #expansionPanelBody>\r\n          <table aria-hidden=\"true\" class=\"w-full min-w-max table-auto text-left\">\r\n            <tbody>\r\n              @for(rowData of groupData[groupKey]; track $index) {\r\n              <ng-container\r\n                *ngTemplateOutlet=\"renderRow; context: { headers, rowData, rowIndex: $index, isSelectable }\">\r\n              </ng-container>\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </ng-template>\r\n      </adk-expansion-panel>\r\n    </td>\r\n  </tr>\r\n</ng-template>\r\n\r\n<!-- Render Row Table Cells -->\r\n<ng-template #renderRow let-header=\"headers\" let-rowData=\"rowData\" let-rowIndex=\"rowIndex\"\r\n  let-isSelectable=\"isSelectable\">\r\n  <tr [ngClass]=\"isSelected(rowData) ? 'bg-light-blue-50': ''\" (click)=\"selectedRow.value = rowData\">\r\n    @if(isSelectable) {\r\n    <td [ngClass]=\"isSelectable ? 'p-1' : 'p-4'\" class=\"border-b border-blue-gray-50 p-1 max-h-[38px] max-w-[15px]\">\r\n      <div class=\"inline-flex items-center\">\r\n        <label class=\"relative flex items-center cursor-pointer p-3 rounded-full\" for=\"checkbox\">\r\n          <input type=\"checkbox\" [checked]=\"selection.selected(rowData)\" (change)=\"toggleSelectItem(rowData)\"\r\n            class=\"peer relative appearance-none border rounded-md border-blue-gray-200 cursor-pointer transition-all before:content[''] before:block before:bg-blue-gray-500 before:w-12 before:h-12 before:rounded-full before:absolute before:top-2/4 before:left-2/4 before:-translate-y-2/4 before:-translate-x-2/4 before:opacity-0 hover:before:opacity-10 before:transition-opacity checked:bg-gray-900 checked:border-gray-900 checked:before:bg-gray-900 w-4 h-4\" />\r\n        </label>\r\n      </div>\r\n    </td>\r\n    }\r\n    @for (header of headers; track $index) {\r\n    <td [ngClass]=\"isSelectable ? 'p-1' : 'p-2'\"\r\n      class=\"border-b border-blue-gray-50 min-h-[48.5px] min-w-[60px] max-w-[60px]\">\r\n      <tw-typography [variant]=\"'small'\" [color]=\"'blue-gray'\" class=\"font-normal ml-2\">\r\n        <!-- <pre>{{rowData | json}}</pre> -->\r\n        {{ rowData[header] }}\r\n      </tw-typography>\r\n    </td>\r\n    }\r\n  </tr>\r\n</ng-template>\r\n"
        },
        {
            "name": "TwTableCardComponent",
            "id": "component-TwTableCardComponent-e758637a7cc530d3863dabc8f143dd5bc7bbe0c5e5197dae7489f924a0596dc47b6704c8791aa950f075197b7424b5689d19c6880f0104af8736190f89bf5b12",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-card",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n        width: 100%;\n      }\n    "
            ],
            "template": "<tw-card>\n  <div class=\"adk-card-header\">\n    <tw-table-card-header\n      [title]=\"title\"\n      [subtitle]=\"subtitle\"\n      [isSearchable]=\"isSearchable\"\n      [buttons]=\"buttons\"\n      (actionKeyPress)=\"isActionChange = !isActionChange\"\n    ></tw-table-card-header>\n  </div>\n  <div class=\"adk-card-body\">\n    <tw-default-table\n      [headers]=\"headers\"\n      [rows]=\"rows\"\n      [isSelectable]=\"isSelectable\"\n      [isSortable]=\"isSortable\"\n      [isDraggable]=\"isDraggable\"\n      [groupBy]=\"this.tdss.get('preferences').groupBy ?? 'key'\"\n      [actionColName]=\"actionColName\"\n      [actionButton]=\"actionButton\"\n      [isPaginationAction]=\"paginationAction\"\n      [isActionChange]=\"isActionChange\"\n    ></tw-default-table>\n  </div>\n  @if (rows.length > 5) {\n  <div class=\"adk-card-footer\">\n    <tw-table-footer (actionButtonClicked)=\"actionButtonTriggered()\"></tw-table-footer>\n  </div>\n  }\n</tw-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "TemplateRef<any> | string",
                    "decorators": []
                },
                {
                    "name": "actionColName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "groupBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSearchable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "RowData[]",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionKeyPress",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isActionChange",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "paginationAction",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methodsClass": [
                {
                    "name": "actionButtonTriggered",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isActionTriggered",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "TwDefaultTableComponent",
                    "type": "component"
                },
                {
                    "name": "TwTableHeaderComponent",
                    "type": "component"
                },
                {
                    "name": "TwTableFooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef, inject } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { RowData } from './models';\r\nimport { TableDataSourceService } from './table-datasource.service';\r\nimport { TwCardComponent } from '../card/tw-card.component';\r\nimport { TwDefaultTableComponent } from './tw-table.component';\r\nimport { TwTableFooterComponent } from './tw-table-footer.component';\r\nimport { TwTableHeaderComponent } from './tw-table-header.component';\r\n\r\n@Component({\r\n  selector: 'tw-table-card',\r\n  standalone: true,\r\n  imports: [CommonModule, TwCardComponent, TwDefaultTableComponent, TwTableHeaderComponent, TwTableFooterComponent],\r\n  template: `\r\n    <tw-card>\r\n      <div class=\"adk-card-header\">\r\n        <tw-table-card-header\r\n          [title]=\"title\"\r\n          [subtitle]=\"subtitle\"\r\n          [isSearchable]=\"isSearchable\"\r\n          [buttons]=\"buttons\"\r\n          (actionKeyPress)=\"isActionChange = !isActionChange\"\r\n        ></tw-table-card-header>\r\n      </div>\r\n      <div class=\"adk-card-body\">\r\n        <tw-default-table\r\n          [headers]=\"headers\"\r\n          [rows]=\"rows\"\r\n          [isSelectable]=\"isSelectable\"\r\n          [isSortable]=\"isSortable\"\r\n          [isDraggable]=\"isDraggable\"\r\n          [groupBy]=\"this.tdss.get('preferences').groupBy ?? 'key'\"\r\n          [actionColName]=\"actionColName\"\r\n          [actionButton]=\"actionButton\"\r\n          [isPaginationAction]=\"paginationAction\"\r\n          [isActionChange]=\"isActionChange\"\r\n        ></tw-default-table>\r\n      </div>\r\n      @if (rows.length > 5) {\r\n      <div class=\"adk-card-footer\">\r\n        <tw-table-footer (actionButtonClicked)=\"actionButtonTriggered()\"></tw-table-footer>\r\n      </div>\r\n      }\r\n    </tw-card>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class TwTableCardComponent {\r\n  tdss = inject(TableDataSourceService);\r\n  @Input() isSelectable = false;\r\n  @Input() isSortable = false;\r\n  @Input() isDraggable = false;\r\n  @Input() isSearchable = false;\r\n  @Input() headers: string[] = [];\r\n  @Input() actionColName?: string;\r\n  @Input() actionButton?: TemplateRef<any> | string;\r\n  @Input() rows: RowData[] = [];\r\n  @Input() groupBy = '';\r\n  @Input() title?: string;\r\n  @Input() subtitle?: string;\r\n  @Input() buttons: {\r\n    label: string;\r\n    onClick: () => void;\r\n    color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger';\r\n    icon: string;\r\n  }[] = [];\r\n  @Output() actionKeyPress = new EventEmitter<boolean>();\r\n\r\n  paginationAction = false;\r\n  isActionChange = false;\r\n\r\n  isActionTriggered() {\r\n    this.isActionChange = !this.isActionChange;\r\n  }\r\n\r\n  actionButtonTriggered() {\r\n    this.paginationAction = !this.paginationAction;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n        width: 100%;\n      }\n    \n",
            "extends": []
        },
        {
            "name": "TwTableFooterComponent",
            "id": "component-TwTableFooterComponent-d13f0cbcd31bfb296238df70a6df7e2d576d8b6863bda21caad2782adcf2f7f8009d72123b483e546f4f548262a2c44c3aaa228c57b84a42be803c06ae3d8cac",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-footer",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n        width: 100%;\n      }\n    "
            ],
            "template": "<div class=\"flex items-center justify-between border-t border-gray-50 p-4\">\n  <tw-typography variant=\"small\" color=\"gray\" class=\"w-full\" classStyle=\"flex flex-row font-normal\">\n    <span class=\"flex flex-col justify-center mr-2\" style=\"white-space: 'nowrap'\">\n      Page {{ currentPage.change$ | async }} of {{ totalPages.change$ | async }}\n    </span>\n    <adk-select [field]=\"field\" (fieldValueChange)=\"handlePageSizeChange($event)\"></adk-select>\n  </tw-typography>\n  @if((totalPages.change$ | async) ?? 0 > 1){\n  <div class=\"flex gap-2\">\n    @if((currentPage.change$ | async) ?? 0 > 1){\n    <adk-button size=\"sm\" color=\"primary\" [disabled]=\"isPreviousDisabled()\" (click)=\"handlePreviousClick()\"> Previous </adk-button>\n    }\n    <adk-button size=\"sm\" color=\"primary\" [disabled]=\"isNextDisabled()\" (click)=\"handleNextClick()\"> Next </adk-button>\n  </div>\n  }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "actionButtonClicked",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "new ImperativeObservable<number>(this.tdss.get('pagination')['currentPage'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "field",
                    "defaultValue": "paginationSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "totalPages",
                    "defaultValue": "new ImperativeObservable<number>(this.tdss.get('pagination')['totalPages'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "handleInitialPagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleNextClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePageSizeChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePreviousClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isNextDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isPreviousDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, OnInit, Output, inject } from '@angular/core';\r\n\r\nimport { ButtonComponent } from '../button.component';\r\nimport { ImperativeObservable } from '../../../utils';\r\nimport { SelectComponent } from '../../../tw-form-ui/components/types/select.component';\r\nimport { TableDataSourceService } from './table-datasource.service';\r\nimport { TwTypographyComponent } from '../typography.component';\r\nimport { paginationSelector } from './utils';\r\n\r\n@Component({\r\n  selector: 'tw-table-footer',\r\n  standalone: true,\r\n  template: `\r\n    <div class=\"flex items-center justify-between border-t border-gray-50 p-4\">\r\n      <tw-typography variant=\"small\" color=\"gray\" class=\"w-full\" classStyle=\"flex flex-row font-normal\">\r\n        <span class=\"flex flex-col justify-center mr-2\" style=\"white-space: 'nowrap'\">\r\n          Page {{ currentPage.change$ | async }} of {{ totalPages.change$ | async }}\r\n        </span>\r\n        <adk-select [field]=\"field\" (fieldValueChange)=\"handlePageSizeChange($event)\"></adk-select>\r\n      </tw-typography>\r\n      @if((totalPages.change$ | async) ?? 0 > 1){\r\n      <div class=\"flex gap-2\">\r\n        @if((currentPage.change$ | async) ?? 0 > 1){\r\n        <adk-button size=\"sm\" color=\"primary\" [disabled]=\"isPreviousDisabled()\" (click)=\"handlePreviousClick()\"> Previous </adk-button>\r\n        }\r\n        <adk-button size=\"sm\" color=\"primary\" [disabled]=\"isNextDisabled()\" (click)=\"handleNextClick()\"> Next </adk-button>\r\n      </div>\r\n      }\r\n    </div>\r\n  `,\r\n  imports: [CommonModule, AsyncPipe, TwTypographyComponent, ButtonComponent, SelectComponent],\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class TwTableFooterComponent implements OnInit {\r\n  tdss = inject(TableDataSourceService);\r\n  @Output() actionButtonClicked = new EventEmitter<boolean>();\r\n  currentPage = new ImperativeObservable<number>(this.tdss.get('pagination')['currentPage']);\r\n  totalPages = new ImperativeObservable<number>(this.tdss.get('pagination')['totalPages']);\r\n\r\n  field = paginationSelector;\r\n\r\n  ngOnInit(): void {\r\n    this.handleInitialPagination();\r\n  }\r\n\r\n  isNextDisabled() {\r\n    return this.currentPage.value >= this.totalPages.value;\r\n  }\r\n\r\n  isPreviousDisabled() {\r\n    return this.currentPage.value <= 1;\r\n  }\r\n\r\n  handleInitialPagination(): void {\r\n    this.tdss.setPaginationState({ currentPage: 1, pageSize: 5 });\r\n    this.updateValues();\r\n    this.actionButtonClicked.emit();\r\n  }\r\n\r\n  handlePageSizeChange(e: any): void {\r\n    const pageSize = typeof e === 'string' ? parseInt(e, 10) : e;\r\n    this.tdss.setPaginationState({ currentPage: 1, pageSize });\r\n    this.updateValues();\r\n\r\n    this.actionButtonClicked.emit(true);\r\n  }\r\n\r\n  handleNextClick(): void {\r\n    this.tdss.setPaginationState({ currentPage: this.currentPage.value + 1 });\r\n    this.updateValues();\r\n    this.actionButtonClicked.emit(true);\r\n  }\r\n\r\n  handlePreviousClick(): void {\r\n    this.tdss.setPaginationState({ currentPage: this.currentPage.value - 1 });\r\n    this.updateValues();\r\n    this.actionButtonClicked.emit(true);\r\n  }\r\n\r\n  private updateValues() {\r\n    this.currentPage.value = this.tdss.get('pagination')['currentPage'];\r\n    this.totalPages.value = this.tdss.get('pagination')['totalPages'];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n        width: 100%;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TwTableHeaderComponent",
            "id": "component-TwTableHeaderComponent-3548e3f0b37077cebfa97ec268b167a4f46835856d12ac877e09644b8724b38a082f30392acaadbeeb2847b99e73bf45ea987070604509e0ab06e6a7de05559b",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-card-header",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n        width: 100%;\n      }\n      .material-symbols-outlined {\n        font-size: 16px !important;\n      }\n    "
            ],
            "template": "<div class=\"relative bg-clip-border mt-4 mx-4 bg-white text-gray-700 rounded-none overflow-visible\">   <div class=\"mb-2 flex items-center justify-between gap-8\">\n     <div>\n       @if(title){\n       <tw-typography\n         variant=\"h5\"\n         color=\"blue-gray\"\n         classStyle=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n         >{{ title }}</tw-typography\n       >\n       } @if(subtitle){\n       <tw-typography color=\"gray\" classStyle=\"mt-1 font-normal\">{{ subtitle }}</tw-typography>\n       }\n     </div>\n     <div class=\"flex shrink-0 flex-col gap-2 sm:flex-row\">\n       @if(buttons && buttons.length > 0){ @for(button of buttons; track $index){\n       <div class=\"flex items-center gap-3 cursor-pointer\" (click)=\"button.onClick()\">\n         <adk-button [color]=\"button.color\" (click)=\"button.onClick()\">\n           <span class=\"flex items-center gap-2\">\n             @if(button.icon){\n             <span class=\"material-symbols-outlined\">{{ button.icon }}</span> }{{ button.label }}</span\n           >\n         </adk-button>\n       </div>\n       } }\n       <div class=\"flex items-center gap-3 cursor-pointer\">\n         <tw-table-settings-dialog (triggerUpdate)=\"handlePreferences()\"></tw-table-settings-dialog>\n       </div>\n     </div>\n   </div>\n\n   <div class=\"flex flex-col items-center justify-between gap-4 md:flex-row\">\n     <!-- @if(tabs?.length){ -->\n     <!-- <Tabs value=\"{tabs.length\">\n               0 ? tabs[0].value : ''} class=\"w-full md:w-max\">\n               <TabsHeader>\n                   {tabs.map(({ label, value }) => (\n                   <Tab key=\"{value}\" value=\"{value}\"> &nbsp;&nbsp;{label}&nbsp;&nbsp; </Tab>\n                   ))}\n               </TabsHeader>\n           </Tabs> -->\n     <!-- } -->\n   </div>\n   @if((searchColumn.change$ | async) && isSearchable){\n   <form *ngIf=\"field.change$ | async as field\" [formGroup]=\"formGroup\" class=\"flex flex-row gap-2 w-full flex-wrap z-[20000]\">\n     <adk-fields [fieldConfig]=\"[field]\"></adk-fields>\n   </form>\n   }\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "buttons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "isSearchable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "searchColumnValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionKeyPress",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "field",
                    "defaultValue": "new ImperativeObservable<Field | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "isFirstChange",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "searchColumn",
                    "defaultValue": "new ImperativeObservable<string | null>(this.tdss.get('filterDataSource').column)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methodsClass": [
                {
                    "name": "handleFiltering",
                    "args": [
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setField",
                    "args": [
                        {
                            "name": "column",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FieldsComponent",
                    "type": "component"
                },
                {
                    "name": "TwTableSettingsDialogComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AdkFormGroup, Field, FieldsComponent } from '../../../tw-form-ui';\r\nimport { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, inject } from '@angular/core';\r\nimport { AsyncPipe, CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from '../button.component';\r\nimport { ImperativeObservable } from '../../../utils';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { TableDataSourceService } from './table-datasource.service';\r\nimport { TwTableSettingsDialogComponent } from './tw-table-settings-dialog.component';\r\nimport { TwTypographyComponent } from '../typography.component';\r\nimport { searchColumnSelector } from './utils';\r\n\r\n@Component({\r\n  selector: 'tw-table-card-header',\r\n  standalone: true,\r\n  template: ` <div class=\"relative bg-clip-border mt-4 mx-4 bg-white text-gray-700 rounded-none overflow-visible\">\r\n    <div class=\"mb-2 flex items-center justify-between gap-8\">\r\n      <div>\r\n        @if(title){\r\n        <tw-typography\r\n          variant=\"h5\"\r\n          color=\"blue-gray\"\r\n          classStyle=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\r\n          >{{ title }}</tw-typography\r\n        >\r\n        } @if(subtitle){\r\n        <tw-typography color=\"gray\" classStyle=\"mt-1 font-normal\">{{ subtitle }}</tw-typography>\r\n        }\r\n      </div>\r\n      <div class=\"flex shrink-0 flex-col gap-2 sm:flex-row\">\r\n        @if(buttons && buttons.length > 0){ @for(button of buttons; track $index){\r\n        <div class=\"flex items-center gap-3 cursor-pointer\" (click)=\"button.onClick()\">\r\n          <adk-button [color]=\"button.color\" (click)=\"button.onClick()\">\r\n            <span class=\"flex items-center gap-2\">\r\n              @if(button.icon){\r\n              <span class=\"material-symbols-outlined\">{{ button.icon }}</span> }{{ button.label }}</span\r\n            >\r\n          </adk-button>\r\n        </div>\r\n        } }\r\n        <div class=\"flex items-center gap-3 cursor-pointer\">\r\n          <tw-table-settings-dialog (triggerUpdate)=\"handlePreferences()\"></tw-table-settings-dialog>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"flex flex-col items-center justify-between gap-4 md:flex-row\">\r\n      <!-- @if(tabs?.length){ -->\r\n      <!-- <Tabs value=\"{tabs.length\">\r\n                0 ? tabs[0].value : ''} class=\"w-full md:w-max\">\r\n                <TabsHeader>\r\n                    {tabs.map(({ label, value }) => (\r\n                    <Tab key=\"{value}\" value=\"{value}\"> &nbsp;&nbsp;{label}&nbsp;&nbsp; </Tab>\r\n                    ))}\r\n                </TabsHeader>\r\n            </Tabs> -->\r\n      <!-- } -->\r\n    </div>\r\n    @if((searchColumn.change$ | async) && isSearchable){\r\n    <form *ngIf=\"field.change$ | async as field\" [formGroup]=\"formGroup\" class=\"flex flex-row gap-2 w-full flex-wrap z-[20000]\">\r\n      <adk-fields [fieldConfig]=\"[field]\"></adk-fields>\r\n    </form>\r\n    }\r\n  </div>`,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    AsyncPipe,\r\n    TwTypographyComponent,\r\n    ButtonComponent,\r\n    FieldsComponent,\r\n    TwTableSettingsDialogComponent,\r\n  ],\r\n  hostDirectives: [AdkFormGroup],\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n      }\r\n      .material-symbols-outlined {\r\n        font-size: 16px !important;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class TwTableHeaderComponent implements OnInit, AfterViewInit {\r\n  #formGroup = inject(AdkFormGroup, { self: true });\r\n  tdss = inject(TableDataSourceService);\r\n  @Input() title?: string;\r\n  @Input() subtitle?: string;\r\n  @Input() isSearchable = false;\r\n  @Input() searchColumnValue?: string;\r\n  @Input() buttons: {\r\n    label: string;\r\n    onClick: () => void;\r\n    color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger';\r\n    icon: string;\r\n  }[] = [];\r\n  @Output() actionKeyPress = new EventEmitter<boolean>();\r\n\r\n  searchColumn = new ImperativeObservable<string | null>(this.tdss.get('filterDataSource').column);\r\n  field = new ImperativeObservable<Field | undefined>(undefined);\r\n  isFirstChange = true;\r\n\r\n  get formGroup() {\r\n    return this.#formGroup.formGroup();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.searchColumn.value = this.tdss.get('filterDataSource').column;\r\n    this.searchColumn.change$.subscribe((e: any) => {\r\n      this.#formGroup.reset();\r\n      this.field.value = this.setField(e);\r\n      this.#formGroup.setFormGroup([this.field.value]);\r\n      this.formGroup.valueChanges.subscribe((e) => {\r\n        this.handleFiltering(e);\r\n      });\r\n      if (!this.isFirstChange) {\r\n        this.actionKeyPress.emit(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.tdss.initialFilterSearch();\r\n  }\r\n\r\n  handlePreferences(): void {\r\n    this.searchColumn.value = this.tdss.get('filterDataSource').column;\r\n    this.actionKeyPress.emit(true);\r\n  }\r\n\r\n  handleFiltering({ searchColumn }: any): void {\r\n    this.tdss.setFilter({ column: this.searchColumn.value, value: searchColumn });\r\n    this.actionKeyPress.emit(true);\r\n  }\r\n\r\n  setField(column: string | undefined): Field {\r\n    this.resetField();\r\n    setTimeout(() => {\r\n      console.info('Timed column value update');\r\n    }, 1000);\r\n    return searchColumnSelector(column ?? '');\r\n  }\r\n\r\n  private resetField(): void {\r\n    this.field.value = undefined;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n        width: 100%;\n      }\n      .material-symbols-outlined {\n        font-size: 16px !important;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 106
                    }
                }
            }
        },
        {
            "name": "TwTableSettingsDialogComponent",
            "id": "component-TwTableSettingsDialogComponent-c4c877b22dd64710d7e8b3f2400d143b4234da32bce64f6880e76efef8b75950763d93eb5c775569bf5da3dc9a5e14dc137d42aa50fc07797581725f3436d3ad",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-settings-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-settings-dialog",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n        width: 100%;\n      }\n    "
            ],
            "template": "<adk-settings-icon (click)=\"openDialog()\"> </adk-settings-icon>\n<tw-dialog [isOpen]=\"isDialogOpen\" (close)=\"closeDialog()\" class=\"bg-transparent shadow-none\">\n  <tw-card [isHeaderWrapped]=\"true\" [isFooterWrapped]=\"true\">\n    <tw-typography\n      variant=\"h3\"\n      color=\"blue-gray\"\n      class=\"adk-card-header\"\n      classStyle=\"antialiased tracking-normal font-sans text-2xl font-semibold leading-snug text-blue-gray-900 flex flex-row\"\n    >\n      Column Preferences\n      <div class=\"grow\"></div>\n      <adk-icon-button (click)=\"closeDialog()\"></adk-icon-button>\n    </tw-typography>\n    <div class=\"adk-card-body\">\n      <form [formGroup]=\"formGroup\">\n        @if (visibleColumnField) {\n        <tw-typography class=\"adk-card-subtitle mb-3 font-normal\" variant=\"paragraph\" color=\"gray\">\n          Customize the columns visibility.\n        </tw-typography>\n        <adk-fields [fieldConfig]=\"[visibleColumnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n        } @if (columnField) {\n        <tw-typography class=\"mt-4 font-normal\" variant=\"paragraph\" color=\"gray\">\n          Select the column to filter a search value\n        </tw-typography>\n        <adk-fields class=\"mt-4\" [fieldConfig]=\"[columnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n        } @if (groupByField) {\n        <adk-fields class=\"mt-4\" [fieldConfig]=\"[groupByField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\n        }\n      </form>\n    </div>\n    <div class=\"adk-card-footer\">\n      <adk-button\n        class=\"w-full\"\n        (click)=\"closeDialog()\"\n        customClasses=\"align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg bg-blue-500 text-white shadow-md shadow-blue-500/20 hover:shadow-lg hover:shadow-blue-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none block w-full\"\n      >\n        Close Preferences\n      </adk-button>\n    </div>\n  </tw-card>\n</tw-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "triggerUpdate",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "columnField",
                    "defaultValue": "preferenceColumnSelector(this.tdss.get('headers'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "groupByField",
                    "defaultValue": "preferenceGroupBySelector(this.tdss.get('headers'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "isDialogOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "visibleColumnField",
                    "defaultValue": "preferenceVisibilitySelector(this.tdss.get('headers'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUpdatedGroupBy",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUpdatedPreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "SettingsIconComponent",
                    "type": "component"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "IconButtonComponent",
                    "type": "component"
                },
                {
                    "name": "DialogComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FieldsComponent",
                    "type": "component"
                },
                {
                    "name": "FieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AdkFormGroup, FieldsComponent } from '../../../tw-form-ui';\r\nimport { AfterViewInit, Component, EventEmitter, OnInit, Output, inject } from '@angular/core';\r\nimport { SettingsIconComponent, preferenceColumnSelector, preferenceGroupBySelector, preferenceVisibilitySelector } from './utils';\r\nimport { distinct, distinctUntilChanged } from 'rxjs';\r\n\r\nimport { ButtonComponent } from '../button.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DialogComponent } from '../dialog/dialog.component';\r\nimport { FieldComponent } from '../../../tw-form-ui/components/field.component';\r\nimport { IconButtonComponent } from './utils/icon-button.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { TableDataSourceService } from './table-datasource.service';\r\nimport { TwCardComponent } from '../card/tw-card.component';\r\nimport { TwTypographyComponent } from '../typography.component';\r\n\r\n@Component({\r\n  selector: 'tw-table-settings-dialog',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    SettingsIconComponent,\r\n    TwCardComponent,\r\n    TwTypographyComponent,\r\n    IconButtonComponent,\r\n    DialogComponent,\r\n    ButtonComponent,\r\n    FieldsComponent,\r\n    FieldComponent,\r\n  ],\r\n  hostDirectives: [AdkFormGroup],\r\n  template: `\r\n    <adk-settings-icon (click)=\"openDialog()\"> </adk-settings-icon>\r\n    <tw-dialog [isOpen]=\"isDialogOpen\" (close)=\"closeDialog()\" class=\"bg-transparent shadow-none\">\r\n      <tw-card [isHeaderWrapped]=\"true\" [isFooterWrapped]=\"true\">\r\n        <tw-typography\r\n          variant=\"h3\"\r\n          color=\"blue-gray\"\r\n          class=\"adk-card-header\"\r\n          classStyle=\"antialiased tracking-normal font-sans text-2xl font-semibold leading-snug text-blue-gray-900 flex flex-row\"\r\n        >\r\n          Column Preferences\r\n          <div class=\"grow\"></div>\r\n          <adk-icon-button (click)=\"closeDialog()\"></adk-icon-button>\r\n        </tw-typography>\r\n        <div class=\"adk-card-body\">\r\n          <form [formGroup]=\"formGroup\">\r\n            @if (visibleColumnField) {\r\n            <tw-typography class=\"adk-card-subtitle mb-3 font-normal\" variant=\"paragraph\" color=\"gray\">\r\n              Customize the columns visibility.\r\n            </tw-typography>\r\n            <adk-fields [fieldConfig]=\"[visibleColumnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\r\n            } @if (columnField) {\r\n            <tw-typography class=\"mt-4 font-normal\" variant=\"paragraph\" color=\"gray\">\r\n              Select the column to filter a search value\r\n            </tw-typography>\r\n            <adk-fields class=\"mt-4\" [fieldConfig]=\"[columnField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\r\n            } @if (groupByField) {\r\n            <adk-fields class=\"mt-4\" [fieldConfig]=\"[groupByField]\" [wrapperClass]=\"'flex flex-col gap-4'\"></adk-fields>\r\n            }\r\n          </form>\r\n        </div>\r\n        <div class=\"adk-card-footer\">\r\n          <adk-button\r\n            class=\"w-full\"\r\n            (click)=\"closeDialog()\"\r\n            customClasses=\"align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg bg-blue-500 text-white shadow-md shadow-blue-500/20 hover:shadow-lg hover:shadow-blue-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none block w-full\"\r\n          >\r\n            Close Preferences\r\n          </adk-button>\r\n        </div>\r\n      </tw-card>\r\n    </tw-dialog>\r\n  `,\r\n  styles: [\r\n    `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class TwTableSettingsDialogComponent implements OnInit, AfterViewInit {\r\n  @Output() triggerUpdate = new EventEmitter<boolean>();\r\n  #formGroup = inject(AdkFormGroup, { self: true });\r\n  isDialogOpen = false;\r\n  tdss = inject(TableDataSourceService);\r\n  visibleColumnField = preferenceVisibilitySelector(this.tdss.get('headers'));\r\n  columnField = preferenceColumnSelector(this.tdss.get('headers'));\r\n  groupByField = preferenceGroupBySelector(this.tdss.get('headers'));\r\n\r\n  get formGroup() {\r\n    return this.#formGroup.formGroup();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.#formGroup.setFormGroup([this.visibleColumnField, this.columnField, this.groupByField]);\r\n    let previousValue = this.formGroup.value;\r\n    const headers = this.tdss.get('headers');\r\n\r\n    this.formGroup.valueChanges.pipe(distinctUntilChanged()).subscribe((currentValue) => {\r\n      let selectedVisibleColumns: string[] = [];\r\n      let action = { visibleColumns: selectedVisibleColumns, groupBy: currentValue['groupBy'] };\r\n\r\n      // Check if any relevant value has changed\r\n      let hasChanged = false;\r\n\r\n      if (previousValue['groupBy'] !== currentValue['groupBy']) {\r\n        hasChanged = true;\r\n      }\r\n\r\n      if (previousValue['column'] !== currentValue['column']) {\r\n        hasChanged = true;\r\n      }\r\n\r\n      headers.forEach((element) => {\r\n        if (previousValue[element] !== currentValue[element]) {\r\n          hasChanged = true;\r\n        }\r\n      });\r\n\r\n      if (!hasChanged) {\r\n        return;\r\n      }\r\n\r\n      // Update previous value\r\n      previousValue = { ...currentValue };\r\n\r\n      // Process the changes\r\n      headers.forEach((element) => {\r\n        if (currentValue[element]) selectedVisibleColumns.push(element);\r\n      });\r\n\r\n      action.visibleColumns = selectedVisibleColumns;\r\n      action.groupBy = currentValue['groupBy'] === 'none' ? 'key' : currentValue['groupBy'];\r\n      this.tdss.setPreferences(action);\r\n      this.tdss.setFilter({ column: currentValue['column'], value: '' });\r\n      this.triggerUpdate.emit(true);\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.visibleColumnField = preferenceVisibilitySelector(this.tdss.get('headers'));\r\n    this.columnField = preferenceColumnSelector(this.tdss.get('headers'));\r\n    this.groupByField = preferenceGroupBySelector(this.tdss.get('headers'));\r\n  }\r\n\r\n  openDialog() {\r\n    this.isDialogOpen = true;\r\n  }\r\n\r\n  closeDialog() {\r\n    // Optionally save dialog preferences using the service\r\n    // const updatedPreferences = this.getUpdatedPreferences();\r\n    // const updatedGroupBy = this.getUpdatedGroupBy();\r\n\r\n    // this.tdss.setGroupBy(updatedGroupBy);\r\n    // // Assume setPreferences is a method you'd implement in the service\r\n    // this.tdss.updatePreferences(updatedPreferences);\r\n\r\n    this.isDialogOpen = false;\r\n    this.triggerUpdate.emit(this.isDialogOpen);\r\n  }\r\n\r\n  getUpdatedPreferences(): string[] {\r\n    // Implement logic to get updated preferences from the dialog\r\n    return ['column1', 'column2']; // Example return value\r\n  }\r\n\r\n  getUpdatedGroupBy(): string {\r\n    // Implement logic to get updated group by from the dialog\r\n    return 'column1'; // Example return value\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n        width: 100%;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                }
            }
        },
        {
            "name": "TwTypographyComponent",
            "id": "component-TwTypographyComponent-2ab267817c6e9143db689432cd98c994cbd209eaa11f7dde2c98c240b625b470029d734515022423856064adcb51be53eb973757069a53bf127a62dcd6131d4f",
            "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-typography",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "<p [ngClass]=\"[variantClass, colorClass, classStyle, 'block', 'antialiased', 'font-sans']\" style=\"white-space: nowrap;\">\n    <ng-content></ng-content>\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'blue-gray'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Color",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'paragraph'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\n\r\ntype Variant = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'lead' | 'paragraph' | 'small';\r\ntype Color =\r\n    | 'inherit'\r\n    | 'current'\r\n    | 'black'\r\n    | 'white'\r\n    | 'blue-gray'\r\n    | 'gray'\r\n    | 'brown'\r\n    | 'deep-orange'\r\n    | 'orange'\r\n    | 'amber'\r\n    | 'yellow'\r\n    | 'lime'\r\n    | 'light-green'\r\n    | 'green'\r\n    | 'teal'\r\n    | 'cyan'\r\n    | 'light-blue'\r\n    | 'blue'\r\n    | 'indigo'\r\n    | 'deep-purple'\r\n    | 'purple'\r\n    | 'pink'\r\n    | 'red';\r\n\r\n@Component({\r\n    selector: 'tw-typography',\r\n    standalone: true,\r\n    imports: [CommonModule],\r\n    template: `\r\n        <p [ngClass]=\"[variantClass, colorClass, classStyle, 'block', 'antialiased', 'font-sans']\" style=\"white-space: nowrap;\">\r\n            <ng-content></ng-content>\r\n        </p>\r\n    `,\r\n    styles: [\r\n        `\r\n            :host {\r\n                display: block;\r\n            }\r\n        `,\r\n    ],\r\n})\r\nexport class TwTypographyComponent implements OnChanges {\r\n    @Input() variant: Variant = 'paragraph';\r\n    @Input() color: Color = 'blue-gray';\r\n    @Input() classStyle = '';\r\n\r\n    get variantClass(): string {\r\n        switch (this.variant) {\r\n            case 'h1':\r\n                return 'text-4xl';\r\n            case 'h2':\r\n                return 'text-3xl';\r\n            case 'h3':\r\n                return 'text-2xl';\r\n            case 'h4':\r\n                return 'text-xl';\r\n            case 'h5':\r\n                return 'text-lg';\r\n            case 'h6':\r\n                return 'text-base';\r\n            case 'lead':\r\n                return 'text-lg leading-relaxed';\r\n            case 'paragraph':\r\n                return 'text-base';\r\n            case 'small':\r\n                return 'text-sm';\r\n            default:\r\n                return 'text-base';\r\n        }\r\n    }\r\n\r\n    get colorClass(): string {\r\n        return `text-${this.color}`;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes['variant']) this.variant = changes['variant'].currentValue;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "variantClass": {
                    "name": "variantClass",
                    "getSignature": {
                        "name": "variantClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 53
                    }
                },
                "colorClass": {
                    "name": "colorClass",
                    "getSignature": {
                        "name": "colorClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 78
                    }
                }
            }
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "addCustomStylesheet",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\r\n    const link = document.createElement('link');\r\n    link.rel = 'stylesheet';\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,1,0';\r\n    document.head.appendChild(link);\r\n}"
            },
            {
                "name": "ButtonActionsTesting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvasElement.querySelector('adk-button');\r\n        if (button) {\r\n            await userEvent.click(button);\r\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\r\n        }\r\n    },\r\n}"
            },
            {
                "name": "CardActionsTesting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const card = canvasElement.querySelector('adk-card');\r\n        if (card) {\r\n            await userEvent.click(card);\r\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\r\n        }\r\n    },\r\n}"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    InputComponent,\r\n    CheckboxComponent,\r\n    RadioComponent,\r\n    TextareaComponent,\r\n    PasswordComponent,\r\n    SelectComponent,\r\n    MultiSelectComponent,\r\n    SelectComponent,\r\n    EmailComponent,\r\n]"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\r\n    stories: [\r\n        '../src/**/*.mdx',\r\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\r\n        '../projects/ng-lib/src/**/*.mdx',\r\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\r\n    ],\r\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\r\n    framework: {\r\n        name: '@storybook/angular',\r\n        options: {},\r\n    },\r\n    docs: {\r\n        autodocs: 'tag',\r\n    },\r\n}"
            },
            {
                "name": "customViewport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    large: {\r\n        name: 'Large Screen',\r\n        styles: {\r\n            width: '1920px',\r\n            height: '1080px',\r\n        },\r\n    },\r\n    small: {\r\n        name: 'Small Screen',\r\n        styles: {\r\n            width: '800px',\r\n            height: '963px',\r\n        },\r\n    },\r\n}"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'danger',\r\n    },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    headers: ['name', 'job', 'date'],\r\n    rows: mockData,\r\n    isSelectable: false,\r\n    isSortable: true,\r\n    isDraggable: false,\r\n    title: 'Table Card',\r\n    subtitle: 'This is a table card',\r\n    buttons: [\r\n      { label: 'View ALL', onClick: () => {}, color: 'primary', icon: '' },\r\n      { label: 'add member', onClick: () => {}, color: 'primary', icon: 'person_add' },\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "Draggable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        ...Default.args,\r\n        isDraggable: true,\r\n    },\r\n}"
            },
            {
                "name": "Grouped",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        ...Default.args,\r\n        groupBy: 'job',\r\n    },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/input works!/gi)).toBeTruthy();\r\n    },\r\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/multi-select works!/gi)).toBeTruthy();\r\n    },\r\n}"
            },
            {
                "name": "isEqual",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(obj1, obj2) => {\r\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: Button,\r\n  tags: ['autodocs'],\r\n  render: (args: Button) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: Header,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  render: (args) => ({ props: args }),\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: Page,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button, Header],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldComponent>",
                "defaultValue": "{\r\n    component: FieldComponent,\r\n    title: '(TW) Angular UI / Components / Form / Field',\r\n    args: {\r\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\r\n    },\r\n    tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldsComponent>",
                "defaultValue": "{\r\n    component: FieldsComponent,\r\n    title: '(TW) Angular UI / Components / Form / Fields',\r\n    tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<>",
                "defaultValue": "{\r\n    component: DragDropExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Draggable Table',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldListDirective>",
                "defaultValue": "{\r\n    component: FieldListDirective,\r\n    title: '(TW) Angular UI / Directives / Form / Field List',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldDirectiveComponent>",
                "defaultValue": "{\r\n    component: FieldDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Form / Field',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HttpClientDirectiveComponent>",
                "defaultValue": "{\r\n    component: HttpClientDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Http Client',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ListDirectiveComponent>",
                "defaultValue": "{\r\n    component: ListDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / List',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PaginationDirectiveComponent>",
                "defaultValue": "{\r\n    component: PaginationDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Pagination',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TableExampleComponent>",
                "defaultValue": "{\r\n    component: TableExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Selection',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SortableTableExampleComponent>",
                "defaultValue": "{\r\n    component: SortableTableExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Sortable Table',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonWrapperComponent>",
                "defaultValue": "{\r\n    component: ButtonWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Button',\r\n    tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardWrapperComponent>",
                "defaultValue": "{\r\n    component: CardWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Card',\r\n    tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PillWrapperComponent>",
                "defaultValue": "{\r\n    component: PillWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Pill',\r\n    tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SidebarComponent>",
                "defaultValue": "{\r\n    component: SidebarComponent,\r\n    title: '(TW) Angular UI / Components / Sidebar',\r\n    decorators: [\r\n        // Add any decorators you need (e.g., withModules)\r\n    ],\r\n    parameters: {\r\n        // Add any global parameters here\r\n    },\r\n    argTypes: {\r\n        // Add argTypes as needed\r\n    },\r\n    tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CheckboxComponent>",
                "defaultValue": "{\r\n    component: CheckboxComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Checkbox',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<EmailComponent>",
                "defaultValue": "{\r\n    component: EmailComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Email',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\r\n    component: InputComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Text',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MultiSelectComponent>",
                "defaultValue": "{\r\n    component: MultiSelectComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Select',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PasswordComponent>",
                "defaultValue": "{\r\n    component: PasswordComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Password',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<RadioComponent>",
                "defaultValue": "{\r\n    component: RadioComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Radio',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SelectComponent>",
                "defaultValue": "{\r\n    component: SelectComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Basic Select',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TextareaComponent>",
                "defaultValue": "{\r\n    component: TextareaComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Textarea',\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwTableCardComponent>",
                "defaultValue": "{\r\n    title: 'TailwindUI/Components/Tables/Table Card',\r\n    component: TwTableCardComponent,\r\n    tags: ['autodocs'],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwDefaultTableComponent>",
                "defaultValue": "{\r\n    title: 'TailwindUI/Components/Tables/Default Table',\r\n    component: TwDefaultTableComponent,\r\n    tags: ['autodocs'],\r\n    parameters: {\r\n        layout: 'fullscreen',\r\n    },\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [TwDefaultTableComponent],\r\n        }),\r\n        componentWrapperDecorator(\r\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\r\n              ${story}\r\n            </div>`\r\n        ),\r\n    ],\r\n    args: {},\r\n}"
            },
            {
                "name": "mockData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        name: 'John Michael',\r\n        job: 'Manager',\r\n        date: '23/04/10',\r\n    },\r\n    {\r\n        name: 'Alexa Johnson',\r\n        job: 'CEO',\r\n        date: '23/04/02',\r\n    },\r\n    {\r\n        name: 'Sierra Brooks',\r\n        job: 'Designer',\r\n        date: '23/04/05',\r\n    },\r\n    {\r\n        name: 'Thomas Smith',\r\n        job: 'Developer',\r\n        date: '23/04/05',\r\n    },\r\n    {\r\n        name: 'Jenna Kian',\r\n        job: 'Marketing',\r\n        date: '23/04/18',\r\n    },\r\n    {\r\n        name: 'Denzel Washington',\r\n        job: 'Actor',\r\n        date: '23/04/05',\r\n    },\r\n    {\r\n        name: 'Morgan Freeman',\r\n        job: 'Actor',\r\n        date: '23/04/05',\r\n    },\r\n]"
            },
            {
                "name": "MultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('select', 'multi-select', 'name', 'Name', 'Name', {\r\n            isMultipleTag: true,\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
            },
            {
                "name": "paginationSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "FieldBuilder.createField('select', 'itemsPerPage', '5', 'Items Per Page', 'Items Per Page', {\r\n    labelClass: '',\r\n    options: [\r\n        {\r\n            value: '5',\r\n            label: '5',\r\n            id: '1',\r\n        },\r\n        {\r\n            value: '10',\r\n            label: '10',\r\n            id: '2',\r\n        },\r\n        {\r\n            value: '25',\r\n            label: '25',\r\n            id: '3',\r\n        },\r\n        {\r\n            value: '100',\r\n            label: '100',\r\n            id: '4',\r\n        },\r\n    ],\r\n})"
            },
            {
                "name": "preferenceColumnSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\r\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\r\n        return {\r\n            id: param,\r\n            value: param,\r\n            label: titleCase(param),\r\n        };\r\n    });\r\n\r\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'column', params[0], 'Column', '', {\r\n        options: [...mapVisibleColumnsOptions],\r\n    });\r\n\r\n    return {\r\n        ...columnSearchColumn,\r\n    };\r\n}"
            },
            {
                "name": "preferenceGroupBySelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\r\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\r\n        return {\r\n            id: param,\r\n            value: param,\r\n            label: titleCase(param),\r\n        };\r\n    });\r\n\r\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'groupBy', 'none', 'Group By', '', {\r\n        options: [{ id: '0', value: 'none', label: 'None' }, ...mapVisibleColumnsOptions],\r\n    });\r\n\r\n    return {\r\n        ...columnSearchColumn,\r\n    };\r\n}"
            },
            {
                "name": "preferenceVisibilitySelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(params: string[]) => {\r\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\r\n        return {\r\n            id: param,\r\n            value: true,\r\n            label: titleCase(param),\r\n        };\r\n    });\r\n\r\n    const headerCheckboxGroup: Field = FieldBuilder.createField('checkbox', 'visibleColumns', params, 'visibleColumns', 'Visible Columns', {\r\n        labelClass: '',\r\n        required: false,\r\n        options: mapVisibleColumnsOptions,\r\n    });\r\n\r\n    return headerCheckboxGroup;\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n    parameters: {\r\n        viewport: { viewport: customViewport },\r\n        actions: { argTypesRegex: '^on[A-Z].*' },\r\n        controls: {\r\n            matchers: {\r\n                color: /(background|color)$/i,\r\n                date: /Date$/,\r\n            },\r\n        },\r\n    },\r\n    decorators: [\r\n        withThemeByDataAttribute({\r\n            themes: {\r\n                light: 'light',\r\n                dark: 'dark',\r\n            },\r\n            defaultTheme: 'light',\r\n            attributeName: 'data-mode',\r\n        }),\r\n        applicationConfig({\r\n            providers: [provideAnimations()],\r\n        }),\r\n    ],\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        fieldConfig: [\r\n            FieldBuilder.createField('text', 'firstName', '', 'First Name', 'Enter first name', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n            }),\r\n            FieldBuilder.createField('text', 'lastName', '', 'Last Name', 'Enter last name', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n            }),\r\n            FieldBuilder.createField('password', 'password', '', 'Password', 'Enter password', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n            }),\r\n            FieldBuilder.createField('textarea', 'about', '', 'About', 'Enter about', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n            }),\r\n            FieldBuilder.createOptionsField(\r\n                'checkbox',\r\n                'checkbox',\r\n                'Checkbox',\r\n                'checkbox place holder',\r\n                [\r\n                    {\r\n                        value: 'optionOne',\r\n                        label: 'Option One',\r\n                        id: '1',\r\n                        description: 'Option one description',\r\n                    },\r\n                    {\r\n                        value: 'optionTwo',\r\n                        label: 'Option Two',\r\n                        id: '2',\r\n                        description: 'Option two description',\r\n                    },\r\n                ],\r\n                {\r\n                    required: true,\r\n                }\r\n            ),\r\n            FieldBuilder.createField('radio', 'radio', '', 'radio', 'radio', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n                options: [\r\n                    {\r\n                        value: 'optionOne',\r\n                        label: 'Option One',\r\n                        id: '1',\r\n                    },\r\n                    {\r\n                        value: 'optionTwo',\r\n                        label: 'Option Two',\r\n                        id: '2',\r\n                    },\r\n                ],\r\n            }),\r\n            FieldBuilder.createField('select', 'select', '', 'Select', 'Select', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n                options: [\r\n                    {\r\n                        value: 'optionOne',\r\n                        label: 'Option One',\r\n                        id: '1',\r\n                    },\r\n                    {\r\n                        value: 'optionTwo',\r\n                        label: 'Option Two',\r\n                        id: '2',\r\n                    },\r\n                    {\r\n                        value: 'optionThree',\r\n                        label: 'Option Three',\r\n                        id: '3',\r\n                    },\r\n                ],\r\n            }),\r\n            FieldBuilder.createField('select', 'multi-select', '', 'Multi Select', 'Multi Select', {\r\n                isMultipleTag: true,\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n                options: [\r\n                    {\r\n                        value: 'optionOne',\r\n                        label: 'Option One',\r\n                        id: '1',\r\n                    },\r\n                    {\r\n                        value: 'optionTwo',\r\n                        label: 'Option Two',\r\n                        id: '2',\r\n                    },\r\n                    {\r\n                        value: 'optionThree',\r\n                        label: 'Option Three',\r\n                        id: '3',\r\n                    },\r\n                ],\r\n            }),\r\n        ],\r\n        wrapperClass: 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4',\r\n    },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'primary',\r\n    },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {},\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args: any) => ({\r\n    component: SidebarComponent,\r\n    props: {\r\n        ...args,\r\n        title: 'Sidebar',\r\n        navigation: [\r\n            { link: 'home', icon: 'home', text: 'Home' },\r\n            { link: 'about', icon: 'info', text: 'About' },\r\n            { link: 'contact', icon: 'mail', text: 'Contact' },\r\n        ],\r\n    },\r\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('checkbox', 'checkbox', 'checkbox', 'checkbox', 'checkbox', {\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('email', 'email', 'Email', 'Email', 'Email', { required: true }, '', [Validators.email]),\r\n    },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\r\n    },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('password', 'password', 'password', 'password', 'password', {\r\n            required: true,\r\n        }),\r\n    },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('radio', 'radio', 'radio', 'radio', 'radio', {\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('select', 'select', 'select', 'select', 'select', {\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('textarea', 'textarea', 'textarea', 'textarea', 'textarea'),\r\n    },\r\n}"
            },
            {
                "name": "searchColumnSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Field",
                "defaultValue": "(param) =>\r\n    FieldBuilder.createField('text', 'searchColumn', '', `Search by ${titleCase(param)}`, ``, {\r\n        labelClass: '',\r\n        required: false,\r\n    })"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'secondary',\r\n    },\r\n}"
            },
            {
                "name": "Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('select', 'select', 'name', 'Name', 'Name', {\r\n            isMultipleTag: false,\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
            },
            {
                "name": "Selectable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        ...Default.args,\r\n        isSelectable: true,\r\n    },\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'success',\r\n    },\r\n}"
            },
            {
                "name": "TableWithAllSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        isSelectable: true,\r\n        isSortable: true,\r\n        headers: ['Name', 'Job', 'Date'],\r\n        actionColName: ' ',\r\n        isDraggable: true,\r\n        rows: [\r\n            {\r\n                name: 'John Michael',\r\n                job: 'Manager',\r\n                date: '23/04/10',\r\n            },\r\n            {\r\n                name: 'Alexa Johnson',\r\n                job: 'CEO',\r\n                date: '23/04/02',\r\n            },\r\n            {\r\n                name: 'Sierra Brooks',\r\n                job: 'Designer',\r\n                date: '23/04/05',\r\n            },\r\n            {\r\n                name: 'Thomas Smith',\r\n                job: 'Developer',\r\n                date: '23/04/05',\r\n            },\r\n            {\r\n                name: 'Jenna Kian',\r\n                job: 'Marketing',\r\n                date: '23/04/18',\r\n            },\r\n            {\r\n                name: 'Denzel Washington',\r\n                job: 'Actor',\r\n                date: '23/04/05',\r\n            },\r\n            {\r\n                name: 'Morgan Freeman',\r\n                job: 'Actor',\r\n                date: '23/04/05',\r\n            },\r\n        ],\r\n    },\r\n}"
            },
            {
                "name": "titleCase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(param: string) => new TitleCasePipe().transform(param)"
            },
            {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'warn',\r\n    },\r\n}"
            },
            {
                "name": "WithActionColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        ...Default.args,\r\n        actionColName: 'Actions',\r\n        actionButton: 'Edit',\r\n    },\r\n}"
            },
            {
                "name": "WithActiveLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args: any) => ({\r\n    component: SidebarComponent,\r\n    props: {\r\n        ...args,\r\n        title: 'Sidebar',\r\n        navigation: [\r\n            { link: 'home', icon: 'home', text: 'Home' },\r\n            { link: 'about', icon: 'info', text: 'About' },\r\n            { link: 'contact', icon: 'mail', text: 'Contact' },\r\n        ],\r\n    },\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AttributeEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Color",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"inherit\" | \"current\" | \"black\" | \"white\" | \"blue-gray\" | \"gray\" | \"brown\" | \"deep-orange\" | \"orange\" | \"amber\" | \"yellow\" | \"lime\" | \"light-green\" | \"green\" | \"teal\" | \"cyan\" | \"light-blue\" | \"blue\" | \"indigo\" | \"deep-purple\" | \"purple\" | \"pink\" | \"red\"",
                "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Field",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "FieldOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "FieldProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "FieldSteps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "ID",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | number",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Identifiable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "RowData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldsComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldListDirective>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HttpClientDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ListDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PaginationDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TableExampleComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SortableTableExampleComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PillWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SidebarComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CheckboxComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<EmailComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MultiSelectComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PasswordComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<RadioComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SelectComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextareaComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwTableCardComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwDefaultTableComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Table",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "TABLE_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "TableProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"checkbox\" | \"email\" | \"custom-display\" | \"file\" | \"text\" | \"insight-text\" | \"int\" | \"multi-select\" | \"password\" | \"radio\" | \"slider\" | \"stepper\" | \"select\" | \"textarea\"",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "VALUE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | string[] | boolean | null",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Variant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"lead\" | \"paragraph\" | \"small\"",
                "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            ".storybook/preview.ts": [
                {
                    "name": "addCustomStylesheet",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\r\n    const link = document.createElement('link');\r\n    link.rel = 'stylesheet';\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,1,0';\r\n    document.head.appendChild(link);\r\n}"
                },
                {
                    "name": "customViewport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    large: {\r\n        name: 'Large Screen',\r\n        styles: {\r\n            width: '1920px',\r\n            height: '1080px',\r\n        },\r\n    },\r\n    small: {\r\n        name: 'Small Screen',\r\n        styles: {\r\n            width: '800px',\r\n            height: '963px',\r\n        },\r\n    },\r\n}"
                },
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n    parameters: {\r\n        viewport: { viewport: customViewport },\r\n        actions: { argTypesRegex: '^on[A-Z].*' },\r\n        controls: {\r\n            matchers: {\r\n                color: /(background|color)$/i,\r\n                date: /Date$/,\r\n            },\r\n        },\r\n    },\r\n    decorators: [\r\n        withThemeByDataAttribute({\r\n            themes: {\r\n                light: 'light',\r\n                dark: 'dark',\r\n            },\r\n            defaultTheme: 'light',\r\n            attributeName: 'data-mode',\r\n        }),\r\n        applicationConfig({\r\n            providers: [provideAnimations()],\r\n        }),\r\n    ],\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts": [
                {
                    "name": "ButtonActionsTesting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const button = canvasElement.querySelector('adk-button');\r\n        if (button) {\r\n            await userEvent.click(button);\r\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\r\n        }\r\n    },\r\n}"
                },
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'danger',\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonWrapperComponent>",
                    "defaultValue": "{\r\n    component: ButtonWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Button',\r\n    tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'primary',\r\n    },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'secondary',\r\n    },\r\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'success',\r\n    },\r\n}"
                },
                {
                    "name": "Warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n        variant: 'filled',\r\n        color: 'warn',\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts": [
                {
                    "name": "CardActionsTesting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        disabled: false,\r\n    },\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        const card = canvasElement.querySelector('adk-card');\r\n        if (card) {\r\n            await userEvent.click(card);\r\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\r\n        }\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardWrapperComponent>",
                    "defaultValue": "{\r\n    component: CardWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Card',\r\n    tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    InputComponent,\r\n    CheckboxComponent,\r\n    RadioComponent,\r\n    TextareaComponent,\r\n    PasswordComponent,\r\n    SelectComponent,\r\n    MultiSelectComponent,\r\n    SelectComponent,\r\n    EmailComponent,\r\n]"
                }
            ],
            ".storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\r\n    stories: [\r\n        '../src/**/*.mdx',\r\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\r\n        '../projects/ng-lib/src/**/*.mdx',\r\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\r\n    ],\r\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\r\n    framework: {\r\n        name: '@storybook/angular',\r\n        options: {},\r\n    },\r\n    docs: {\r\n        autodocs: 'tag',\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    headers: ['name', 'job', 'date'],\r\n    rows: mockData,\r\n    isSelectable: false,\r\n    isSortable: true,\r\n    isDraggable: false,\r\n    title: 'Table Card',\r\n    subtitle: 'This is a table card',\r\n    buttons: [\r\n      { label: 'View ALL', onClick: () => {}, color: 'primary', icon: '' },\r\n      { label: 'add member', onClick: () => {}, color: 'primary', icon: 'person_add' },\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "Draggable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        ...Default.args,\r\n        isDraggable: true,\r\n    },\r\n}"
                },
                {
                    "name": "Grouped",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        ...Default.args,\r\n        groupBy: 'job',\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwTableCardComponent>",
                    "defaultValue": "{\r\n    title: 'TailwindUI/Components/Tables/Table Card',\r\n    component: TwTableCardComponent,\r\n    tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "mockData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        name: 'John Michael',\r\n        job: 'Manager',\r\n        date: '23/04/10',\r\n    },\r\n    {\r\n        name: 'Alexa Johnson',\r\n        job: 'CEO',\r\n        date: '23/04/02',\r\n    },\r\n    {\r\n        name: 'Sierra Brooks',\r\n        job: 'Designer',\r\n        date: '23/04/05',\r\n    },\r\n    {\r\n        name: 'Thomas Smith',\r\n        job: 'Developer',\r\n        date: '23/04/05',\r\n    },\r\n    {\r\n        name: 'Jenna Kian',\r\n        job: 'Marketing',\r\n        date: '23/04/18',\r\n    },\r\n    {\r\n        name: 'Denzel Washington',\r\n        job: 'Actor',\r\n        date: '23/04/05',\r\n    },\r\n    {\r\n        name: 'Morgan Freeman',\r\n        job: 'Actor',\r\n        date: '23/04/05',\r\n    },\r\n]"
                },
                {
                    "name": "Selectable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        ...Default.args,\r\n        isSelectable: true,\r\n    },\r\n}"
                },
                {
                    "name": "WithActionColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        ...Default.args,\r\n        actionColName: 'Actions',\r\n        actionButton: 'Edit',\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldListDirective>",
                    "defaultValue": "{\r\n    component: FieldListDirective,\r\n    title: '(TW) Angular UI / Directives / Form / Field List',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldDirectiveComponent>",
                    "defaultValue": "{\r\n    component: FieldDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Form / Field',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HttpClientDirectiveComponent>",
                    "defaultValue": "{\r\n    component: HttpClientDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Http Client',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ListDirectiveComponent>",
                    "defaultValue": "{\r\n    component: ListDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / List',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PaginationDirectiveComponent>",
                    "defaultValue": "{\r\n    component: PaginationDirectiveComponent,\r\n    title: '(TW) Angular UI / Directives / Pagination',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/input works!/gi)).toBeTruthy();\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\r\n    component: InputComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Text',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n    play: async ({ canvasElement }) => {\r\n        const canvas = within(canvasElement);\r\n        expect(canvas.getByText(/multi-select works!/gi)).toBeTruthy();\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MultiSelectComponent>",
                    "defaultValue": "{\r\n    component: MultiSelectComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Select',\r\n}"
                },
                {
                    "name": "MultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('select', 'multi-select', 'name', 'Name', 'Name', {\r\n            isMultipleTag: true,\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
                },
                {
                    "name": "Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('select', 'select', 'name', 'Name', 'Name', {\r\n            isMultipleTag: false,\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts": [
                {
                    "name": "isEqual",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(obj1, obj2) => {\r\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: Button,\r\n  tags: ['autodocs'],\r\n  render: (args: Button) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: Header,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  render: (args) => ({ props: args }),\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: Page,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button, Header],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldComponent>",
                    "defaultValue": "{\r\n    component: FieldComponent,\r\n    title: '(TW) Angular UI / Components / Form / Field',\r\n    args: {\r\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\r\n    },\r\n    tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldsComponent>",
                    "defaultValue": "{\r\n    component: FieldsComponent,\r\n    title: '(TW) Angular UI / Components / Form / Fields',\r\n    tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        fieldConfig: [\r\n            FieldBuilder.createField('text', 'firstName', '', 'First Name', 'Enter first name', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n            }),\r\n            FieldBuilder.createField('text', 'lastName', '', 'Last Name', 'Enter last name', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n            }),\r\n            FieldBuilder.createField('password', 'password', '', 'Password', 'Enter password', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n            }),\r\n            FieldBuilder.createField('textarea', 'about', '', 'About', 'Enter about', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n            }),\r\n            FieldBuilder.createOptionsField(\r\n                'checkbox',\r\n                'checkbox',\r\n                'Checkbox',\r\n                'checkbox place holder',\r\n                [\r\n                    {\r\n                        value: 'optionOne',\r\n                        label: 'Option One',\r\n                        id: '1',\r\n                        description: 'Option one description',\r\n                    },\r\n                    {\r\n                        value: 'optionTwo',\r\n                        label: 'Option Two',\r\n                        id: '2',\r\n                        description: 'Option two description',\r\n                    },\r\n                ],\r\n                {\r\n                    required: true,\r\n                }\r\n            ),\r\n            FieldBuilder.createField('radio', 'radio', '', 'radio', 'radio', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n                options: [\r\n                    {\r\n                        value: 'optionOne',\r\n                        label: 'Option One',\r\n                        id: '1',\r\n                    },\r\n                    {\r\n                        value: 'optionTwo',\r\n                        label: 'Option Two',\r\n                        id: '2',\r\n                    },\r\n                ],\r\n            }),\r\n            FieldBuilder.createField('select', 'select', '', 'Select', 'Select', {\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n                options: [\r\n                    {\r\n                        value: 'optionOne',\r\n                        label: 'Option One',\r\n                        id: '1',\r\n                    },\r\n                    {\r\n                        value: 'optionTwo',\r\n                        label: 'Option Two',\r\n                        id: '2',\r\n                    },\r\n                    {\r\n                        value: 'optionThree',\r\n                        label: 'Option Three',\r\n                        id: '3',\r\n                    },\r\n                ],\r\n            }),\r\n            FieldBuilder.createField('select', 'multi-select', '', 'Multi Select', 'Multi Select', {\r\n                isMultipleTag: true,\r\n                class: 'sm:col-span-3',\r\n                required: true,\r\n                minLength: 3,\r\n                options: [\r\n                    {\r\n                        value: 'optionOne',\r\n                        label: 'Option One',\r\n                        id: '1',\r\n                    },\r\n                    {\r\n                        value: 'optionTwo',\r\n                        label: 'Option Two',\r\n                        id: '2',\r\n                    },\r\n                    {\r\n                        value: 'optionThree',\r\n                        label: 'Option Three',\r\n                        id: '3',\r\n                    },\r\n                ],\r\n            }),\r\n        ],\r\n        wrapperClass: 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4',\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<>",
                    "defaultValue": "{\r\n    component: DragDropExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Draggable Table',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TableExampleComponent>",
                    "defaultValue": "{\r\n    component: TableExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Selection',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SortableTableExampleComponent>",
                    "defaultValue": "{\r\n    component: SortableTableExampleComponent,\r\n    title: '(TW) Angular UI / Directives / Sortable Table',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PillWrapperComponent>",
                    "defaultValue": "{\r\n    component: PillWrapperComponent,\r\n    title: '(TW) Angular UI / Components / Pill',\r\n    tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {},\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SidebarComponent>",
                    "defaultValue": "{\r\n    component: SidebarComponent,\r\n    title: '(TW) Angular UI / Components / Sidebar',\r\n    decorators: [\r\n        // Add any decorators you need (e.g., withModules)\r\n    ],\r\n    parameters: {\r\n        // Add any global parameters here\r\n    },\r\n    argTypes: {\r\n        // Add argTypes as needed\r\n    },\r\n    tags: ['autodocs'],\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args: any) => ({\r\n    component: SidebarComponent,\r\n    props: {\r\n        ...args,\r\n        title: 'Sidebar',\r\n        navigation: [\r\n            { link: 'home', icon: 'home', text: 'Home' },\r\n            { link: 'about', icon: 'info', text: 'About' },\r\n            { link: 'contact', icon: 'mail', text: 'Contact' },\r\n        ],\r\n    },\r\n})"
                },
                {
                    "name": "WithActiveLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args: any) => ({\r\n    component: SidebarComponent,\r\n    props: {\r\n        ...args,\r\n        title: 'Sidebar',\r\n        navigation: [\r\n            { link: 'home', icon: 'home', text: 'Home' },\r\n            { link: 'about', icon: 'info', text: 'About' },\r\n            { link: 'contact', icon: 'mail', text: 'Contact' },\r\n        ],\r\n    },\r\n})"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CheckboxComponent>",
                    "defaultValue": "{\r\n    component: CheckboxComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Checkbox',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('checkbox', 'checkbox', 'checkbox', 'checkbox', 'checkbox', {\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<EmailComponent>",
                    "defaultValue": "{\r\n    component: EmailComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Email',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('email', 'email', 'Email', 'Email', 'Email', { required: true }, '', [Validators.email]),\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PasswordComponent>",
                    "defaultValue": "{\r\n    component: PasswordComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Password',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('password', 'password', 'password', 'password', 'password', {\r\n            required: true,\r\n        }),\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<RadioComponent>",
                    "defaultValue": "{\r\n    component: RadioComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Radio',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('radio', 'radio', 'radio', 'radio', 'radio', {\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SelectComponent>",
                    "defaultValue": "{\r\n    component: SelectComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Basic Select',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('select', 'select', 'select', 'select', 'select', {\r\n            required: true,\r\n            options: [\r\n                { value: '1', label: 'One', id: '1' },\r\n                { value: '2', label: 'Two', id: '2' },\r\n            ],\r\n        }),\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TextareaComponent>",
                    "defaultValue": "{\r\n    component: TextareaComponent,\r\n    title: '(TW) Angular UI / Components / Form / Types / Textarea',\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        field: FieldBuilder.createField('textarea', 'textarea', 'textarea', 'textarea', 'textarea'),\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwDefaultTableComponent>",
                    "defaultValue": "{\r\n    title: 'TailwindUI/Components/Tables/Default Table',\r\n    component: TwDefaultTableComponent,\r\n    tags: ['autodocs'],\r\n    parameters: {\r\n        layout: 'fullscreen',\r\n    },\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [TwDefaultTableComponent],\r\n        }),\r\n        componentWrapperDecorator(\r\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\r\n              ${story}\r\n            </div>`\r\n        ),\r\n    ],\r\n    args: {},\r\n}"
                },
                {
                    "name": "TableWithAllSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        isSelectable: true,\r\n        isSortable: true,\r\n        headers: ['Name', 'Job', 'Date'],\r\n        actionColName: ' ',\r\n        isDraggable: true,\r\n        rows: [\r\n            {\r\n                name: 'John Michael',\r\n                job: 'Manager',\r\n                date: '23/04/10',\r\n            },\r\n            {\r\n                name: 'Alexa Johnson',\r\n                job: 'CEO',\r\n                date: '23/04/02',\r\n            },\r\n            {\r\n                name: 'Sierra Brooks',\r\n                job: 'Designer',\r\n                date: '23/04/05',\r\n            },\r\n            {\r\n                name: 'Thomas Smith',\r\n                job: 'Developer',\r\n                date: '23/04/05',\r\n            },\r\n            {\r\n                name: 'Jenna Kian',\r\n                job: 'Marketing',\r\n                date: '23/04/18',\r\n            },\r\n            {\r\n                name: 'Denzel Washington',\r\n                job: 'Actor',\r\n                date: '23/04/05',\r\n            },\r\n            {\r\n                name: 'Morgan Freeman',\r\n                job: 'Actor',\r\n                date: '23/04/05',\r\n            },\r\n        ],\r\n    },\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts": [
                {
                    "name": "paginationSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "FieldBuilder.createField('select', 'itemsPerPage', '5', 'Items Per Page', 'Items Per Page', {\r\n    labelClass: '',\r\n    options: [\r\n        {\r\n            value: '5',\r\n            label: '5',\r\n            id: '1',\r\n        },\r\n        {\r\n            value: '10',\r\n            label: '10',\r\n            id: '2',\r\n        },\r\n        {\r\n            value: '25',\r\n            label: '25',\r\n            id: '3',\r\n        },\r\n        {\r\n            value: '100',\r\n            label: '100',\r\n            id: '4',\r\n        },\r\n    ],\r\n})"
                },
                {
                    "name": "preferenceColumnSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\r\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\r\n        return {\r\n            id: param,\r\n            value: param,\r\n            label: titleCase(param),\r\n        };\r\n    });\r\n\r\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'column', params[0], 'Column', '', {\r\n        options: [...mapVisibleColumnsOptions],\r\n    });\r\n\r\n    return {\r\n        ...columnSearchColumn,\r\n    };\r\n}"
                },
                {
                    "name": "preferenceGroupBySelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\r\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\r\n        return {\r\n            id: param,\r\n            value: param,\r\n            label: titleCase(param),\r\n        };\r\n    });\r\n\r\n    const columnSearchColumn: Field = FieldBuilder.createField('select', 'groupBy', 'none', 'Group By', '', {\r\n        options: [{ id: '0', value: 'none', label: 'None' }, ...mapVisibleColumnsOptions],\r\n    });\r\n\r\n    return {\r\n        ...columnSearchColumn,\r\n    };\r\n}"
                },
                {
                    "name": "preferenceVisibilitySelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(params: string[]) => {\r\n    const mapVisibleColumnsOptions: FieldOptions[] = params.map((param) => {\r\n        return {\r\n            id: param,\r\n            value: true,\r\n            label: titleCase(param),\r\n        };\r\n    });\r\n\r\n    const headerCheckboxGroup: Field = FieldBuilder.createField('checkbox', 'visibleColumns', params, 'visibleColumns', 'Visible Columns', {\r\n        labelClass: '',\r\n        required: false,\r\n        options: mapVisibleColumnsOptions,\r\n    });\r\n\r\n    return headerCheckboxGroup;\r\n}"
                },
                {
                    "name": "searchColumnSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field",
                    "defaultValue": "(param) =>\r\n    FieldBuilder.createField('text', 'searchColumn', '', `Search by ${titleCase(param)}`, ``, {\r\n        labelClass: '',\r\n        required: false,\r\n    })"
                },
                {
                    "name": "titleCase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(param: string) => new TitleCasePipe().transform(param)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ng-lib/src/lib/tw-form-ui/models/field.ts": [
                {
                    "name": "AttributeEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Field",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "FieldOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "FieldProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "FieldSteps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts": [
                {
                    "name": "Color",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"inherit\" | \"current\" | \"black\" | \"white\" | \"blue-gray\" | \"gray\" | \"brown\" | \"deep-orange\" | \"orange\" | \"amber\" | \"yellow\" | \"lime\" | \"light-green\" | \"green\" | \"teal\" | \"cyan\" | \"light-blue\" | \"blue\" | \"indigo\" | \"deep-purple\" | \"purple\" | \"pink\" | \"red\"",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Variant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"lead\" | \"paragraph\" | \"small\"",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts": [
                {
                    "name": "ID",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | number",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Identifiable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TABLE_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"checkbox\" | \"email\" | \"custom-display\" | \"file\" | \"text\" | \"insight-text\" | \"int\" | \"multi-select\" | \"password\" | \"radio\" | \"slider\" | \"stepper\" | \"select\" | \"textarea\"",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | string[] | boolean | null",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/models/table.ts": [
                {
                    "name": "RowData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "Table",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "TableProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldsComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldListDirective>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HttpClientDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ListDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PaginationDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TableExampleComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SortableTableExampleComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PillWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SidebarComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CheckboxComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<EmailComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MultiSelectComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PasswordComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<RadioComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SelectComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextareaComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwTableCardComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwDefaultTableComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addCustomStylesheet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/data-source.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDatasource",
                "coveragePercent": 64,
                "coverageCount": "9/14",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/fields.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/email.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/drag.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDraggableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/drop.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDroppableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/field-list.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFieldList",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/field.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFields",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/form-group.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFormGroup",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/http-client.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkHttpClient",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/list.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkList",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/pagination.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkPagination",
                "coveragePercent": 44,
                "coverageCount": "4/9",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/selection.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkSelection",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/sorting.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkSorting",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/sorting.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortableItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stepper.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkStepperDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragDropExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "HttpClientDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortableTableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FieldBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/card/tw-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/expansion-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdkExpansionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/pill.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonActionsTesting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CardActionsTesting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActiveLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/pagination.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableState",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Draggable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Grouped",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Selectable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActionColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TableWithAllSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/table-datasource.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableDataSourceService",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-settings-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableSettingsDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwDefaultTableComponent",
                "coveragePercent": 6,
                "coverageCount": "2/32",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/draggable.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DraggableUtil",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceColumnSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceGroupBySelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceVisibilitySelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "searchColumnSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/fields.controls.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titleCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isEqual",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/pagination.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaginationUtil",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/settings-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sort-rows.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortRowsUtil",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sortable-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortableIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/utils/imperative-observable.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ImperativeObservable",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}