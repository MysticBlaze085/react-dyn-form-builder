{
    "pipes": [],
    "interfaces": [
        {
            "name": "Item",
            "id": "interface-Item-8913ec05226a02bfa27ea59c7944e6cee7f50d4f1c1788fe3097560f7a488e04f156a290a703fd2a23ce563998878b7196c1cba0165bd6eaf55925ed25cf4b82",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\ninterface Item {\n    name: string;\n    age: number;\n}\n\n@Component({\n    selector: 'app-sortable-table-example',\n    template: `\n        <table>\n            <thead>\n                <tr>\n                    <th (click)=\"sort('name')\">Name</th>\n                    <th (click)=\"sort('age')\">Age</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let item of sortedItems\">\n                    <td>{{ item.name }}</td>\n                    <td>{{ item.age }}</td>\n                </tr>\n            </tbody>\n        </table>\n    `,\n    standalone: true,\n    imports: [CommonModule],\n})\nexport class SortableTableExampleComponent {\n    items: Item[] = [\n        { name: 'John Doe', age: 28 },\n        { name: 'Jane Smith', age: 34 },\n        { name: 'Sam Green', age: 22 },\n        { name: 'Emily Brown', age: 42 },\n    ];\n\n    sortedItems: Item[] = [...this.items];\n    currentSortKey: keyof Item = 'name';\n    currentSortDirection: 'asc' | 'desc' = 'asc';\n\n    sort(key: keyof Item): void {\n        if (this.currentSortKey === key) {\n            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.currentSortDirection = 'asc';\n        }\n        this.currentSortKey = key;\n        this.sortedItems.sort((a, b) => {\n            if (a[key] < b[key]) return this.currentSortDirection === 'asc' ? -1 : 1;\n            if (a[key] > b[key]) return this.currentSortDirection === 'asc' ? 1 : -1;\n            return 0;\n        });\n    }\n}\n\nconst meta: Meta<SortableTableExampleComponent> = {\n    component: SortableTableExampleComponent,\n    title: '(TW) Angular UI / Directives / Sortable Table',\n};\nexport default meta;\ntype Story = StoryObj<SortableTableExampleComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Pagination",
            "id": "interface-Pagination-085dcdfe7db512039b765867eb6e980f2d83faa8debae33781a1a0dfc6f9b502c5ea8241ddb258d628e7127548e9c3714d567be0d15c0fa274455a65073227f1",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/pagination.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Pagination {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n}\n",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RowData",
            "id": "interface-RowData-3584b22d1150cd2a9a21ac107141b7f9783b979f66f5b171a1193da5f3defb3e091d3d1b220ed18d9ab523bd03617c2fc77b8e9659f42ec1f60e6087291f1072",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface RowData {\n    [key: string]: any;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3584b22d1150cd2a9a21ac107141b7f9783b979f66f5b171a1193da5f3defb3e091d3d1b220ed18d9ab523bd03617c2fc77b8e9659f42ec1f60e6087291f1072",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "SortableItem",
            "id": "interface-SortableItem-38110c3e0875924586860aca57b742c48733a1c6c3e08163bbc86c5d557a13b2b97b6e73bbfc47ec2249ce091febe53640aa5467c78cf90b9650d12dc21bd0ac",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/sorting.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\n\nexport interface SortableItem {\n    id: string;\n    [key: string]: any;\n}\n\n@Directive({\n    selector: '[adk-sorting]',\n    exportAs: 'adkSorting',\n    standalone: true,\n})\nexport class AdkSorting<T extends SortableItem> {\n    #items = signal<T[]>([]);\n    #sortKey = signal<string | null>(null);\n    #sortDirection = signal<'asc' | 'desc'>('asc');\n\n    sortedItems = computed(() => {\n        const items = [...this.#items()];\n        const key = this.#sortKey();\n        const direction = this.#sortDirection();\n\n        if (!key) return items;\n\n        return items.sort((a, b) => {\n            const aValue = a[key];\n            const bValue = b[key];\n\n            if (aValue < bValue) {\n                return direction === 'asc' ? -1 : 1;\n            } else if (aValue > bValue) {\n                return direction === 'asc' ? 1 : -1;\n            } else {\n                return 0;\n            }\n        });\n    });\n\n    /**\n     * Add items to the list\n     * @param newItems\n     */\n    add(...newItems: T[]): void {\n        this.#items.update((items) => [...items, ...newItems]);\n    }\n\n    /**\n     * Set the sorting key and direction\n     * @param key\n     * @param direction\n     */\n    sort(key: string, direction: 'asc' | 'desc'): void {\n        this.#sortKey.set(key);\n        this.#sortDirection.set(direction);\n    }\n\n    /**\n     * Clear the sorting\n     */\n    clearSort(): void {\n        this.#sortKey.set(null);\n        this.#sortDirection.set('asc');\n    }\n\n    /**\n     * Get the current sorting key\n     */\n    getSortKey(): string | null {\n        return this.#sortKey();\n    }\n\n    /**\n     * Get the current sorting direction\n     */\n    getSortDirection(): 'asc' | 'desc' {\n        return this.#sortDirection();\n    }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-38110c3e0875924586860aca57b742c48733a1c6c3e08163bbc86c5d557a13b2b97b6e73bbfc47ec2249ce091febe53640aa5467c78cf90b9650d12dc21bd0ac",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "TableState",
            "id": "interface-TableState-3584b22d1150cd2a9a21ac107141b7f9783b979f66f5b171a1193da5f3defb3e091d3d1b220ed18d9ab523bd03617c2fc77b8e9659f42ec1f60e6087291f1072",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableState {\n    dataSource: any[];\n    draggedColIndex: number | null;\n    filterDataSource: { column: string; value: string };\n    headers: string[];\n    initialDataSource: any[];\n    initialHeaders: string[];\n    pagination: {\n        currentPage: number;\n        totalPages: number;\n        pageSize: number;\n    };\n    preferences: {\n        visibleColumns: string[];\n        groupBy: string | undefined;\n    };\n    selectedRows: any[];\n    sortDataSource: { key: string; direction: 'ascending' | 'descending' };\n    [key: string]: any;\n}\n\nexport interface RowData {\n    [key: string]: any;\n}\n",
            "properties": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "draggedColIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "filterDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "initialDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "initialHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "preferences",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sortDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-3584b22d1150cd2a9a21ac107141b7f9783b979f66f5b171a1193da5f3defb3e091d3d1b220ed18d9ab523bd03617c2fc77b8e9659f42ec1f60e6087291f1072",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "TableDataSourceService",
            "id": "injectable-TableDataSourceService-4a9eccb844ee03e2a4f69d767e16cdd83b8c8a266a72be4c08fae2c9e991ca5e919564e70db00f62070df2143a67a965f94a64ef71e44a611314a6187a841c85",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/table-datasource.service.ts",
            "properties": [
                {
                    "name": "#state",
                    "defaultValue": "signal<TableState>({\n        dataSource: [],\n        draggedColIndex: null,\n        filterDataSource: { column: '', value: '' },\n        headers: [],\n        initialDataSource: [],\n        initialHeaders: [],\n        pagination: {\n            currentPage: 1,\n            totalPages: 1,\n            pageSize: 10,\n        },\n        preferences: {\n            visibleColumns: [],\n            groupBy: undefined,\n        },\n        selectedRows: [],\n        sortDataSource: { key: '', direction: 'ascending' },\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "computed(() => this.#state())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dragDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTableState",
                    "args": [],
                    "optional": false,
                    "returnType": "TableState",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setGroupBy",
                    "args": [
                        {
                            "name": "groupBy",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupBy",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeaders",
                    "args": [
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPaginationState",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Partial<Pagination>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Partial<Pagination>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedRows",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "RowData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTableDataSource",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortDataSource",
                    "args": [
                        {
                            "name": "sortDataSource",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortDataSource",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectedAllRows",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, computed, signal } from '@angular/core';\nimport { Pagination, RowData, TableState } from './models';\n\nimport { SortRowsUtil } from './utils/sort-rows.util';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TableDataSourceService {\n    #state = signal<TableState>({\n        dataSource: [],\n        draggedColIndex: null,\n        filterDataSource: { column: '', value: '' },\n        headers: [],\n        initialDataSource: [],\n        initialHeaders: [],\n        pagination: {\n            currentPage: 1,\n            totalPages: 1,\n            pageSize: 10,\n        },\n        preferences: {\n            visibleColumns: [],\n            groupBy: undefined,\n        },\n        selectedRows: [],\n        sortDataSource: { key: '', direction: 'ascending' },\n    });\n\n    readonly state = computed(() => this.#state());\n\n    get<K extends keyof TableState>(key: K): TableState[K] {\n        return this.#state()[key];\n    }\n\n    setHeaders(headers: string[]): void {\n        this.#state.update((state) => ({\n            ...state,\n            headers,\n            initialHeaders: headers,\n            preferences: {\n                ...state.preferences,\n                visibleColumns: headers,\n            },\n            filterDataSource: { column: headers[0], value: '' },\n        }));\n    }\n\n    setTableDataSource(dataSource: any[]): void {\n        this.#state.update((state) => ({\n            ...state,\n            dataSource,\n            initialDataSource: dataSource,\n        }));\n    }\n\n    setPaginationState(pagination: Partial<Pagination>): void {\n        this.#state.update((state) => ({\n            ...state,\n            pagination: {\n                ...state.pagination,\n                ...pagination,\n            },\n        }));\n    }\n\n    setGroupBy(groupBy: string): void {\n        this.#state.update((state) => ({\n            ...state,\n            preferences: { ...state.preferences, groupBy },\n        }));\n    }\n\n    setSelectedRows(rowData: RowData): void {\n        this.#state.update((state) => {\n            const existingIndex = state.selectedRows.findIndex((row) => JSON.stringify(row) === JSON.stringify(rowData));\n            const newSelectedRows =\n                existingIndex !== -1 ? state.selectedRows.filter((_, index) => index !== existingIndex) : [...state.selectedRows, rowData];\n            return { ...state, selectedRows: newSelectedRows };\n        });\n    }\n\n    toggleSelectedAllRows(): void {\n        this.#state.update((state) => {\n            const allSelected = state.selectedRows.length === state.dataSource.length;\n            return {\n                ...state,\n                selectedRows: allSelected ? [] : [...state.dataSource],\n            };\n        });\n    }\n\n    sortDataSource(sortDataSource: { key: string; direction: 'ascending' | 'descending' }): void {\n        if (sortDataSource.key) {\n            const sort = new SortRowsUtil();\n            this.#state.update((state) => ({\n                ...state,\n                selectedRows: [],\n                sortDataSource,\n                dataSource: sort.sortRows(state.dataSource, sortDataSource),\n            }));\n        }\n    }\n\n    getTableState(): TableState {\n        return this.#state();\n    }\n\n    dragStart(index: number): void {\n        this.#state.update((state) => ({ ...state, draggedColIndex: index }));\n    }\n\n    dragDrop(index: number): void {\n        const targetIndex = index;\n        const draggedColIndex = this.state().draggedColIndex;\n        const dataSource = this.state().dataSource;\n        if (draggedColIndex === null || draggedColIndex === targetIndex) return; // If no valid drag action, exit\n\n        // Update headers array with dragged column\n        const newHeaders = [...this.state().headers];\n        const draggedHeader = newHeaders.splice(draggedColIndex, 1)[0];\n        newHeaders.splice(targetIndex, 0, draggedHeader);\n\n        // Update rows in dataSource array with dragged column\n        const newRows = dataSource.map((row: any) => {\n            const entries = Object.entries(row);\n            const draggedEntry = entries.splice(draggedColIndex, 1)[0];\n            entries.splice(targetIndex, 0, draggedEntry);\n            return Object.fromEntries(entries); // Convert back to object\n        });\n\n        console.log('dragDrop', newHeaders, newRows);\n\n        // Update state with new headers, rows, and reset draggedColIndex\n        this.setHeaders(newHeaders);\n        this.setTableDataSource(newRows);\n        this.setSelectedRows([]);\n        this.#state.update((state) => ({ ...state, draggedColIndex: null }));\n    }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "DraggableUtil",
            "id": "class-DraggableUtil-b04b8e4258363efce693f3e9e0fc95af58de296ddb8c12c81ec85c5f71228290ea0b8bb6604e3e4ea9b1281bf5b7c42e905220cc11419ff7d834ecca82c2107c",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/draggable.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DraggableUtil {\n    headers: string[] = [];\n    dataSource = [];\n    draggedColIndex = null;\n    selectedRows = [];\n\n    // Function to handle dragging of columns\n    dragRows(state: any, action: any) {\n        const targetIndex = action.payload;\n        const draggedColIndex = state.draggedColIndex;\n        const dataSource = state.dataSource;\n        if (draggedColIndex === null || draggedColIndex === targetIndex) return; // If no valid drag action, exit\n\n        // Update headers array with dragged column\n        const newHeaders = [...state.headers];\n        const draggedHeader = newHeaders.splice(draggedColIndex, 1)[0];\n        newHeaders.splice(targetIndex, 0, draggedHeader);\n\n        // Update rows in dataSource array with dragged column\n        const newRows = dataSource.map((row: any) => {\n            const entries = Object.entries(row);\n            const draggedEntry = entries.splice(draggedColIndex, 1)[0];\n            entries.splice(targetIndex, 0, draggedEntry);\n            return Object.fromEntries(entries); // Convert back to object\n        });\n\n        // Update state with new headers, rows, and reset draggedColIndex\n        this.headers = newHeaders;\n        this.dataSource = newRows;\n        this.draggedColIndex = null;\n        this.selectedRows = [];\n    }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "draggedColIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "dragRows",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FieldBuilder",
            "id": "class-FieldBuilder-5042d4eab803eb6c120bf739f98a11e4d0994fc218a12ad25d9f11043d77fca4aebdc4a687cf55a7f783412bbac0582085fd8055e9e145db1a82147f5e3658c8",
            "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, FormControl, ValidatorFn, Validators } from '@angular/forms';\nimport { Identifiable, TYPE, VALUE } from './identifiable';\nimport { Observable, map } from 'rxjs';\n\nexport declare type AttributeEvent = (field: Field, event?: any) => void;\n\nexport declare type FieldSteps = Identifiable & {\n    [additionalProperties: string]: any;\n} & {\n    step: number;\n    label: string;\n    active: boolean;\n};\n\nexport declare type FieldOptions = Identifiable & {\n    [additionalProperties: string]: any;\n} & {\n    value: string;\n    label: string;\n    checked?: boolean;\n    description?: string;\n    category?: string;\n};\n\nexport type Field<\n    Props = FieldProps & {\n        [additionalProperties: string]: any;\n    }\n> = Identifiable & {\n    type: TYPE;\n    key: string;\n    value: VALUE;\n    description?: string;\n    errorMessage?: string;\n    hint?: string;\n    label?: string;\n    placeholder?: string;\n    showError?: boolean;\n    validation?: ValidatorFn[] | null;\n    disabled?: boolean;\n    props?: Props;\n    formControl?: AbstractControl | { [key: string]: AbstractControl };\n};\n\nexport type FieldProps = {\n    autocomplete?: string;\n    appearance?: string;\n    class?: string;\n    checked?: boolean;\n    errorMessage?: string;\n    labelClass?: string;\n    inputClass?: string;\n    options?: FieldOptions[];\n    rows?: number;\n    cols?: number;\n    max?: number;\n    min?: number;\n    minLength?: number;\n    isMultipleTag?: boolean;\n    pattern?: string | RegExp;\n    required?: boolean;\n    tabindex?: number;\n    attributes?: {\n        [key: string]: string | number;\n    };\n    step?: number;\n    focus?: AttributeEvent;\n    blur?: AttributeEvent;\n    keyup?: AttributeEvent;\n    keydown?: AttributeEvent;\n    click?: AttributeEvent;\n    change?: AttributeEvent;\n    keypress?: AttributeEvent;\n};\n\nexport class FieldBuilder {\n    private static idCounter = 0;\n\n    private static generateId(): string {\n        return `field_${this.idCounter++}`;\n    }\n\n    static createField(\n        type: TYPE,\n        key: string,\n        value: any,\n        label?: string,\n        placeholder?: string,\n        props?: FieldProps,\n        description?: string,\n        validation?: ValidatorFn[]\n    ): Field {\n        const id = this.generateId();\n        const field: Field = {\n            id,\n            type,\n            key,\n            value,\n            validation: validation || [],\n            label: label || '',\n            placeholder: placeholder || '',\n            description: description || '',\n            props: props || {},\n        };\n        const addedValidations = validation || [];\n        field.validation = props?.required ? [Validators.required, ...addedValidations] : field.validation;\n        field.formControl = field.type === 'checkbox' ? this.checkboxFormFields(field) : new FormControl(field.value, field.validation);\n        return field;\n    }\n\n    static validators = {\n        required: (required: boolean) => (required ? Validators.required : []),\n        email: (email: boolean) => (email ? Validators.email : []),\n        pattern: (pattern: string | RegExp) => (pattern ? Validators.pattern(pattern) : []),\n    };\n\n    static createOptionsField(\n        type: TYPE,\n        key: string,\n        label: string,\n        placeholder: string,\n        options: FieldOptions[],\n        props?: FieldProps,\n        description?: string\n    ): Field {\n        const id = this.generateId();\n        const field: Field = {\n            id,\n            type,\n            key,\n            value: '', // No initial value for options field\n            label,\n            placeholder,\n            description: description || '',\n            props: {\n                options,\n                ...props,\n            },\n        };\n        const addedValidations = field.validation || [];\n        field.validation = props?.required ? [Validators.required, ...addedValidations] : field.validation;\n        field.formControl = field.type === 'checkbox' ? this.checkboxFormFields(field) : new FormControl(field.value, field.validation);\n        return field;\n    }\n\n    static checkboxFormFields(field: Field): { [key: string]: AbstractControl } {\n        const formControls: { [key: string]: AbstractControl } = {};\n        field.props?.options?.forEach((option) => {\n            formControls[option.id] = new FormControl('');\n        });\n        return formControls;\n    }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "idCounter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        123,
                        126
                    ]
                },
                {
                    "name": "validators",
                    "defaultValue": "{\n        required: (required: boolean) => (required ? Validators.required : []),\n        email: (email: boolean) => (email ? Validators.email : []),\n        pattern: (pattern: string | RegExp) => (pattern ? Validators.pattern(pattern) : []),\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkboxFormFields",
                    "args": [
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "Field",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createField",
                    "args": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "validation",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validation",
                            "type": "ValidatorFn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createOptionsField",
                    "args": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "FieldOptions[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Field",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "placeholder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "FieldOptions[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "FieldProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ImperativeObservable",
            "id": "class-ImperativeObservable-2bee6064f2321053861edb96d5c364db736fdd609c51a0e7d113e54300a943e189d153c5486344ba02f73ad732fb2a4798ef5777d8c78e84d96202b211d14f1b",
            "file": "projects/ng-lib/src/lib/utils/imperative-observable.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\n\nexport class ImperativeObservable<T> {\n  private _subject: BehaviorSubject<T>;\n  private _change$: Observable<T>;\n\n  constructor(initialValue: T) {\n    this._subject = new BehaviorSubject<T>(initialValue);\n    this._change$ = this._subject.asObservable();\n  }\n\n  get value(): T {\n    return this._subject.value;\n  }\n  set value(value: T) {\n    this._subject.next(value);\n  }\n\n  get change$() {\n    return this._change$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialValue",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "initialValue",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "_change$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_subject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<T>",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T",
                        "line": 12
                    }
                },
                "change$": {
                    "name": "change$",
                    "getSignature": {
                        "name": "change$",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                }
            },
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaginationUtil",
            "id": "class-PaginationUtil-299ae169fd17bbd518f7b3aa3a42849ae247bbe3a18253a5c092585e094615f41b976c834dda33a322b87beeb06036d33c39bc12a2f228a3fa8eed896629c601",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/pagination.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { TableState } from '../models';\n\nexport class PaginationUtil {\n    initialState: TableState;\n\n    constructor(initialState: TableState) {\n        this.initialState = initialState;\n        this.initialState.pagination.currentPage = 1;\n        this.initialState.pagination.totalPages = 0;\n        this.initialState.pagination.pageSize = 10;\n    }\n\n    // @ts-ignore\n    setDataSourcePagination = (action: any) => {\n        // Calculate totalPages based on the full dataset (initialDataSource)\n        const length = this.initialState.initialDataSource.length;\n        const pageSize = this.initialState.pagination.pageSize;\n        this.initialState.pagination.totalPages = Math.ceil(length / pageSize);\n\n        // Check if there's data in the initialDataSource to paginate\n        if (this.initialState.initialDataSource.length > 0) {\n            // Use initialDataSource to slice the data for current page\n            this.initialState.dataSource = this.initialState.initialDataSource.slice(\n                (this.initialState.pagination.currentPage - 1) * this.initialState.pagination.pageSize,\n                this.initialState.pagination.currentPage * this.initialState.pagination.pageSize\n            );\n        }\n    };\n\n    updateChangedCurrentPage = (action: any) => {\n        // Update currentPage in pagination\n        this.initialState.pagination.currentPage = action.payload;\n\n        // Update dataSource based on currentPage\n        this.setDataSourcePagination(action);\n    };\n\n    setPaginationState = (pageSize: number, currentPage: number) => {\n        // Set pageSize and currentPage in pagination state\n        this.initialState.pagination.pageSize = pageSize;\n        this.initialState.pagination.currentPage = currentPage;\n\n        // Recalculate totalPages based on the new pageSize\n        this.initialState.pagination.totalPages = Math.ceil(this.initialState.initialDataSource.length / pageSize);\n\n        // Update dataSource based on the new currentPage and pageSize\n        this.setDataSourcePagination({});\n    };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialState",
                        "type": "TableState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "initialState",
                        "type": "TableState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "initialState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableState",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "setDataSourcePagination",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "setPaginationState",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "updateChangedCurrentPage",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SortRowsUtil",
            "id": "class-SortRowsUtil-0b53f43407bde57e85de362f3009a20690dc474931e3483fc38c4b4d5483e3b27b827529b577b345f7c40b8b38f6fb60ded92be1dc7375478f315894236cb264",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sort-rows.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SortRowsUtil {\n    isDate(value: any) {\n        const date = new Date(value);\n        return !isNaN(date.getTime());\n    }\n\n    sortRows(rows: any[], sortConfig: { key: string; direction: string }) {\n        const lowerCaseSortKey = sortConfig.key.toLowerCase();\n        return rows.sort((a, b) => {\n            const aValue = String(a[lowerCaseSortKey]).toLowerCase();\n            const bValue = String(b[lowerCaseSortKey]).toLowerCase();\n\n            // Check if both values are valid dates\n            if (this.isDate(aValue) && this.isDate(bValue)) {\n                const dateA = new Date(aValue) as any;\n                const dateB = new Date(bValue) as any;\n                return sortConfig.direction === 'ascending' ? dateA - dateB : dateB - dateA;\n            } else {\n                // If not dates, compare as strings\n                if (aValue < bValue) return sortConfig.direction === 'ascending' ? -1 : 1;\n                if (aValue > bValue) return sortConfig.direction === 'ascending' ? 1 : -1;\n            }\n            return 0; // Default case\n        });\n    }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "isDate",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortRows",
                    "args": [
                        {
                            "name": "rows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortConfig",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortConfig",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableBuilder",
            "id": "class-TableBuilder-de6629ae815809500ef7c604500c3e5a0d8f28ca70583cf0b32687d2fa1a1b40b141b34e8ae7c4720d709c38671925f9e803f3d51cd84d103c1bd32114dce4cc",
            "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Field } from './field';\nimport { Observable } from 'rxjs';\nimport { TABLE_TYPE } from './identifiable';\n\nexport declare type RowData = {\n    [additionalProperties: string]: any;\n} & {\n    [key: string]: any;\n    selected?: boolean;\n    id?: string;\n};\n\nexport type TableProps = {\n    height?: string;\n    title?: string;\n    caption?: string;\n    buttonText?: string;\n    buttonLink?: any[];\n    buttonAction?: any;\n    selectable?: boolean;\n    attributes?: {\n        [key: string]: string | number;\n    };\n    isField?: boolean;\n    field?: Field;\n    fieldCol?: string;\n};\n\nexport type Table = {\n    [additionalProperties: string]: any;\n} & {\n    type: TABLE_TYPE;\n    headers: string[];\n    rows: Observable<RowData[]>;\n    props?: TableProps;\n};\n\nexport class TableBuilder {\n    static createTable(type: TABLE_TYPE, headers: string[], rows: Observable<RowData[]>, props?: TableProps): Table {\n        const table = {\n            type,\n            headers: headers || [],\n            rows: rows,\n            props: props || {},\n        };\n        return table;\n    }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "createTable",
                    "args": [
                        {
                            "name": "type",
                            "type": "TABLE_TYPE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rows",
                            "type": "Observable<RowData[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "TableProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Table",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TABLE_TYPE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "headers",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rows",
                            "type": "Observable<RowData[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "TableProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AdkDatasource",
            "id": "directive-AdkDatasource-ac293b3ff757d053d6eded50b1ac9ef60b13fd851d29d314bdfb96e06ab5480e8fb6bf67ae3d44e8117949742461f3fe799b568e6efcc1a5768c9fc6b92a04fa",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/data-source.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AdkList, AdkPagination, AdkSelection } from '../directives';\nimport { Directive, computed, inject } from '@angular/core';\nimport { ID, Identifiable } from '../models';\nimport { Observable, map } from 'rxjs';\n\n@Directive({\n  selector: '[adk-datasource]',\n  exportAs: 'adkDatasource',\n  standalone: true,\n  /**\n   * Important! Angular Directive composition API in action!\n   */\n  hostDirectives: [\n    // { directive: AdkHttpClient, inputs: ['adkUrl', 'adkPage', 'adkLimit'] },\n    AdkList,\n    AdkSelection,\n    AdkPagination,\n  ],\n})\nexport class AdkDatasource<T extends Identifiable> {\n  // #httpClient = inject(AdkHttpClient, { self: true });\n  #list = inject<AdkList<T>>(AdkList, { self: true });\n  #selection = inject(AdkSelection, { self: true });\n  #pagination = inject(AdkPagination, { self: true });\n\n  /**\n   * The list of datasource items\n   */\n  readonly items = this.#list.items;\n\n  /**\n   * Check if we are on the first page\n   */\n  readonly first = this.#pagination.first;\n\n  /**\n   * Check if we are on the last page\n   */\n  readonly last = this.#pagination.last;\n\n  /**\n   * The selected items of the selected datasource\n   */\n  readonly selectedItems = computed(() => this.items().filter((item) => this.#selection.selected(item.id)));\n\n  async fetch(data: Observable<any[]>): Promise<void> {\n    data\n      .pipe(\n        map((items) => {\n          return items.map((item, i) => {\n            return {\n              ...item,\n              id: item.id ?? i,\n            };\n          });\n        })\n      )\n      .subscribe({\n        next: (value: any[]) => this.#list.add(...value),\n        complete: () => console.info('Fetched data successfully!'),\n      });\n  }\n\n  /**\n   * Select datasource by their ids\n   * @param ids\n   */\n  select(...ids: ID[]): void {\n    this.#selection.select(...ids);\n  }\n\n  /**\n   * Select all datasource\n   */\n  selectAll(): void {\n    this.#selection.select(...this.items().map((todo) => todo.id));\n  }\n\n  /**\n   * Deselect all datasource\n   */\n  reset(): void {\n    this.#selection.clear();\n  }\n\n  /**\n   * Check if a todo is selected\n   * @param id\n   */\n  selected(id: ID): boolean {\n    return this.#selection.selected(id);\n  }\n\n  /**\n   * Deselect a todo by its id\n   * @param id\n   */\n  deselect(id: ID): void {\n    this.#selection.deselect(id);\n  }\n}\n",
            "selector": "[adk-datasource]",
            "providers": [],
            "exportAs": "adkDatasource",
            "hostDirectives": [
                {
                    "name": "AdkList"
                },
                {
                    "name": "AdkSelection"
                },
                {
                    "name": "AdkPagination"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#list",
                    "defaultValue": "inject<AdkList<T>>(AdkList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#pagination",
                    "defaultValue": "inject(AdkPagination, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#selection",
                    "defaultValue": "inject(AdkSelection, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "first",
                    "defaultValue": "this.#pagination.first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if we are on the first page</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nCheck if we are on the first page\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#list.items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The list of datasource items</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nThe list of datasource items\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "last",
                    "defaultValue": "this.#pagination.last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if we are on the last page</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nCheck if we are on the last page\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedItems",
                    "defaultValue": "computed(() => this.items().filter((item) => this.#selection.selected(item.id)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The selected items of the selected datasource</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nThe selected items of the selected datasource\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deselect",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect a todo by its id\n",
                    "description": "<p>Deselect a todo by its id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2239,
                                "end": 2241,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2233,
                                "end": 2238,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "data",
                            "type": "Observable<any[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Observable<any[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect all datasource\n",
                    "description": "<p>Deselect all datasource</p>\n"
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect datasource by their ids\n",
                    "description": "<p>Select datasource by their ids</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1745,
                                "end": 1748,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ids"
                            },
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1739,
                                "end": 1744,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect all datasource\n",
                    "description": "<p>Select all datasource</p>\n"
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if a todo is selected\n",
                    "description": "<p>Check if a todo is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2105,
                                "end": 2107,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2099,
                                "end": 2104,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkDraggableDirective",
            "id": "directive-AdkDraggableDirective-94aa9fcc8da93a6cd512922d7202683fa165fd5aac03612a423a67c23f56f1b74b42773a5c3fdd8406c0c61b7e6e239b432a62b325ac0fad9654dab81a916761",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/drag.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Output, signal } from '@angular/core';\n\n@Directive({\n    selector: '[adkDraggable]',\n    standalone: true,\n})\nexport class AdkDraggableDirective {\n    #isDragging = signal(false);\n\n    @Output() dragStart = new EventEmitter<DragEvent>();\n    @Output() dragEnd = new EventEmitter<DragEvent>();\n\n    @HostBinding('draggable') draggable = true;\n\n    @HostBinding('class.dragging')\n    get isDragging() {\n        return this.#isDragging();\n    }\n\n    @HostListener('dragstart', ['$event'])\n    onDragStart(event: DragEvent) {\n        this.#isDragging.set(true);\n        this.dragStart.emit(event);\n    }\n\n    @HostListener('dragend', ['$event'])\n    onDragEnd(event: DragEvent) {\n        this.#isDragging.set(false);\n        this.dragEnd.emit(event);\n    }\n}\n",
            "selector": "[adkDraggable]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "dragEnd",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                },
                {
                    "name": "dragStart",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.dragging",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragend",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                },
                {
                    "name": "dragstart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "propertiesClass": [
                {
                    "name": "#isDragging",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'draggable'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragend', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragstart', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "isDragging": {
                    "name": "isDragging",
                    "getSignature": {
                        "name": "isDragging",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            }
        },
        {
            "name": "AdkDroppableDirective",
            "id": "directive-AdkDroppableDirective-61a8932bc00d7875fb12e9e163d5d4532d45996e671c6d3ccdcaf2b0458efd248117bf1a037b1b3c2757c8b90f4d571bc827f639bee57d1279dfd1d462af2c50",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/drop.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Output, signal } from '@angular/core';\n\n@Directive({\n    selector: '[adkDroppable]',\n    standalone: true,\n})\nexport class AdkDroppableDirective {\n    #isOver = signal(false);\n\n    @Output() drop = new EventEmitter<DragEvent>();\n\n    @HostBinding('class.over')\n    get isOver() {\n        return this.#isOver();\n    }\n\n    @HostListener('dragover', ['$event'])\n    onDragOver(event: DragEvent) {\n        event.preventDefault();\n        this.#isOver.set(true);\n    }\n\n    @HostListener('dragleave', ['$event'])\n    onDragLeave(_event: DragEvent) {\n        this.#isOver.set(false);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event: DragEvent) {\n        event.preventDefault();\n        this.#isOver.set(false);\n        this.drop.emit(event);\n    }\n}\n",
            "selector": "[adkDroppable]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "drop",
                    "defaultValue": "new EventEmitter<DragEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.over",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "#isOver",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "accessors": {
                "isOver": {
                    "name": "isOver",
                    "getSignature": {
                        "name": "isOver",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            }
        },
        {
            "name": "AdkFieldList",
            "id": "directive-AdkFieldList-9816b77a51bb94e9c14583ec581bce2a2879efad81fa7ad349d7610c3945debe12d23ca16abce41c22e7f634cd6f91286016f037387520a4a5a7171ebaac4d70",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/field-list.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\nimport { Field, ID } from '../models';\n\n@Directive({\n  selector: '[adz-field-builder]',\n  exportAs: 'adkFieldList',\n  standalone: true,\n})\nexport class AdkFieldList<T extends Field> {\n  #fields = signal<Record<ID, T>>({});\n\n  readonly fields = computed(() => Object.values(this.#fields()));\n\n  /**\n   * Get a field by id\n   * @param id\n   */\n  get(id: ID): T | undefined {\n    return this.#fields()[id];\n  }\n\n  /**\n   * Add new fields to the list\n   * @param newItems\n   */\n  add(...newFields: T[]): void {\n    this.#fields.update((fields) => newFields.reduce((accumulator, field) => ({ ...accumulator, [field.id]: field }), fields));\n  }\n\n  /**\n   * Update an field in the list\n   * @param field\n   */\n  update(field: T): void {\n    this.#fields.update((fields) => ({ ...fields, [field.id]: field }));\n  }\n\n  /**\n   * Remove an field from the list\n   * @param field\n   */\n  remove(field: T): void {\n    this.#fields.update((fields) => {\n      const { [field.id]: _, ...rest } = fields;\n      return rest;\n    });\n  }\n\n  /**\n   * Clear all fields from the list\n   */\n  clear(): void {\n    this.#fields.set({});\n  }\n}\n",
            "selector": "[adz-field-builder]",
            "providers": [],
            "exportAs": "adkFieldList",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#fields",
                    "defaultValue": "signal<Record<ID, T>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fields",
                    "defaultValue": "computed(() => Object.values(this.#fields()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newFields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd new fields to the list\n",
                    "description": "<p>Add new fields to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": "newFields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all fields from the list\n",
                    "description": "<p>Clear all fields from the list</p>\n"
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet a field by id\n",
                    "description": "<p>Get a field by id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 394,
                                "end": 396,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 388,
                                "end": 393,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "field",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove an field from the list\n",
                    "description": "<p>Remove an field from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 922,
                                "end": 927,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "field"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 916,
                                "end": 921,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "field",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate an field in the list\n",
                    "description": "<p>Update an field in the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 752,
                                "end": 757,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "field"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 746,
                                "end": 751,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkFields",
            "id": "directive-AdkFields-c8ba7913f274514e964b3a00c5635b31d4aa3fb604bf5da86c67fc4b47411bc4f422899a13332314e7cbc387236b8b6078ffdd32b88fdb34d4dc98025b38e92a",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/field.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, inject } from '@angular/core';\n\nimport { AdkFieldList } from './field-list';\nimport { Field } from '../models';\n\n@Directive({\n  selector: '[adk-fields]',\n  exportAs: 'adkFields',\n  standalone: true,\n  hostDirectives: [AdkFieldList],\n})\nexport class AdkFields<T extends Field> {\n  #fields: AdkFieldList<T> = inject<AdkFieldList<T>>(AdkFieldList, { self: true });\n\n  /**\n   * The list of fields\n   */\n  readonly items = this.#fields.fields;\n\n  /**\n   * Set fields\n   */\n  async setFields(fields: T[]): Promise<void> {\n    this.#fields.add(...fields);\n  }\n}\n",
            "selector": "[adk-fields]",
            "providers": [],
            "exportAs": "adkFields",
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                }
            ],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#fields",
                    "defaultValue": "inject<AdkFieldList<T>>(AdkFieldList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdkFieldList<T>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#fields.fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The list of fields</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nThe list of fields\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet fields\n",
                    "description": "<p>Set fields</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkFormGroup",
            "id": "directive-AdkFormGroup-c821162dabb618df216490bea12e9dd4517e8fcacb674148900ddbb9728b19b54328e0fa716d8a99b3037056417b36783b02d751acdc480fb8b5d30fb5d987d2",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/form-group.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AbstractControl, FormGroup } from '@angular/forms';\nimport { Directive, WritableSignal, signal } from '@angular/core';\nimport { Field, FieldOptions } from '../models';\n\n@Directive({\n  selector: '[adk-form-group]',\n  exportAs: 'adkFormGroup',\n  standalone: true,\n})\nexport class AdkFormGroup<T extends Field> {\n  #formGroup = signal<FormGroup<any>>(new FormGroup({}));\n\n  /**\n   * The form group\n   */\n  formGroup: WritableSignal<FormGroup<any>> = this.#formGroup;\n\n  /**\n   * Set the form group\n   */\n  setFormGroup(fields: T[]): void {\n    const formControls = fields.reduce((accumulator: any, field) => {\n      if (field.formControl instanceof AbstractControl) {\n        accumulator[field.key] = field.formControl;\n      } else if (field.formControl instanceof Object) {\n        // object of form controls\n        field.props?.options?.forEach((option: FieldOptions) => {\n          const key = option.id;\n          accumulator[key] = (field.formControl as { [key: string]: AbstractControl<any, any> })[key];\n        });\n      }\n      return accumulator;\n    }, {});\n\n    const formGroup = new FormGroup(formControls);\n    this.#formGroup.set(formGroup);\n  }\n}\n",
            "selector": "[adk-form-group]",
            "providers": [],
            "exportAs": "adkFormGroup",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "signal<FormGroup<any>>(new FormGroup({}))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formGroup",
                    "defaultValue": "this.#formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<FormGroup<any>>",
                    "optional": false,
                    "description": "<p>The form group</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nThe form group\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "setFormGroup",
                    "args": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the form group\n",
                    "description": "<p>Set the form group</p>\n",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkHttpClient",
            "id": "directive-AdkHttpClient-99d66dd02b8ec3d8498d39931fa365324abe6d170927d68acd2edccc15d2e5dfb5c9efc17a4399867ac6d9f3e6bfc8e73dea0ceb3883b2d67871b88cd70e2ee1",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/http-client.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, inject, input } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\n\n@Directive({\n  selector: '[adk-http-client]',\n  exportAs: 'adkHttpClient',\n  standalone: true,\n})\nexport class AdkHttpClient {\n  #http = inject(HttpClient);\n  /**\n   * The URL to send the request to\n   */\n  url = input.required<string>({ alias: 'adkUrl' });\n  /**\n   * The page to get data from\n   */\n  page = input(1, { alias: 'adkPage' });\n  /**\n   * The number of items to get\n   */\n  limit = input(10, { alias: 'adkLimit' });\n  /**\n   * Get data from the server\n   * @param page\n   */\n  async get<T>(page = { page: 1, limit: 10 }): Promise<{ total: number; items: T[] }> {\n    const searchParams = new URLSearchParams({\n      _page: page.page.toString(),\n      _per_page: page.limit.toString(),\n    }).toString();\n\n    const response = await firstValueFrom(\n      this.#http.get<T[]>(`${this.url()}?${searchParams}`, {\n        observe: 'response',\n      })\n    );\n    const total = parseInt(response.headers.get('X-Total-Count') ?? '0', 10);\n    const items = response.body!;\n\n    return { total, items };\n  }\n}\n",
            "selector": "[adk-http-client]",
            "providers": [],
            "exportAs": "adkHttpClient",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "limit",
                    "defaultValue": "input(10, { alias: 'adkLimit' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The number of items to get</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nThe number of items to get\n"
                },
                {
                    "name": "page",
                    "defaultValue": "input(1, { alias: 'adkPage' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The page to get data from</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nThe page to get data from\n"
                },
                {
                    "name": "url",
                    "defaultValue": "input.required<string>({ alias: 'adkUrl' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The URL to send the request to</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nThe URL to send the request to\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "page",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ page: 1, limit: 10 }"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet data from the server\n",
                    "description": "<p>Get data from the server</p>\n",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 628,
                                "end": 632,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "page"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ page: 1, limit: 10 }",
                            "tagName": {
                                "pos": 622,
                                "end": 627,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkList",
            "id": "directive-AdkList-bb24ab3678228fd963e349f975a7aa1be0723bf0224aae8c7befc92fd3b564413c768af9fbb50405dc9355821e951ee8a615a8649ffa5a27f0b95bb1c1b348f4",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/list.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\nimport { ID, Identifiable } from '../models';\n\n@Directive({\n  selector: '[adz-list]',\n  exportAs: 'adkList',\n  standalone: true,\n})\nexport class AdkList<T extends Identifiable> {\n  #items = signal<Record<ID, T>>({});\n  readonly items = computed(() => Object.values(this.#items()));\n\n  /**\n   * Get an item by id\n   * @param id\n   */\n  get(id: ID): T | undefined {\n    return this.#items()[id];\n  }\n\n  /**\n   * Add new items to the list\n   * @param newItems\n   */\n  add(...newItems: T[]): void {\n    this.#items.update((items) =>\n      newItems.reduce((accumulator, item) => {\n        return { ...accumulator, [item.id]: item };\n      }, items)\n    );\n  }\n\n  /**\n   * Update an item in the list\n   * @param item\n   */\n  update(item: T): void {\n    this.#items.update((items) => ({ ...items, [item.id]: item }));\n  }\n\n  /**\n   * Remove an item from the list\n   * @param item\n   */\n  remove(item: T): void {\n    this.#items.update((items) => {\n      const { [item.id]: _, ...rest } = items;\n      return rest;\n    });\n  }\n\n  /**\n   * Clear all items from the list\n   */\n  clear(): void {\n    this.#items.set({});\n  }\n}\n",
            "selector": "[adz-list]",
            "providers": [],
            "exportAs": "adkList",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<Record<ID, T>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "computed(() => Object.values(this.#items()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newItems",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd new items to the list\n",
                    "description": "<p>Add new items to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 509,
                                "end": 517,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "newItems"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 503,
                                "end": 508,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all items from the list\n",
                    "description": "<p>Clear all items from the list</p>\n"
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | undefined",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet an item by id\n",
                    "description": "<p>Get an item by id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 385,
                                "end": 387,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 379,
                                "end": 384,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove an item from the list\n",
                    "description": "<p>Remove an item from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 929,
                                "end": 933,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 923,
                                "end": 928,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate an item in the list\n",
                    "description": "<p>Update an item in the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 767,
                                "end": 771,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "item"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 761,
                                "end": 766,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkPagination",
            "id": "directive-AdkPagination-2f2b2993583d0e350ef33e02250c925686340392c2dad1d5c8f753a530b0d7e635db18aa8c4998c902113bc9bab8c238936d54e7ed8ce2e1da2ea548cf0813a6",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/pagination.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\n\n@Directive({\n  selector: '[adk-pagination]',\n  exportAs: 'adkPagination',\n  standalone: true,\n})\nexport class AdkPagination {\n  #page = signal(1);\n  readonly page = computed(() => this.#page());\n  readonly limit = signal(10);\n  readonly total = signal(0);\n\n  /**\n   * Check if the current page is the first\n   */\n  first = computed(() => this.#page() === 1);\n\n  /**\n   * Check if the current page is the last\n   */\n  last = computed(() => this.#page() * this.limit() >= this.total());\n\n  /**\n   * Go to the next page\n   */\n  next(): void {\n    if (this.last()) {\n      throw new Error('You are already on the last page');\n    }\n    this.#page.update((page) => page + 1);\n  }\n\n  /**\n   * Go to the previous page\n   */\n  previous(): void {\n    if (this.first()) {\n      throw new Error('You are already on the first page');\n    }\n    this.#page.update((page) => page - 1);\n  }\n}\n",
            "selector": "[adk-pagination]",
            "providers": [],
            "exportAs": "adkPagination",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#page",
                    "defaultValue": "signal(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "first",
                    "defaultValue": "computed(() => this.#page() === 1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if the current page is the first</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nCheck if the current page is the first\n"
                },
                {
                    "name": "last",
                    "defaultValue": "computed(() => this.#page() * this.limit() >= this.total())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Check if the current page is the last</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nCheck if the current page is the last\n"
                },
                {
                    "name": "limit",
                    "defaultValue": "signal(10)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "page",
                    "defaultValue": "computed(() => this.#page())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "total",
                    "defaultValue": "signal(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to the next page\n",
                    "description": "<p>Go to the next page</p>\n"
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to the previous page\n",
                    "description": "<p>Go to the previous page</p>\n"
                }
            ],
            "extends": []
        },
        {
            "name": "AdkSelection",
            "id": "directive-AdkSelection-8920a1342e8fb97fc7755a3b685d7849b2789d6cbae0d972849349a7d717a5c28c4be5122de077214315611d00f15fcf935bd540934d19e701c2213a4c0c24b9",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/selection.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\n\nimport { ID } from '../models';\n\n@Directive({\n  selector: '[adk-selection]',\n  exportAs: 'adkSelection',\n  standalone: true,\n})\nexport class AdkSelection {\n  #items = signal<Record<ID, boolean>>({});\n  count = computed(() => Object.values(this.#items()).filter(Boolean).length);\n\n  /**\n   * Select multiple items\n   * @param ids\n   */\n  select(...ids: ID[]): void {\n    this.#items.update((items) => ids.reduce((accumulator, id) => ({ ...accumulator, [id]: true }), items));\n  }\n\n  /**\n   * Deselect an item\n   * @param id\n   */\n  deselect(id: ID): void {\n    this.#items.update((items) => {\n      const { [id]: _, ...rest } = items;\n      return rest;\n    });\n  }\n\n  /**\n   * Clear all selected items\n   */\n  clear(): void {\n    this.#items.set({});\n  }\n\n  /**\n   * Check if an item is selected\n   * @param id\n   */\n  selected(id: ID): boolean {\n    return this.#items()[id] ?? false;\n  }\n}\n",
            "selector": "[adk-selection]",
            "providers": [],
            "exportAs": "adkSelection",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<Record<ID, boolean>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "count",
                    "defaultValue": "computed(() => Object.values(this.#items()).filter(Boolean).length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear all selected items\n",
                    "description": "<p>Clear all selected items</p>\n"
                },
                {
                    "name": "deselect",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeselect an item\n",
                    "description": "<p>Deselect an item</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 582,
                                "end": 584,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 576,
                                "end": 581,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect multiple items\n",
                    "description": "<p>Select multiple items</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 387,
                                "end": 390,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "ids"
                            },
                            "type": "ID[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 381,
                                "end": 386,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if an item is selected\n",
                    "description": "<p>Check if an item is selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 870,
                                "end": 872,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "id"
                            },
                            "type": "ID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 864,
                                "end": 869,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkSorting",
            "id": "directive-AdkSorting-38110c3e0875924586860aca57b742c48733a1c6c3e08163bbc86c5d557a13b2b97b6e73bbfc47ec2249ce091febe53640aa5467c78cf90b9650d12dc21bd0ac",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/sorting.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, computed, signal } from '@angular/core';\n\nexport interface SortableItem {\n    id: string;\n    [key: string]: any;\n}\n\n@Directive({\n    selector: '[adk-sorting]',\n    exportAs: 'adkSorting',\n    standalone: true,\n})\nexport class AdkSorting<T extends SortableItem> {\n    #items = signal<T[]>([]);\n    #sortKey = signal<string | null>(null);\n    #sortDirection = signal<'asc' | 'desc'>('asc');\n\n    sortedItems = computed(() => {\n        const items = [...this.#items()];\n        const key = this.#sortKey();\n        const direction = this.#sortDirection();\n\n        if (!key) return items;\n\n        return items.sort((a, b) => {\n            const aValue = a[key];\n            const bValue = b[key];\n\n            if (aValue < bValue) {\n                return direction === 'asc' ? -1 : 1;\n            } else if (aValue > bValue) {\n                return direction === 'asc' ? 1 : -1;\n            } else {\n                return 0;\n            }\n        });\n    });\n\n    /**\n     * Add items to the list\n     * @param newItems\n     */\n    add(...newItems: T[]): void {\n        this.#items.update((items) => [...items, ...newItems]);\n    }\n\n    /**\n     * Set the sorting key and direction\n     * @param key\n     * @param direction\n     */\n    sort(key: string, direction: 'asc' | 'desc'): void {\n        this.#sortKey.set(key);\n        this.#sortDirection.set(direction);\n    }\n\n    /**\n     * Clear the sorting\n     */\n    clearSort(): void {\n        this.#sortKey.set(null);\n        this.#sortDirection.set('asc');\n    }\n\n    /**\n     * Get the current sorting key\n     */\n    getSortKey(): string | null {\n        return this.#sortKey();\n    }\n\n    /**\n     * Get the current sorting direction\n     */\n    getSortDirection(): 'asc' | 'desc' {\n        return this.#sortDirection();\n    }\n}\n",
            "selector": "[adk-sorting]",
            "providers": [],
            "exportAs": "adkSorting",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "#items",
                    "defaultValue": "signal<T[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#sortDirection",
                    "defaultValue": "signal<'asc' | 'desc'>('asc')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "#sortKey",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sortedItems",
                    "defaultValue": "computed(() => {\n        const items = [...this.#items()];\n        const key = this.#sortKey();\n        const direction = this.#sortDirection();\n\n        if (!key) return items;\n\n        return items.sort((a, b) => {\n            const aValue = a[key];\n            const bValue = b[key];\n\n            if (aValue < bValue) {\n                return direction === 'asc' ? -1 : 1;\n            } else if (aValue > bValue) {\n                return direction === 'asc' ? 1 : -1;\n            } else {\n                return 0;\n            }\n        });\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "newItems",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd items to the list\n",
                    "description": "<p>Add items to the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1033,
                                "end": 1041,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "newItems"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1027,
                                "end": 1032,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "clearSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClear the sorting\n",
                    "description": "<p>Clear the sorting</p>\n"
                },
                {
                    "name": "getSortDirection",
                    "args": [],
                    "optional": false,
                    "returnType": "\"asc\" | \"desc\"",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current sorting direction\n",
                    "description": "<p>Get the current sorting direction</p>\n"
                },
                {
                    "name": "getSortKey",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the current sorting key\n",
                    "description": "<p>Get the current sorting key</p>\n"
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "direction",
                            "type": "\"asc\" | \"desc\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the sorting key and direction\n",
                    "description": "<p>Set the sorting key and direction</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1218,
                                "end": 1221,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1212,
                                "end": 1217,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1236,
                                "end": 1245,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "direction"
                            },
                            "type": "\"asc\" | \"desc\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1230,
                                "end": 1235,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "AdkStepperDirective",
            "id": "directive-AdkStepperDirective-5781687d0208a073c5be85f34325e966fb472fe217ec7893d2397a803abcab5ab99a330c756a635d90cdf0c5fe7ec3be2ff6577123872f7f7bad16606ff9c516",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stepper.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[adkStepper]',\n  exportAs: 'adkStepper',\n})\nexport class AdkStepperDirective {\n  @Output() nextStep = new EventEmitter<void>();\n  @Output() previousStep = new EventEmitter<void>();\n\n  @HostListener('click', ['$event.target']) onClick(target: HTMLElement): void {\n    const action = target.getAttribute('data-action');\n    if (action === 'next') {\n      this.next();\n    } else if (action === 'previous') {\n      this.previous();\n    }\n  }\n\n  next(): void {\n    this.nextStep.emit();\n  }\n\n  previous(): void {\n    this.previousStep.emit();\n  }\n}\n",
            "selector": "[adkStepper]",
            "providers": [],
            "exportAs": "adkStepper",
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "nextStep",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter"
                },
                {
                    "name": "previousStep",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "AdkExpansionPanelComponent",
            "id": "component-AdkExpansionPanelComponent-7901702419d175b45cf7ba7d9020e9b3353f30978b2bfed857bd23da354e92cdce2cf88664d7c8fa4b702007c3f96349e59815529fd233d691bf84999ed3c0d1",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/expansion-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-expansion-panel",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative mb-3\">\n    <h6 class=\"mb-0\">\n        <button\n            class=\"relative flex items-center w-full p-4 font-semibold text-left transition-all ease-in border-b border-solid cursor-pointer border-slate-100 text-slate-700 rounded-t-1 group text-dark-500\"\n            (click)=\"togglePanel()\"\n        >\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            <i\n                class=\"absolute right-0 pt-1 text-base transition-transform fa fa-chevron-down\"\n                [ngClass]=\"{ 'rotate-180': isOpen }\"\n            ></i>\n        </button>\n    </h6>\n    <div [@collapseAnimation]=\"isOpen ? 'open' : 'closed'\" class=\"overflow-hidden transition-all duration-300 ease-in-out\">\n        <div class=\"p-4 text-sm leading-normal text-blue-gray-500/80\">\n            <ng-container *ngTemplateOutlet=\"bodyTemplate\"></ng-container>\n        </div>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'expansionPanelBody'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'expansionPanelHeader'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "togglePanel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'adk-expansion-panel',\n    standalone: true,\n    imports: [CommonModule],\n    template: `\n        <div class=\"relative mb-3\">\n            <h6 class=\"mb-0\">\n                <button\n                    class=\"relative flex items-center w-full p-4 font-semibold text-left transition-all ease-in border-b border-solid cursor-pointer border-slate-100 text-slate-700 rounded-t-1 group text-dark-500\"\n                    (click)=\"togglePanel()\"\n                >\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                    <i\n                        class=\"absolute right-0 pt-1 text-base transition-transform fa fa-chevron-down\"\n                        [ngClass]=\"{ 'rotate-180': isOpen }\"\n                    ></i>\n                </button>\n            </h6>\n            <div [@collapseAnimation]=\"isOpen ? 'open' : 'closed'\" class=\"overflow-hidden transition-all duration-300 ease-in-out\">\n                <div class=\"p-4 text-sm leading-normal text-blue-gray-500/80\">\n                    <ng-container *ngTemplateOutlet=\"bodyTemplate\"></ng-container>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('collapseAnimation', [\n            state('closed', style({ height: '0px', visibility: 'hidden' })),\n            state('open', style({ height: '*', visibility: 'visible' })),\n            transition('closed <=> open', animate('300ms ease-in-out')),\n        ]),\n    ],\n})\nexport class AdkExpansionPanelComponent {\n    @Input() isOpen: boolean = false;\n    @ContentChild('expansionPanelHeader') headerTemplate!: TemplateRef<any>;\n    @ContentChild('expansionPanelBody') bodyTemplate!: TemplateRef<any>;\n\n    togglePanel(): void {\n        this.isOpen = !this.isOpen;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-30ea7d0b5a5a54720b3690468f16c104ef2614e1285acd84b467e91604c7f18818802629b7f48951bc0424d8b57f5f59c956d82da583a42039cd9b43e6828a7b",
            "file": "projects/ng-lib/src/lib/tw-ui/components/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-button",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "<!-- Button Variants -->\n<button\n  class=\"select-none rounded-lg py-3 px-6 text-center align-middle font-sans text-xs font-bold uppercase transition-all {{\n    disabled ? (disabledStyle$ | async) : (color$ | async)\n  }}\"\n  type=\"{{ type }}\"\n  [disabled]=\"disabled\"\n>\n  <ng-content></ng-content>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "'bg-blue-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"warn\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledEffect",
                    "defaultValue": "'opacity-50 cursor-not-allowed opacity-50 disabled:cursor-not-allowed disabled:opacity-50'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hoverEffect",
                    "defaultValue": "'hover:shadow-lg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'text-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"filled\" | \"gradient\" | \"outlined\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "btnStyle",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "dangerColor",
                    "defaultValue": "'bg-red-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "disabledClass",
                    "defaultValue": "'rounded-lg px-4 py-2 {color} {textColor} {disabledEffect}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "disabledColor",
                    "defaultValue": "'bg-gray-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "disabledStyle",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "filledClass",
                    "defaultValue": "'{color} {textColor} {hoverEffect}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "gradientClass",
                    "defaultValue": "'bg-gradient-to-r from-{color}-500 to-{color}-600 {textColor} hover:from-{color}-600 hover:to-{color}-700'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "outlinedClass",
                    "defaultValue": "'border border-{color}-500 text-{color}-500 hover:bg-{color}-500 hover:text-white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "primaryColor",
                    "defaultValue": "'bg-blue-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "secondaryColor",
                    "defaultValue": "'bg-gray-700'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "successColor",
                    "defaultValue": "'bg-green-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "textClass",
                    "defaultValue": "`text-{color}-500 hover:text-{color}-600`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "warnColor",
                    "defaultValue": "'bg-amber-500'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBtnStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { CommonModule, NgClass } from '@angular/common';\n\n@Component({\n  selector: 'adk-button',\n  standalone: true,\n  imports: [CommonModule, NgClass],\n  template: `\n    <!-- Button Variants -->\n    <button\n      class=\"select-none rounded-lg py-3 px-6 text-center align-middle font-sans text-xs font-bold uppercase transition-all {{\n        disabled ? (disabledStyle$ | async) : (color$ | async)\n      }}\"\n      type=\"{{ type }}\"\n      [disabled]=\"disabled\"\n    >\n      <ng-content></ng-content>\n    </button>\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent implements OnInit, OnChanges {\n  @Input() disabled!: boolean;\n  @Input() variant: 'filled' | 'gradient' | 'outlined' | 'text' = 'filled';\n  @Input() color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger' = 'primary';\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\n  @Input() customClasses = '';\n  @Input() bgColor = 'bg-blue-500';\n  @Input() textColor = 'text-white';\n  @Input() hoverEffect = 'hover:shadow-lg';\n  @Input() disabledEffect = 'opacity-50 cursor-not-allowed opacity-50 disabled:cursor-not-allowed disabled:opacity-50';\n\n  btnStyle = new BehaviorSubject<string>('');\n  disabledStyle = new BehaviorSubject<string>('');\n\n  get color$(): Observable<string> {\n    return this.btnStyle.asObservable();\n  }\n\n  get disabledStyle$(): Observable<string> {\n    return this.disabledStyle.asObservable();\n  }\n\n  filledClass = '{color} {textColor} {hoverEffect}';\n  gradientClass = 'bg-gradient-to-r from-{color}-500 to-{color}-600 {textColor} hover:from-{color}-600 hover:to-{color}-700';\n  outlinedClass = 'border border-{color}-500 text-{color}-500 hover:bg-{color}-500 hover:text-white';\n  textClass = `text-{color}-500 hover:text-{color}-600`;\n\n  primaryColor = 'bg-blue-500';\n  secondaryColor = 'bg-gray-700';\n  successColor = 'bg-green-500';\n  warnColor = 'bg-amber-500';\n  dangerColor = 'bg-red-500';\n  disabledColor = 'bg-gray-500';\n\n  disabledClass = 'rounded-lg px-4 py-2 {color} {textColor} {disabledEffect}';\n\n  ngOnInit(): void {\n    this.updateBtnStyle();\n  }\n\n  ngOnChanges({ disabled, variant, color, customClasses, bgColor, textColor, hoverEffect, disabledEffect }: SimpleChanges) {\n    if (variant || color || customClasses || bgColor || textColor || hoverEffect || disabledEffect || disabled) {\n      this.updateBtnStyle();\n    }\n  }\n\n  updateBtnStyle() {\n    let color = this.primaryColor;\n    switch (this.color) {\n      case 'success':\n        color = this.successColor;\n        break;\n      case 'warn':\n        color = this.warnColor;\n        break;\n      case 'secondary': {\n        color = this.secondaryColor;\n        break;\n      }\n      case 'danger':\n        color = this.dangerColor;\n        break;\n      default:\n        color = this.primaryColor;\n        break;\n    }\n    let style = '';\n    switch (this.variant) {\n      case 'filled':\n        style = this.filledClass;\n        break;\n      case 'gradient':\n        style = this.gradientClass;\n        break;\n      case 'outlined':\n        style = this.outlinedClass;\n        break;\n      case 'text':\n        style = this.textClass;\n        break;\n      default:\n        style = this.filledClass;\n        break;\n    }\n    this.btnStyle.next(\n      style\n        .replace(/{color}/g, color)\n        .replace(/{textColor}/g, this.textColor)\n        .replace(/{hoverEffect}/g, this.hoverEffect) +\n        ' ' +\n        this.customClasses\n    );\n    this.disabledStyle.next(\n      this.disabledClass\n        .replace(/{disabledEffect}/g, this.disabledEffect)\n        .replace(/{color}/g, this.disabledColor)\n        .replace(/{textColor}/g, this.textColor)\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "color$": {
                    "name": "color$",
                    "getSignature": {
                        "name": "color$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 44
                    }
                },
                "disabledStyle$": {
                    "name": "disabledStyle$",
                    "getSignature": {
                        "name": "disabledStyle$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonWrapperComponent",
            "id": "component-ButtonWrapperComponent-3a01ded2d90c4f155273845d26730a890e0edfc8d46ee37b2eb0da9a258726aa4885cec3f605e4add22a45531b5713b099f145cfbec8d6aa345b224bac184602",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<adk-button [disabled]=\"disabled\" [color]=\"color\" [variant]=\"variant\"> Content for ng-content goes here </adk-button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"warn\" | \"danger\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"filled\" | \"gradient\" | \"outlined\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "handleButtonRouteLink",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { type Meta, type StoryObj } from '@storybook/angular';\n\nimport { ButtonComponent } from '../button.component';\n\nimport { expect } from '@storybook/jest';\nimport { userEvent, within } from '@storybook/test';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'storybook-button-wrapper',\n    standalone: true,\n    imports: [CommonModule, ButtonComponent],\n    template: ` <adk-button [disabled]=\"disabled\" [color]=\"color\" [variant]=\"variant\"> Content for ng-content goes here </adk-button> `,\n})\nclass ButtonWrapperComponent {\n    @Input() disabled = false;\n    @Input() variant: 'filled' | 'gradient' | 'outlined' | 'text' = 'filled';\n    @Input() color: 'primary' | 'secondary' | 'success' | 'warn' | 'danger' = 'primary';\n    @Output() handleButtonRouteLink = new EventEmitter();\n}\nconst meta: Meta<ButtonWrapperComponent> = {\n    component: ButtonWrapperComponent,\n    title: '(TW) Angular UI / Components / Button',\n    tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<ButtonWrapperComponent>;\n\nexport const Primary: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'primary',\n    },\n};\n\nexport const Secondary: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'secondary',\n    },\n};\n\nexport const Success: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'success',\n    },\n};\n\nexport const Danger: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'danger',\n    },\n};\n\nexport const Warn: Story = {\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'warn',\n    },\n};\n\nexport const ButtonActionsTesting: Story = {\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const button = canvasElement.querySelector('adk-button');\n        if (button) {\n            await userEvent.click(button);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-ccc29b77600bb99d65a8b52204c2db540a0ea0e82dcd846d52ba944b5abe7c9ab50f2fde2f509c4a42af66ffc24cfd5a73155aca3bd4734f7912dda5d0e5a8c5",
            "file": "projects/ng-lib/src/lib/tw-ui/components/card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-card",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-md bg-clip-border\">\n  <div class=\"p-2\">\n    <ng-content [select]=\"'adk-card-header'\"></ng-content>\n    <ng-content [select]=\"'adk-card-content'\"></ng-content>\n  </div>\n  <div class=\"p-6 pt-0\">\n    <ng-content [select]=\"'adk-card-footer'\"></ng-content>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'adk-card',\n  standalone: true,\n  template: `\n    <div class=\"relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-md bg-clip-border\">\n      <div class=\"p-2\">\n        <ng-content [select]=\"'adk-card-header'\"></ng-content>\n        <ng-content [select]=\"'adk-card-content'\"></ng-content>\n      </div>\n      <div class=\"p-6 pt-0\">\n        <ng-content [select]=\"'adk-card-footer'\"></ng-content>\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CardComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CardWrapperComponent",
            "id": "component-CardWrapperComponent-5a60895135c849442831bc74ae15fcee68968a7ee96321ca55da455d10c09c3179ab70ece688b91697ebd4935f44ec56d44becc1d11f0409804134413e3b2c8d",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-card-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<adk-card>\n    <h5\n        class=\"adk-card-header block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n    >\n        UI/UX Review Check\n    </h5>\n    <p class=\"adk-card-content block font-sans text-base antialiased font-light leading-relaxed text-inherit\">\n        Card content goes here\n    </p>\n    <button\n        class=\"adk-card-footer align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg bg-gray-900 text-white shadow-md shadow-gray-900/10 hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none\"\n        type=\"button\"\n    >\n        Read More\n    </button>\n</adk-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { type Meta, type StoryObj } from '@storybook/angular';\n\nimport { expect } from '@storybook/jest';\nimport { userEvent, within } from '@storybook/test';\nimport { CommonModule } from '@angular/common';\nimport { CardComponent } from '../card.component';\n\n@Component({\n    selector: 'storybook-card-wrapper',\n    standalone: true,\n    imports: [CommonModule, CardComponent],\n    template: `\n        <adk-card>\n            <h5\n                class=\"adk-card-header block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n            >\n                UI/UX Review Check\n            </h5>\n            <p class=\"adk-card-content block font-sans text-base antialiased font-light leading-relaxed text-inherit\">\n                Card content goes here\n            </p>\n            <button\n                class=\"adk-card-footer align-middle select-none font-sans font-bold text-center uppercase transition-all disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none text-xs py-3 px-6 rounded-lg bg-gray-900 text-white shadow-md shadow-gray-900/10 hover:shadow-lg hover:shadow-gray-900/20 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none\"\n                type=\"button\"\n            >\n                Read More\n            </button>\n        </adk-card>\n    `,\n})\nclass CardWrapperComponent {}\nconst meta: Meta<CardWrapperComponent> = {\n    component: CardWrapperComponent,\n    title: '(TW) Angular UI / Components / Card',\n    tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<CardWrapperComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const CardActionsTesting: Story = {\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const card = canvasElement.querySelector('adk-card');\n        if (card) {\n            await userEvent.click(card);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-47db3ea97de5b0332ab6fc13157dd95afd8c50ca27e2dd4df6babcb468047ef6e5f6ba010b4c69acc27a2732bfa025f165212a7fb3ee982ada825a7b46639d64",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-checkbox",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "@if (options.length > 0) { @for (option of options; track (option.id)) {\n<div [ngClass]=\"class\" class=\"relative flex gap-x-3 mt-2\">\n    <div class=\"flex h-6 items-center\">\n        <input\n            type=\"checkbox\"\n            [checked]=\"formControl[field.key][option.id]?.value\"\n            [name]=\"option.id\"\n            [id]=\"option.id\"\n            [value]=\"option.value\"\n            [formControl]=\"formControl[field.key][option.id]\"\n            [ngClass]=\"inputClass\"\n            (change)=\"onCheckChange($event, option.id)\"\n        />\n    </div>\n    <div class=\"text-sm leading-6\">\n        <label [for]=\"option.id\" [ngClass]=\"labelClass\">{{ option.label }}</label>\n        <p *ngIf=\"option.description\" class=\"text-gray-500\">{{ option.description }}</p>\n    </div>\n</div>\n} } @else {\n<div class=\"inline-flex items-center\">\n    <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\n        <input\n            type=\"checkbox\"\n            class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\n            [checked]=\"formControl[field.key].value\"\n            [name]=\"id\"\n            [id]=\"id\"\n            [value]=\"field.value\"\n            [formControl]=\"formControl[field.key]\"\n            [ngClass]=\"inputClass\"\n            (change)=\"onCheckChange($event, id)\"\n        />\n        <span\n            class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\n        >\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                class=\"h-3.5 w-3.5\"\n                viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                stroke=\"currentColor\"\n                stroke-width=\"1\"\n            >\n                <path\n                    fill-rule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                    clip-rule=\"evenodd\"\n                ></path>\n            </svg>\n        </span>\n    </label>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "Field",
                    "decorators": []
                },
                {
                    "name": "isChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCheckChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { AfterViewInit, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n    standalone: true,\n    selector: 'adk-checkbox',\n    imports: [CommonModule, ReactiveFormsModule],\n    template: `\n        @if (options.length > 0) { @for (option of options; track (option.id)) {\n        <div [ngClass]=\"class\" class=\"relative flex gap-x-3 mt-2\">\n            <div class=\"flex h-6 items-center\">\n                <input\n                    type=\"checkbox\"\n                    [checked]=\"formControl[field.key][option.id]?.value\"\n                    [name]=\"option.id\"\n                    [id]=\"option.id\"\n                    [value]=\"option.value\"\n                    [formControl]=\"formControl[field.key][option.id]\"\n                    [ngClass]=\"inputClass\"\n                    (change)=\"onCheckChange($event, option.id)\"\n                />\n            </div>\n            <div class=\"text-sm leading-6\">\n                <label [for]=\"option.id\" [ngClass]=\"labelClass\">{{ option.label }}</label>\n                <p *ngIf=\"option.description\" class=\"text-gray-500\">{{ option.description }}</p>\n            </div>\n        </div>\n        } } @else {\n        <div class=\"inline-flex items-center\">\n            <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\n                <input\n                    type=\"checkbox\"\n                    class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\"\n                    [checked]=\"formControl[field.key].value\"\n                    [name]=\"id\"\n                    [id]=\"id\"\n                    [value]=\"field.value\"\n                    [formControl]=\"formControl[field.key]\"\n                    [ngClass]=\"inputClass\"\n                    (change)=\"onCheckChange($event, id)\"\n                />\n                <span\n                    class=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\"\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        class=\"h-3.5 w-3.5\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        stroke=\"currentColor\"\n                        stroke-width=\"1\"\n                    >\n                        <path\n                            fill-rule=\"evenodd\"\n                            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                            clip-rule=\"evenodd\"\n                        ></path>\n                    </svg>\n                </span>\n            </label>\n        </div>\n        }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class CheckboxComponent implements OnChanges, AfterViewInit {\n    @Input() field!: Field;\n    @Input() isChecked?: boolean;\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n    formControl: { [key: string]: AbstractControl | any } = {};\n\n    get id() {\n        return `${this.field.id}`;\n    }\n\n    get props() {\n        return this.field?.props;\n    }\n\n    get options() {\n        return this.props?.options ?? [];\n    }\n\n    get autocomplete() {\n        return this.props?.autocomplete ?? 'off';\n    }\n\n    get label() {\n        return this.field.label;\n    }\n\n    get description() {\n        return this.field?.description;\n    }\n\n    get placeholder() {\n        return this.field.placeholder ?? '';\n    }\n\n    get class() {\n        return this.props?.class ?? 'sm:col-span-3';\n    }\n\n    get labelClass() {\n        return this.props?.labelClass ?? 'font-medium text-gray-900';\n    }\n\n    get inputClass() {\n        return this.props?.inputClass ?? 'h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600';\n    }\n\n    ngAfterViewInit(): void {\n        //check if field has already been rendered\n        if (this.formControl[this.field.key]) {\n            return;\n        } else {\n            this.initFormControl();\n        }\n    }\n\n    ngOnChanges({ field, isChecked }: SimpleChanges): void {\n        if (field) {\n            this.field = field.currentValue;\n            if (this.formControl[this.field.key]) {\n                return;\n            } else {\n                this.initFormControl();\n            }\n        }\n        if (isChecked) {\n            console.log('CheckboxComponent', isChecked.currentValue);\n            this.formControl[this.field.key].patchValue(isChecked.currentValue);\n        }\n    }\n\n    private initFormControl(): void {\n        this.formControl[this.field.key] = this.field.formControl;\n        if (this.options.length > 0) {\n            this.options.forEach((option: any) => {\n                this.formControl[this.field.key][option.id] = new FormControl('');\n            });\n        } else {\n            this.formControl[this.field.key] = new FormControl(false);\n        }\n    }\n\n    onCheckChange(event: any, id: any) {\n        let value = event.target.checked;\n        if (this.options.length > 0) {\n            this.formControl[this.field.key][id].patchValue(value);\n        } else {\n            value = this.isChecked !== undefined ? this.isChecked : value;\n            this.formControl[this.field.key].patchValue(value);\n            console.log('CheckboxComponent', value, this.formControl[this.field.key].value);\n        }\n        this.valueChange.emit(this.field.value);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "accessors": {
                "id": {
                    "name": "id",
                    "getSignature": {
                        "name": "id",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                },
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 85
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 101
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 109
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 113
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 117
                    }
                }
            }
        },
        {
            "name": "DefaultTableComponent",
            "id": "component-DefaultTableComponent-06abdb9d5b450727bc29e400f98045186b7e96d1c7a6566d9349215c3775db1ad4c51b52cf02077213605c9d7a9a1ed53021a8e8f74a666f732c2a3f2fb7865e",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/default-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-default-table",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n            .table {\n                thead {\n                    height: 45px;\n                }\n\n                tbody {\n                    tr {\n                        height: 45px;\n                    }\n                }\n            }\n        "
            ],
            "template": "<div class=\"relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-md bg-clip-border\">\n    <div class=\"relative mx-4 mt-4 overflow-hidden text-gray-700 bg-white rounded-none bg-clip-border\">\n        <div class=\"flex items-center justify-between gap-8 mb-8\">\n            <div>\n                @if(title) {\n                <h5 class=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n                    {{ title }}\n                </h5>\n                } @if(caption) {\n                <p class=\"block mt-1 font-sans text-base antialiased font-normal leading-relaxed text-gray-700\">\n                    {{ caption }}\n                </p>\n                }\n            </div>\n            <div class=\"flex flex-col gap-2 shrink-0 sm:flex-row\">\n                @if(showClear) {\n                <span (click)=\"clear()\" class=\"cursor-pointer p-0 !m-auto material-symbols-outlined px-2\"> restart_alt </span>\n                } @if(buttonText && buttonLink && buttonAction === undefined) {\n                <span class=\"grow\"></span>\n                <adk-button (click)=\"buttonClick.emit(buttonLink)\">\n                    <span>{{ buttonText }}</span>\n                </adk-button>\n                } @if (buttonText && buttonAction === 'selectedRowsWFieldSelection') {\n                <adk-button (click)=\"actionButtonClicked()\">\n                    <span>{{ buttonText }}</span>\n                </adk-button>\n                }\n            </div>\n        </div>\n        <table class=\"w-full text-left table-auto\">\n            @if(headers) {\n            <thead>\n                <tr>\n                    @if(selectable) {\n                    <th scope=\"col\" class=\"p-4 border-b border-blue-gray-100 bg-blue-gray-50\"></th>\n                    <!-- Show the select column only if selectable is true -->\n                    } @for (key of headers; track key) {\n                    <th scope=\"col\" class=\"p-4 border-b border-blue-gray-100 bg-blue-gray-50\">\n                        <p class=\"block font-sans text-sm antialiased font-normal leading-none text-blue-gray-900 opacity-70\">\n                            {{ key | uppercase }}\n                        </p>\n                    </th>\n                    }\n                </tr>\n            </thead>\n            }\n            <tbody class=\"h-100%\">\n                @for (item of datasource.items(); track (item.id); let i = $index) {\n                <tr [class.selected]=\"item.selected\">\n                    @if(selectable) {\n                    <td class=\"p-4 border-b border-blue-gray-50\">\n                        <!-- Show the select cell only if selectable is true -->\n                        <input\n                            [checked]=\"datasource.selected(item.id)\"\n                            (click)=\"toggleRowSelection(item)\"\n                            type=\"checkbox\"\n                            class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                        />\n                    </td>\n                    } @for (key of headers; track key) { @if (hasField(item, key)) {\n                    <td *ngIf=\"this.datasource.selected(item.id)\">\n                        <p class=\"block font-sans text-sm antialiased font-normal leading-normal text-blue-gray-900\">\n                            <adk-field [field]=\"item[key]\"></adk-field>\n                        </p>\n                    </td>\n                    } @else {\n                    <td class=\"p-4 border-b border-blue-gray-50\">\n                        @if (isValueArray(item[key])) { @for (val of item[key]; track val) {\n                        <adk-pill>{{ val }}</adk-pill>\n                        } } @else { {{ item[key] }} }\n                    </td>\n                    } }\n                </tr>\n                }\n            </tbody>\n        </table>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFormGroup"
                },
                {
                    "name": "AdkDatasource"
                }
            ],
            "inputsClass": [
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 122,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "Table",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionButtonSelection",
                    "defaultValue": "new EventEmitter<any | any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 126,
                    "type": "EventEmitter"
                },
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedRowsEmitValue",
                    "defaultValue": "new EventEmitter<any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 125,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "#formGroup",
                    "defaultValue": "inject(AdkFormGroup, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "datasource",
                    "defaultValue": "inject(AdkDatasource<Identifiable>, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                }
            ],
            "methodsClass": [
                {
                    "name": "actionButtonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "buttonClicked",
                    "args": [
                        {
                            "name": "buttonLink",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "buttonLink",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasField",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValueArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapSelectedRows",
                    "args": [],
                    "optional": false,
                    "returnType": "{ selectedRows: any; formGroupValues: any; }",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedRowsEmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleRowSelection",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FieldComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "PillComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, inject } from '@angular/core';\nimport { Identifiable, Table } from '../../models';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AdkDatasource } from '../data-source';\nimport { AdkFormGroup } from '../../directives';\nimport { ButtonComponent } from '../../../tw-ui';\nimport { FieldComponent } from '../field.component';\nimport { PillComponent } from '../../../tw-ui/components/pill.component';\n\n@Component({\n    selector: 'adk-default-table',\n    standalone: true,\n    imports: [CommonModule, AsyncPipe, ReactiveFormsModule, FieldComponent, ButtonComponent, PillComponent, FormsModule],\n    hostDirectives: [AdkFormGroup, AdkDatasource],\n    template: `\n        <div class=\"relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-md bg-clip-border\">\n            <div class=\"relative mx-4 mt-4 overflow-hidden text-gray-700 bg-white rounded-none bg-clip-border\">\n                <div class=\"flex items-center justify-between gap-8 mb-8\">\n                    <div>\n                        @if(title) {\n                        <h5 class=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n                            {{ title }}\n                        </h5>\n                        } @if(caption) {\n                        <p class=\"block mt-1 font-sans text-base antialiased font-normal leading-relaxed text-gray-700\">\n                            {{ caption }}\n                        </p>\n                        }\n                    </div>\n                    <div class=\"flex flex-col gap-2 shrink-0 sm:flex-row\">\n                        @if(showClear) {\n                        <span (click)=\"clear()\" class=\"cursor-pointer p-0 !m-auto material-symbols-outlined px-2\"> restart_alt </span>\n                        } @if(buttonText && buttonLink && buttonAction === undefined) {\n                        <span class=\"grow\"></span>\n                        <adk-button (click)=\"buttonClick.emit(buttonLink)\">\n                            <span>{{ buttonText }}</span>\n                        </adk-button>\n                        } @if (buttonText && buttonAction === 'selectedRowsWFieldSelection') {\n                        <adk-button (click)=\"actionButtonClicked()\">\n                            <span>{{ buttonText }}</span>\n                        </adk-button>\n                        }\n                    </div>\n                </div>\n                <table class=\"w-full text-left table-auto\">\n                    @if(headers) {\n                    <thead>\n                        <tr>\n                            @if(selectable) {\n                            <th scope=\"col\" class=\"p-4 border-b border-blue-gray-100 bg-blue-gray-50\"></th>\n                            <!-- Show the select column only if selectable is true -->\n                            } @for (key of headers; track key) {\n                            <th scope=\"col\" class=\"p-4 border-b border-blue-gray-100 bg-blue-gray-50\">\n                                <p class=\"block font-sans text-sm antialiased font-normal leading-none text-blue-gray-900 opacity-70\">\n                                    {{ key | uppercase }}\n                                </p>\n                            </th>\n                            }\n                        </tr>\n                    </thead>\n                    }\n                    <tbody class=\"h-100%\">\n                        @for (item of datasource.items(); track (item.id); let i = $index) {\n                        <tr [class.selected]=\"item.selected\">\n                            @if(selectable) {\n                            <td class=\"p-4 border-b border-blue-gray-50\">\n                                <!-- Show the select cell only if selectable is true -->\n                                <input\n                                    [checked]=\"datasource.selected(item.id)\"\n                                    (click)=\"toggleRowSelection(item)\"\n                                    type=\"checkbox\"\n                                    class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                                />\n                            </td>\n                            } @for (key of headers; track key) { @if (hasField(item, key)) {\n                            <td *ngIf=\"this.datasource.selected(item.id)\">\n                                <p class=\"block font-sans text-sm antialiased font-normal leading-normal text-blue-gray-900\">\n                                    <adk-field [field]=\"item[key]\"></adk-field>\n                                </p>\n                            </td>\n                            } @else {\n                            <td class=\"p-4 border-b border-blue-gray-50\">\n                                @if (isValueArray(item[key])) { @for (val of item[key]; track val) {\n                                <adk-pill>{{ val }}</adk-pill>\n                                } } @else { {{ item[key] }} }\n                            </td>\n                            } }\n                        </tr>\n                        }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n            .table {\n                thead {\n                    height: 45px;\n                }\n\n                tbody {\n                    tr {\n                        height: 45px;\n                    }\n                }\n            }\n        `,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DefaultTableComponent implements OnChanges {\n    datasource = inject(AdkDatasource<Identifiable>, { self: true });\n    #formGroup = inject(AdkFormGroup, { self: true });\n    @Input() showClear = false;\n    @Input() table!: Table;\n\n    @Output() selectedRowsEmitValue = new EventEmitter<any[]>();\n    @Output() actionButtonSelection = new EventEmitter<any | any[]>();\n    @Output() buttonClick = new EventEmitter();\n\n    get formGroup() {\n        return this.#formGroup.formGroup();\n    }\n\n    get headers() {\n        return this.table?.headers ?? [];\n    }\n\n    get props() {\n        return this.table?.props;\n    }\n\n    get title() {\n        return this.props?.title;\n    }\n\n    get caption() {\n        return this.props?.caption;\n    }\n\n    get buttonText() {\n        return this.props?.buttonText;\n    }\n\n    get buttonLink() {\n        return this.props?.buttonLink ?? [];\n    }\n\n    get buttonAction() {\n        return this.props?.buttonAction;\n    }\n\n    get selectable() {\n        return this.props?.selectable ?? false;\n    }\n\n    get height() {\n        return this.props?.height ?? 'h-auto';\n    }\n\n    ngOnChanges({ table }: SimpleChanges): void {\n        if (table) {\n            this.table = table.currentValue;\n            this.datasource.fetch(this.table.rows);\n            this.selectedRowsEmit();\n        }\n    }\n\n    mapSelectedRows() {\n        return {\n            selectedRows: this.datasource.selectedItems(),\n            formGroupValues: this.formGroup.value,\n        };\n    }\n\n    hasField(row: any, key: string): boolean {\n        return row[key] instanceof Object && row[key].type !== undefined;\n    }\n\n    buttonClicked(buttonLink: any[]) {\n        this.buttonClick.emit(buttonLink);\n    }\n\n    actionButtonClicked() {\n        this.actionButtonSelection.emit(this.mapSelectedRows());\n    }\n\n    isValueArray(value: any): boolean {\n        return Array.isArray(value);\n    }\n\n    toggleRowSelection(row: any): void {\n        this.datasource.selected(row.id) ? this.datasource.deselect(row.id) : this.datasource.select(row.id);\n        row.selected = this.datasource.selected(row.id);\n        this.selectedRowsEmit();\n    }\n\n    selectedRowsEmit() {\n        this.selectedRowsEmitValue.emit(this.datasource.selectedItems());\n    }\n\n    clear() {\n        this.datasource.reset();\n        this.selectedRowsEmit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n            .table {\n                thead {\n                    height: 45px;\n                }\n\n                tbody {\n                    tr {\n                        height: 45px;\n                    }\n                }\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "formGroup": {
                    "name": "formGroup",
                    "getSignature": {
                        "name": "formGroup",
                        "type": "",
                        "returnType": "",
                        "line": 129
                    }
                },
                "headers": {
                    "name": "headers",
                    "getSignature": {
                        "name": "headers",
                        "type": "",
                        "returnType": "",
                        "line": 133
                    }
                },
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 137
                    }
                },
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "",
                        "returnType": "",
                        "line": 141
                    }
                },
                "caption": {
                    "name": "caption",
                    "getSignature": {
                        "name": "caption",
                        "type": "",
                        "returnType": "",
                        "line": 145
                    }
                },
                "buttonText": {
                    "name": "buttonText",
                    "getSignature": {
                        "name": "buttonText",
                        "type": "",
                        "returnType": "",
                        "line": 149
                    }
                },
                "buttonLink": {
                    "name": "buttonLink",
                    "getSignature": {
                        "name": "buttonLink",
                        "type": "",
                        "returnType": "",
                        "line": 153
                    }
                },
                "buttonAction": {
                    "name": "buttonAction",
                    "getSignature": {
                        "name": "buttonAction",
                        "type": "",
                        "returnType": "",
                        "line": 157
                    }
                },
                "selectable": {
                    "name": "selectable",
                    "getSignature": {
                        "name": "selectable",
                        "type": "",
                        "returnType": "",
                        "line": 161
                    }
                },
                "height": {
                    "name": "height",
                    "getSignature": {
                        "name": "height",
                        "type": "",
                        "returnType": "",
                        "line": 165
                    }
                }
            }
        },
        {
            "name": "DragDropExampleComponent",
            "id": "component-DragDropExampleComponent-1434144f7e8b5eaa05d3bab2bf7b4f21ece111f6864ee31033cfa3dbc891d5e5622b087d99548940ebabae968fd9fc0e82b5299ccd3565f2302b8011db97caf1",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drag-drop-example",
            "styleUrls": [],
            "styles": [
                "\n            .drag-item {\n                width: 100px;\n                height: 100px;\n                background-color: #f0f0f0;\n                border: 1px solid #ccc;\n                text-align: center;\n                line-height: 100px;\n            }\n            .drop-zone {\n                width: 200px;\n                height: 200px;\n                background-color: #f9f9f9;\n                border: 2px dashed #ccc;\n                margin-top: 20px;\n                text-align: center;\n                line-height: 200px;\n            }\n        "
            ],
            "template": "<div class=\"drag-item\" adkDraggable (dragStart)=\"onDragStart($event)\" (dragEnd)=\"onDragEnd($event)\">Drag me!</div>\n<div class=\"drop-zone\" adkDroppable (drop)=\"onDrop($event)\">\n    {{ droppedItem ? 'Dropped: ' + droppedItem : 'Drop here' }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "droppedItem",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkDraggableDirective",
                    "type": "directive"
                },
                {
                    "name": "AdkDroppableDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkDraggableDirective } from '../drag';\nimport { AdkDroppableDirective } from '../drop';\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-drag-drop-example',\n    template: `\n        <div class=\"drag-item\" adkDraggable (dragStart)=\"onDragStart($event)\" (dragEnd)=\"onDragEnd($event)\">Drag me!</div>\n        <div class=\"drop-zone\" adkDroppable (drop)=\"onDrop($event)\">\n            {{ droppedItem ? 'Dropped: ' + droppedItem : 'Drop here' }}\n        </div>\n    `,\n    styles: [\n        `\n            .drag-item {\n                width: 100px;\n                height: 100px;\n                background-color: #f0f0f0;\n                border: 1px solid #ccc;\n                text-align: center;\n                line-height: 100px;\n            }\n            .drop-zone {\n                width: 200px;\n                height: 200px;\n                background-color: #f9f9f9;\n                border: 2px dashed #ccc;\n                margin-top: 20px;\n                text-align: center;\n                line-height: 200px;\n            }\n        `,\n    ],\n    standalone: true,\n    imports: [CommonModule, AdkDraggableDirective, AdkDroppableDirective],\n})\nexport class DragDropExampleComponent {\n    droppedItem: string | null = null;\n\n    onDragStart(event: DragEvent) {\n        console.log('Drag started:', event);\n    }\n\n    onDragEnd(event: DragEvent) {\n        console.log('Drag ended:', event);\n    }\n\n    onDrop(event: DragEvent) {\n        this.droppedItem = 'Item dropped';\n        console.log('Dropped:', event);\n    }\n}\n\nconst meta: Meta<typeof DragDropExampleComponent> = {\n    component: DragDropExampleComponent,\n    title: '(TW) Angular UI / Directives / Draggable Table',\n};\n\nexport default meta;\ntype Story = StoryObj<typeof DragDropExampleComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            .drag-item {\n                width: 100px;\n                height: 100px;\n                background-color: #f0f0f0;\n                border: 1px solid #ccc;\n                text-align: center;\n                line-height: 100px;\n            }\n            .drop-zone {\n                width: 200px;\n                height: 200px;\n                background-color: #f9f9f9;\n                border: 2px dashed #ccc;\n                margin-top: 20px;\n                text-align: center;\n                line-height: 200px;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "EmailComponent",
            "id": "component-EmailComponent-b07547cbe0bb00c8adbbacd190f732ba407085fcf87b10ed0e92ed72fbbc666dbe2d100c55a56f11ffc1d0fa0dd0a6befe80c2f099fad092aa94778699f1c516",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/email.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-email-input",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  @if (field ) {\n  <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  }\n  <div class=\"mt-2\">\n    <input\n      type=\"email\"\n      [formControl]=\"formControl[field.key]\"\n      [pattern]=\"pattern\"\n      [placeholder]=\"placeholder\"\n      [name]=\"field.key\"\n      [id]=\"field.key\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    />\n  </div>\n  @if (description && !formControl[field.key].touched){\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  } @else {\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    <div *ngIf=\"formControl[field.key].errors['minlength']\">\n      Must be at least\n      {{ formControl[field.key].errors['minlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n      Must not exceed\n      {{ formControl[field.key].errors['maxlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['pattern']\">{{ errorMessage }}</div>\n  </div>\n  }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n  standalone: true,\n  selector: 'adk-email-input',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    @if (field) {\n    <div [ngClass]=\"class\">\n      @if (field ) {\n      <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n      }\n      <div class=\"mt-2\">\n        <input\n          type=\"email\"\n          [formControl]=\"formControl[field.key]\"\n          [pattern]=\"pattern\"\n          [placeholder]=\"placeholder\"\n          [name]=\"field.key\"\n          [id]=\"field.key\"\n          [autocomplete]=\"autocomplete\"\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n          [required]=\"required\"\n        />\n      </div>\n      @if (description && !formControl[field.key].touched){\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n      </p>\n      } @else {\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n          Must be at least\n          {{ formControl[field.key].errors['minlength'].requiredLength }}\n          characters\n        </div>\n        <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n          Must not exceed\n          {{ formControl[field.key].errors['maxlength'].requiredLength }}\n          characters\n        </div>\n        <div *ngIf=\"formControl[field.key].errors['pattern']\">{{ errorMessage }}</div>\n      </div>\n      }\n    </div>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class EmailComponent implements OnChanges {\n  @Input() field!: Field;\n  formControl: { [key: string]: AbstractControl | any } = {};\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field.description;\n  }\n\n  get errorMessage() {\n    return this.props?.errorMessage ?? 'Invalid pattern entered';\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'sm:col-span-3';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get pattern() {\n    return this.props?.pattern ?? '';\n  }\n\n  get required() {\n    return this.props?.required ?? true;\n  }\n\n  get inputClass() {\n    if (this.props && this.props.inputClass) {\n      return this.props.inputClass;\n    }\n    return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6';\n  }\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.initFormControl();\n    }\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 74
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                },
                "errorMessage": {
                    "name": "errorMessage",
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "",
                        "returnType": "",
                        "line": 82
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 94
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 98
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 102
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 106
                    }
                }
            }
        },
        {
            "name": "FieldComponent",
            "id": "component-FieldComponent-08717e1665c57becfc46f6bdb17935f102314fcca9ea58e1042a51a79eb5e910d94a886ffa812de2a4ef61ea1f7a8bbf8a1b0962a859dd677c6683eb3988d67b",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-field",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "@if(field) { @switch(field.type) { @case('checkbox') {\n<adk-checkbox [field]=\"field\"></adk-checkbox>\n} @case('radio') {\n<adk-radio [field]=\"field\"></adk-radio>\n} @case('textarea') {\n<adk-textarea [field]=\"field\"></adk-textarea>\n} @case('password') {\n<adk-password-input [field]=\"field\"></adk-password-input>\n} @case('email') {\n<adk-email-input [field]=\"field\"></adk-email-input>\n}@case('select') {\n<adk-multi-select [field]=\"field\"></adk-multi-select>\n} @default {\n<adk-input [field]=\"field\"></adk-input>\n} } }\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "components",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CheckboxComponent } from './types/checkbox.component';\nimport { CommonModule } from '@angular/common';\nimport { EmailComponent } from './types/email.component';\nimport { Field } from '../models';\nimport { InputComponent } from './types/input.component';\nimport { MultiSelectComponent } from './types/multi-select.component';\nimport { PasswordComponent } from './types/password.component';\nimport { RadioComponent } from './types/radio.component';\nimport { SelectComponent } from './types/select.component';\nimport { TextareaComponent } from './types/textarea.component';\n\nconst components = [\n    InputComponent,\n    CheckboxComponent,\n    RadioComponent,\n    TextareaComponent,\n    PasswordComponent,\n    SelectComponent,\n    MultiSelectComponent,\n    EmailComponent,\n];\n\n@Component({\n    standalone: true,\n    selector: 'adk-field',\n    imports: [CommonModule, components],\n    template: `\n        @if(field) { @switch(field.type) { @case('checkbox') {\n        <adk-checkbox [field]=\"field\"></adk-checkbox>\n        } @case('radio') {\n        <adk-radio [field]=\"field\"></adk-radio>\n        } @case('textarea') {\n        <adk-textarea [field]=\"field\"></adk-textarea>\n        } @case('password') {\n        <adk-password-input [field]=\"field\"></adk-password-input>\n        } @case('email') {\n        <adk-email-input [field]=\"field\"></adk-email-input>\n        }@case('select') {\n        <adk-multi-select [field]=\"field\"></adk-multi-select>\n        } @default {\n        <adk-input [field]=\"field\"></adk-input>\n        } } }\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class FieldComponent implements OnChanges {\n    @Input() field!: Field;\n\n    get props() {\n        return this.field?.props;\n    }\n\n    get steps() {\n        return this.props?.['steps'] ?? [];\n    }\n\n    ngOnChanges({ field }: SimpleChanges): void {\n        if (field) this.field = field.currentValue;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                },
                "steps": {
                    "name": "steps",
                    "getSignature": {
                        "name": "steps",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                }
            }
        },
        {
            "name": "FieldDirectiveComponent",
            "id": "component-FieldDirectiveComponent-6d8d6e1bb73265eb8348fa54bcddb4cdd20758e64cb863748c4a393baa289ae6131175c2bac8ac4aeb851be0e7e904ed91ee9eca7d6d3385bfb1ffbb5f655758",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFields"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkFields } from '../field';\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [AdkFields],\n})\nclass FieldDirectiveComponent {}\n\nconst meta: Meta<FieldDirectiveComponent> = {\n    component: FieldDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Form / Field',\n};\nexport default meta;\ntype Story = StoryObj<FieldDirectiveComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "FieldListDirective",
            "id": "component-FieldListDirective-2daaf7d566e0f635b5eb641ecd0efaf719af7b4baa8a7634c22841c1cfc37481f95357b88b42cfbd185ed3d9b95b8667f1c1d977e8112c8fe1d80b9c9b35aa00",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkFieldList } from '../field-list';\n/* eslint-disable @angular-eslint/component-class-suffix */\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [AdkFieldList],\n})\nclass FieldListDirective {}\n\nconst meta: Meta<FieldListDirective> = {\n    component: FieldListDirective,\n    title: '(TW) Angular UI / Directives / Form / Field List',\n};\nexport default meta;\ntype Story = StoryObj<FieldListDirective>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "FieldsComponent",
            "id": "component-FieldsComponent-d783e3472716e7dea9be1828adf2a31a089fb5eac45bfb4f0cf2c339ae88350f8bf053d998a1517261c821a325310eea211d0a9dd13edf272415497b2de7677b",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/fields.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-fields",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "<div [class]=\"wrapperClass\">\n  @for (field of fields.fields(); track (field.id)) {\n  <adk-field [field]=\"field\"> </adk-field>\n  }\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkFieldList"
                },
                {
                    "name": "AdkFormGroup"
                }
            ],
            "inputsClass": [
                {
                    "name": "fieldConfig",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Field[]",
                    "decorators": []
                },
                {
                    "name": "wrapperClass",
                    "defaultValue": "'grid grid-cols-3 gap-x-4 gap-y-4'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fields",
                    "defaultValue": "inject(AdkFieldList, { self: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\n\nimport { AdkFieldList } from '../directives';\nimport { AdkFormGroup } from '../directives/form-group';\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../models';\nimport { FieldComponent } from './field.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n  standalone: true,\n  selector: 'adk-fields',\n  imports: [CommonModule, ReactiveFormsModule, FieldComponent],\n  hostDirectives: [AdkFieldList, AdkFormGroup],\n  template: `\n    <div [class]=\"wrapperClass\">\n      @for (field of fields.fields(); track (field.id)) {\n      <adk-field [field]=\"field\"> </adk-field>\n      }\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class FieldsComponent implements OnChanges {\n  fields = inject(AdkFieldList, { self: true });\n\n  @Input() fieldConfig: Field[] = [];\n  @Input() wrapperClass = 'grid grid-cols-3 gap-x-4 gap-y-4';\n\n  ngOnChanges({ fieldConfig }: SimpleChanges): void {\n    if (fieldConfig) {\n      this.fields.add(...fieldConfig.currentValue);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "HttpClientDirectiveComponent",
            "id": "component-HttpClientDirectiveComponent-0913bcdf9c5c65e7ffe9b23924d9b3333975214306aa2ce79407319f8eb91684828cafeead0fdb30077e6636427fad22de1ec7482f2bad3a8f6077e3744730d6",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkHttpClient",
                    "inputs": [
                        "adkUrl"
                    ],
                    "outputs": []
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkHttpClient } from '../http-client';\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [{ directive: AdkHttpClient, inputs: ['adkUrl'] }],\n})\nclass HttpClientDirectiveComponent {}\n\nconst meta: Meta<HttpClientDirectiveComponent> = {\n    component: HttpClientDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Http Client',\n};\nexport default meta;\ntype Story = StoryObj<HttpClientDirectiveComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-91d24a78886efe541a62dddcae068119d5347cf4c892ee7a2fa45b74caf6635cc62910023c73f0f5e0c5c2c89b22a6ef1debf86d60d4f32cebbaa4e6c88010ac",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-input",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  @if (field ) {\n  <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  }\n  <div class=\"mt-2\">\n    <input\n      type=\"text\"\n      [formControl]=\"formControl[field.key]\"\n      [pattern]=\"pattern\"\n      [placeholder]=\"placeholder\"\n      [id]=\"field.key\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    />\n  </div>\n  @if (description && !formControl[field.key].touched){\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  } @else {\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    <div *ngIf=\"formControl[field.key].errors['minlength']\">\n      Must be at least\n      {{ formControl[field.key].errors['minlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n      Must not exceed\n      {{ formControl[field.key].errors['maxlength'].requiredLength }}\n      characters\n    </div>\n  </div>\n  }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges, inject } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n  standalone: true,\n  selector: 'adk-input',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    @if (field) {\n    <div [ngClass]=\"class\">\n      @if (field ) {\n      <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n      }\n      <div class=\"mt-2\">\n        <input\n          type=\"text\"\n          [formControl]=\"formControl[field.key]\"\n          [pattern]=\"pattern\"\n          [placeholder]=\"placeholder\"\n          [id]=\"field.key\"\n          [autocomplete]=\"autocomplete\"\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n          [required]=\"required\"\n        />\n      </div>\n      @if (description && !formControl[field.key].touched){\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n      </p>\n      } @else {\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n          Must be at least\n          {{ formControl[field.key].errors['minlength'].requiredLength }}\n          characters\n        </div>\n        <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n          Must not exceed\n          {{ formControl[field.key].errors['maxlength'].requiredLength }}\n          characters\n        </div>\n      </div>\n      }\n    </div>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class InputComponent implements OnChanges {\n  @Input() field!: Field;\n  formControl: { [key: string]: AbstractControl | any } = {};\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field.description;\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'sm:col-span-3';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get pattern() {\n    return this.props?.pattern ?? '';\n  }\n\n  get required() {\n    return this.props?.required ?? true;\n  }\n\n  get inputClass() {\n    if (this.props && this.props.inputClass) {\n      return this.props.inputClass;\n    }\n    return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6';\n  }\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.initFormControl();\n    }\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 85
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 101
                    }
                }
            }
        },
        {
            "name": "ListDirectiveComponent",
            "id": "component-ListDirectiveComponent-d218c91701ea9c25eba6097b62f3c3fcbfa03b02bcabd5c018443e6ddcb4986f1f0b36a8ea54eed7f61f8617a9312c9d5fa1c8c44850dccc84c359a30440039f",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkList"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkList } from '../list';\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [AdkList],\n})\nclass ListDirectiveComponent {}\n\nconst meta: Meta<ListDirectiveComponent> = {\n    component: ListDirectiveComponent,\n    title: '(TW) Angular UI / Directives / List',\n};\nexport default meta;\ntype Story = StoryObj<ListDirectiveComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-78067b40977b797ba7ba1c47695c1634f62f7865fdb73a37b1342707f9aea38e989350619389c8f53b34fae3618fee35b42afc0676c2ceeda3cebfb568711759",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-multi-select",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div class=\"w-full flex items-center justify-center\">\n  <div class=\"w-full relative\">\n    <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n    <div\n      (click)=\"toggle()\"\n      tabindex=\"0\"\n      aria-expanded=\"true\"\n      [id]=\"field.id\"\n      class=\"mt-2 m-auto flex text-sm cursor-pointer text-gray-500 border border-gray-300 rounded shadow-sm transition-all duration-300 focus:outline-none bg-white hover:border-gray-400 focus:border-purple-500 focus:ring focus:ring-purple-500/20\"\n    >\n      <div class=\"grow pl-2.5 py-2 pr-2 flex flex-wrap gap-1\">\n        @if(isMultipleTag) { @for (option of selectedOptions; track $index) {\n        <div class=\"bg-gray-200 border rounded-sm flex space-x-1 pl-1 items-center\">\n          <p class=\"truncate cursor-default select-none\">\n            {{ option.label }}\n          </p>\n          <div\n            (click)=\"toggleOption(option)\"\n            class=\"flex items-center px-1 cursor-pointer rounded-r-sm hover:bg-red-200 hover:text-red-600\"\n          >\n            <span class=\"material-symbols-outlined text-sm\"> close </span>\n          </div>\n        </div>\n        } } @else {\n        <p class=\"truncate cursor-default select-none self-center\">\n          @if (selectedOptions[0]){\n          {{ selectedOptions[0].label }}\n          }\n        </p>\n        }\n      </div>\n      <div class=\"flex flex-none items-center gap-1 py-1.5 px-1\">\n        <div (click)=\"clearOption()\" class=\"mt-1\">\n          <span class=\"cursor-pointer p-0 !m-auto material-symbols-outlined\"> restart_alt </span>\n        </div>\n        <div class=\"h-full w-px bg-gray-300 inline-block\"></div>\n        <span class=\"material-symbols-outlined\"> @if (open) { expand_less } @else { expand_more } </span>\n      </div>\n    </div>\n    @if (open) {\n    <div class=\"absolute z-10 w-full bg-white shadow-lg border rounded py-1 mt-1.5 text-sm text-gray-700\" tabindex=\"-1\">\n      <div class=\"relative py-1 px-2.5\">\n        <span class=\"absolute w-5 h-5 mt-2.5 pb-0.5 ml-2 text-gray-500 material-symbols-outlined\"> search </span>\n        <input\n          #searchInput\n          type=\"text\"\n          name=\"Search\"\n          id=\"Search\"\n          [(ngModel)]=\"searchText\"\n          (input)=\"onSearchChange()\"\n          placeholder=\"Search...\"\n          class=\"w-full py-2 pl-8 text-sm text-gray-500 bg-gray-100 border border-gray-200 rounded focus:border-gray-200 focus:ring-0 focus:outline-none\"\n        />\n      </div>\n      <div role=\"option\" class=\"max-h-72 overflow-y-auto\">\n        @if (filteredOptions.length !== 0) { @for (option of filteredOptions; track $index) {\n        <div class=\"px-2.5 last:border-0 border-b-[1px] py-2 border-gray-200\">\n          @if (option.category) {\n          <div class=\"pr-2 py-2 cursor-default select-none truncate font-bold text-gray-700\">\n            {{ option.category }}\n          </div>\n          }\n          <li\n            class=\"block transition duration-200 px-2 py-2 cursor-pointer select-none truncate rounded text-gray-500 hover:bg-blue-100 hover:text-blue-500\"\n            role=\"option\"\n            aria-selected=\"false\"\n            (click)=\"toggleOption(option)\"\n          >\n            {{ option.label }}\n          </li>\n        </div>\n        } } @else {\n        <div class=\"px-2 py-2 cursor-not-allowed truncate text-gray-400 select-none\">No options found</div>\n        }\n      </div>\n    </div>\n\n    }\n  </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clearOptionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "clearOptionChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "required": false
                },
                {
                    "name": "filteredOptions",
                    "defaultValue": "this.options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "output<FieldOptions[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "selectedOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FieldOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "methodsClass": [
                {
                    "name": "clearOption",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "FieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "FieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges, output } from '@angular/core';\nimport { Field, FieldOptions } from '../../models';\n\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  standalone: true,\n  selector: 'adk-multi-select',\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  template: `\n    @if (field) {\n    <div class=\"w-full flex items-center justify-center\">\n      <div class=\"w-full relative\">\n        <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n        <div\n          (click)=\"toggle()\"\n          tabindex=\"0\"\n          aria-expanded=\"true\"\n          [id]=\"field.id\"\n          class=\"mt-2 m-auto flex text-sm cursor-pointer text-gray-500 border border-gray-300 rounded shadow-sm transition-all duration-300 focus:outline-none bg-white hover:border-gray-400 focus:border-purple-500 focus:ring focus:ring-purple-500/20\"\n        >\n          <div class=\"grow pl-2.5 py-2 pr-2 flex flex-wrap gap-1\">\n            @if(isMultipleTag) { @for (option of selectedOptions; track $index) {\n            <div class=\"bg-gray-200 border rounded-sm flex space-x-1 pl-1 items-center\">\n              <p class=\"truncate cursor-default select-none\">\n                {{ option.label }}\n              </p>\n              <div\n                (click)=\"toggleOption(option)\"\n                class=\"flex items-center px-1 cursor-pointer rounded-r-sm hover:bg-red-200 hover:text-red-600\"\n              >\n                <span class=\"material-symbols-outlined text-sm\"> close </span>\n              </div>\n            </div>\n            } } @else {\n            <p class=\"truncate cursor-default select-none self-center\">\n              @if (selectedOptions[0]){\n              {{ selectedOptions[0].label }}\n              }\n            </p>\n            }\n          </div>\n          <div class=\"flex flex-none items-center gap-1 py-1.5 px-1\">\n            <div (click)=\"clearOption()\" class=\"mt-1\">\n              <span class=\"cursor-pointer p-0 !m-auto material-symbols-outlined\"> restart_alt </span>\n            </div>\n            <div class=\"h-full w-px bg-gray-300 inline-block\"></div>\n            <span class=\"material-symbols-outlined\"> @if (open) { expand_less } @else { expand_more } </span>\n          </div>\n        </div>\n        @if (open) {\n        <div class=\"absolute z-10 w-full bg-white shadow-lg border rounded py-1 mt-1.5 text-sm text-gray-700\" tabindex=\"-1\">\n          <div class=\"relative py-1 px-2.5\">\n            <span class=\"absolute w-5 h-5 mt-2.5 pb-0.5 ml-2 text-gray-500 material-symbols-outlined\"> search </span>\n            <input\n              #searchInput\n              type=\"text\"\n              name=\"Search\"\n              id=\"Search\"\n              [(ngModel)]=\"searchText\"\n              (input)=\"onSearchChange()\"\n              placeholder=\"Search...\"\n              class=\"w-full py-2 pl-8 text-sm text-gray-500 bg-gray-100 border border-gray-200 rounded focus:border-gray-200 focus:ring-0 focus:outline-none\"\n            />\n          </div>\n          <div role=\"option\" class=\"max-h-72 overflow-y-auto\">\n            @if (filteredOptions.length !== 0) { @for (option of filteredOptions; track $index) {\n            <div class=\"px-2.5 last:border-0 border-b-[1px] py-2 border-gray-200\">\n              @if (option.category) {\n              <div class=\"pr-2 py-2 cursor-default select-none truncate font-bold text-gray-700\">\n                {{ option.category }}\n              </div>\n              }\n              <li\n                class=\"block transition duration-200 px-2 py-2 cursor-pointer select-none truncate rounded text-gray-500 hover:bg-blue-100 hover:text-blue-500\"\n                role=\"option\"\n                aria-selected=\"false\"\n                (click)=\"toggleOption(option)\"\n              >\n                {{ option.label }}\n              </li>\n            </div>\n            } } @else {\n            <div class=\"px-2 py-2 cursor-not-allowed truncate text-gray-400 select-none\">No options found</div>\n            }\n          </div>\n        </div>\n\n        }\n      </div>\n    </div>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class MultiSelectComponent implements OnChanges {\n  @Input() field!: Field;\n\n  formControl: { [key: string]: AbstractControl | any } = {};\n  open = false;\n  selectedOptions: FieldOptions[] = [];\n  filteredOptions: FieldOptions[] = this.options;\n  selectedOptionChange = output<FieldOptions[]>();\n  clearOptionChange = output();\n  searchText = '';\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get isMultipleTag() {\n    return this.props?.isMultipleTag ?? false;\n  }\n\n  get options() {\n    return this.props?.options ?? [];\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field?.description;\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'sm:col-span-3';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get inputClass() {\n    return (\n      this.props?.inputClass ??\n      'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6'\n    );\n  }\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.filteredOptions = this.field?.props?.options\n        ? this.field?.props?.options.filter((opt) => opt.label.toLowerCase().includes(this.searchText.toLowerCase()))\n        : [];\n      this.initFormControl();\n    }\n  }\n\n  onOptionSelected(value: string) {\n    this.formControl[this.field.key].setValue(value);\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n\n  onSearchChange() {\n    if (!this.searchText || this.searchText === '') {\n      this.filteredOptions = this.options;\n    } else {\n      this.filteredOptions = this.options.filter((opt) => opt.label.toLowerCase().includes(this.searchText.toLowerCase()));\n    }\n  }\n\n  toggle() {\n    this.open = !this.open;\n  }\n\n  toggleOption(option: FieldOptions) {\n    if (this.isMultipleTag) {\n      if (this.selectedOptions.includes(option)) {\n        this.selectedOptions = this.selectedOptions.filter((value) => value !== option);\n        this.filteredOptions.push(option);\n        const selectedOptionVal = this.selectedOptions.map((opt) => opt.value);\n        this.formControl[this.field.key].setValue(selectedOptionVal);\n      } else {\n        this.selectedOptions.push(option);\n        this.filteredOptions = this.filteredOptions.filter((value) => value !== option);\n        const selectedOptionVal = this.selectedOptions.map((opt) => opt.value);\n        this.formControl[this.field.key].setValue(selectedOptionVal);\n      }\n    } else {\n      this.selectedOptions = [option];\n      this.filteredOptions = this.options.filter((value) => value !== option);\n      const selectedOptionVal = option.value;\n      this.formControl[this.field.key].setValue(selectedOptionVal);\n    }\n\n    this.selectedOptionChange.emit(this.selectedOptions);\n  }\n\n  clearOption() {\n    this.filteredOptions = this.filteredOptions.concat(this.selectedOptions);\n    this.selectedOptions = [];\n    this.selectedOptionChange.emit(this.selectedOptions);\n    this.formControl[this.field.key].setValue('');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                },
                "isMultipleTag": {
                    "name": "isMultipleTag",
                    "getSignature": {
                        "name": "isMultipleTag",
                        "type": "",
                        "returnType": "",
                        "line": 118
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 122
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 126
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 130
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 134
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 138
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 142
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 146
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 150
                    }
                }
            }
        },
        {
            "name": "PaginationDirectiveComponent",
            "id": "component-PaginationDirectiveComponent-34272366e15244801d1bc213f1962c5862c3e6c6a87d9c5a463285656ab168b6cddf90f125a04e508bb5f04563eb1fcaa8df4438683d1ad87111937c49403fe8",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-host",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "AdkPagination"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkPagination } from '../pagination';\nimport { Component } from '@angular/core';\nimport { expect } from '@storybook/jest';\nimport { within } from '@storybook/testing-library';\n\n@Component({\n    standalone: true,\n    selector: 'adk-host',\n    template: ``,\n    hostDirectives: [AdkPagination],\n})\nclass PaginationDirectiveComponent {}\n\nconst meta: Meta<PaginationDirectiveComponent> = {\n    component: PaginationDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Pagination',\n};\nexport default meta;\ntype Story = StoryObj<PaginationDirectiveComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n\nexport const Heading: Story = {\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\n    },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PasswordComponent",
            "id": "component-PasswordComponent-5bc2eb66848f1de11a4ad9ffbfc5a3f404865172a621b34f74ff8dbddbbe07fbd4252f51db84414e2fa7d03e7a6b9f28cc761d1f3cb362e811d63b97ab10f9b5",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-password-input",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  <div class=\"mt-2 relative\">\n    <input\n      [type]=\"showPassword ? 'text' : 'password'\"\n      [formControl]=\"formControl[field.key]\"\n      [pattern]=\"pattern\"\n      [placeholder]=\"placeholder\"\n      [name]=\"field.key\"\n      [id]=\"field.key\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    />\n    <button\n      type=\"button\"\n      (click)=\"togglePasswordVisibility()\"\n      class=\"absolute inset-y-0 right-0 flex items-center px-2 focus:outline-none\"\n    >\n      {{ showPassword ? 'Hide' : 'Show' }}\n    </button>\n  </div>\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    <div *ngIf=\"formControl[field.key].errors['minlength']\">\n      Must be at least\n      {{ formControl[field.key].errors['minlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n      Must not exceed\n      {{ formControl[field.key].errors['maxlength'].requiredLength }}\n      characters\n    </div>\n  </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n  standalone: true,\n  selector: 'adk-password-input',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    @if (field) {\n    <div [ngClass]=\"class\">\n      <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n      <div class=\"mt-2 relative\">\n        <input\n          [type]=\"showPassword ? 'text' : 'password'\"\n          [formControl]=\"formControl[field.key]\"\n          [pattern]=\"pattern\"\n          [placeholder]=\"placeholder\"\n          [name]=\"field.key\"\n          [id]=\"field.key\"\n          [autocomplete]=\"autocomplete\"\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n          [required]=\"required\"\n        />\n        <button\n          type=\"button\"\n          (click)=\"togglePasswordVisibility()\"\n          class=\"absolute inset-y-0 right-0 flex items-center px-2 focus:outline-none\"\n        >\n          {{ showPassword ? 'Hide' : 'Show' }}\n        </button>\n      </div>\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n      </p>\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n          Must be at least\n          {{ formControl[field.key].errors['minlength'].requiredLength }}\n          characters\n        </div>\n        <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n          Must not exceed\n          {{ formControl[field.key].errors['maxlength'].requiredLength }}\n          characters\n        </div>\n      </div>\n    </div>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class PasswordComponent implements OnChanges {\n  @Input() field!: Field;\n  formControl: { [key: string]: AbstractControl | any } = {};\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field.description;\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'sm:col-span-3';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get pattern() {\n    return this.props?.pattern ?? '';\n  }\n\n  get required() {\n    return this.props?.required ?? true;\n  }\n\n  get inputClass() {\n    if (this.props && this.props.inputClass) {\n      return this.props.inputClass;\n    }\n    return 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6';\n  }\n\n  showPassword = false;\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.initFormControl();\n    }\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n\n  togglePasswordVisibility(): void {\n    this.showPassword = !this.showPassword;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 83
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 103
                    }
                }
            }
        },
        {
            "name": "PillComponent",
            "id": "component-PillComponent-7ac74f6b3122e5fbc75b2ef700bf6b8bdb7da036f85f6f55c33b6e46a5c5076fc557aa30afcab3b44d33a0eabbee460a3874f81b638b4521a04645ece84a8c78",
            "file": "projects/ng-lib/src/lib/tw-ui/components/pill.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-pill",
            "styleUrls": [],
            "styles": [],
            "template": "<span class=\"badge badge-pill mr-0.5 text-white\" [ngClass]=\"getRandomColor()\">\n  <ng-content></ng-content>\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-amber-500', 'bg-indigo-500', 'bg-purple-500', 'bg-pink-500']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CommonModule, NgClass } from '@angular/common';\n\n@Component({\n  selector: 'adk-pill',\n  standalone: true,\n  imports: [CommonModule, NgClass],\n  template: `\n    <span class=\"badge badge-pill mr-0.5 text-white\" [ngClass]=\"getRandomColor()\">\n      <ng-content></ng-content>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PillComponent {\n  colors = ['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-amber-500', 'bg-indigo-500', 'bg-purple-500', 'bg-pink-500'];\n\n  getRandomColor() {\n    return this.colors[Math.floor(Math.random() * this.colors.length)];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PillWrapperComponent",
            "id": "component-PillWrapperComponent-33560d008a1a86bc3b69b9d1f234433877119fd13f64f280cdab3b9de0e82e7fdadb8b1e639fa296dac5b067af145003f2810a4834b2a12ac32c683db6087414",
            "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<adk-pill> This is a pill </adk-pill>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PillComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { type Meta, type StoryObj } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\nimport { PillComponent } from '../pill.component';\n\n@Component({\n    selector: 'storybook-button-wrapper',\n    standalone: true,\n    imports: [CommonModule, PillComponent],\n    template: ` <adk-pill> This is a pill </adk-pill> `,\n})\nclass PillWrapperComponent {}\nconst meta: Meta<PillWrapperComponent> = {\n    component: PillWrapperComponent,\n    title: '(TW) Angular UI / Components / Pill',\n    tags: ['autodocs'],\n};\n\nexport default meta;\ntype Story = StoryObj<PillWrapperComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-07f3bf652c0e0d542f87c8b6939641dc3318e6a63c1487f59f168a827c39bdaf1e9bb572c697454e9697989278262a27066052232c947d0f11985077e4a63be1",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-radio",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  @for (option of options; track option; let i = $index) {\n  <div class=\"relative flex gap-x-3 mt-2\">\n    <div class=\"flex items-center gap-x-3\">\n      <input type=\"radio\" [id]=\"option.id\" [value]=\"option.value\" [formControl]=\"formControl[field.key]\" [ngClass]=\"inputClass\" />\n    </div>\n    <div class=\"text-sm leading-6\">\n      <label [for]=\"option.id\" [ngClass]=\"labelClass\">{{ option.label }}</label>\n      <p *ngIf=\"option.description\" class=\"text-gray-500\">{{ option.description }}</p>\n    </div>\n  </div>\n  }\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n  standalone: true,\n  selector: 'adk-radio',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    @if (field) {\n    <div [ngClass]=\"class\">\n      @for (option of options; track option; let i = $index) {\n      <div class=\"relative flex gap-x-3 mt-2\">\n        <div class=\"flex items-center gap-x-3\">\n          <input type=\"radio\" [id]=\"option.id\" [value]=\"option.value\" [formControl]=\"formControl[field.key]\" [ngClass]=\"inputClass\" />\n        </div>\n        <div class=\"text-sm leading-6\">\n          <label [for]=\"option.id\" [ngClass]=\"labelClass\">{{ option.label }}</label>\n          <p *ngIf=\"option.description\" class=\"text-gray-500\">{{ option.description }}</p>\n        </div>\n      </div>\n      }\n    </div>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class RadioComponent implements OnChanges {\n  @Input() field!: Field;\n  formControl: { [key: string]: AbstractControl | any } = {};\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get options() {\n    return this.props?.options ?? [];\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field?.description;\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'sm:col-span-3';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get inputClass() {\n    return this.props?.inputClass ?? 'h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600';\n  }\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.initFormControl();\n    }\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                }
            }
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-4c0732973d302ede7b9ffbd7a21f48b8cedf4a9c7025c14d22c46b6e2254a29dce68ce265ea90704b3c8d3fe2a50742542926ddd8176ad217a755487f44e2ef5",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-select",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if (field) {\n<div [ngClass]=\"class\">\n  <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  <div class=\"mt-2\">\n    <select\n      [id]=\"field.key\"\n      [formControl]=\"formControl[field.key]\"\n      [value]=\"field.value\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    >\n      <option>United States</option>\n      <option>Canada</option>\n      <option>Mexico</option>\n    </select>\n  </div>\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n  </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n  standalone: true,\n  selector: 'adk-select',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    @if (field) {\n    <div [ngClass]=\"class\">\n      <label *ngIf=\"label\" [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n      <div class=\"mt-2\">\n        <select\n          [id]=\"field.key\"\n          [formControl]=\"formControl[field.key]\"\n          [value]=\"field.value\"\n          [autocomplete]=\"autocomplete\"\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n          [required]=\"required\"\n        >\n          <option>United States</option>\n          <option>Canada</option>\n          <option>Mexico</option>\n        </select>\n      </div>\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n      </p>\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n      </div>\n    </div>\n    }\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class SelectComponent implements OnChanges {\n  @Input() field!: Field;\n  formControl: { [key: string]: AbstractControl | any } = {};\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field.description;\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'sm:col-span-3';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get pattern() {\n    return this.props?.pattern ?? '';\n  }\n\n  get required() {\n    return this.props?.required ?? true;\n  }\n\n  get inputClass() {\n    if (this.props && this.props.inputClass) {\n      return this.props.inputClass;\n    }\n    return 'block w-full bg-white rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6';\n  }\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.initFormControl();\n    }\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 71
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 75
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 83
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                }
            }
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-769cd2bd6c6c541572b44440e6712ba4e1a9f656a34180a8e4ef95fe2add2a987ad709adf7be558365ea5f35e5477298250b259fd9deeb38cf7f329389efaa8e",
            "file": "projects/ng-lib/src/lib/tw-ui/components/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-sidebar",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"relative flex h-[calc(100vh-3rem)] w-screen flex-row\">\n  @if (isExpanded) {\n  <div\n    class=\"relative flex h-full w-full max-w-[20rem] flex-col rounded-xl bg-white bg-clip-border p-4 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n  >\n    <div class=\"p-4 mb-2\">\n      <div class=\"flex flex-row\">\n        <h5 class=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n          {{ title }}\n        </h5>\n        <span class=\"flex-auto\"></span>\n        <button\n          type=\"button\"\n          class=\"flex items-center w-[60px] p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n          (click)=\"toggleSidebar()\"\n        >\n          <span class=\"material-symbols-outlined\"> menu </span>\n        </button>\n      </div>\n    </div>\n    <nav class=\"flex min-w-[240px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n      @for (nav of navigation; track nav.link) {\n      <div\n        role=\"button\"\n        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n        [routerLink]=\"[nav.link]\"\n        [routerLinkActive]=\"'active'\"\n      >\n        <div class=\"grid mr-4 place-items-center\">\n          <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n        </div>\n        {{ nav.text | titlecase }}\n      </div>\n      }\n    </nav>\n  </div>\n  } @else {\n  <div\n    class=\"relative flex h-full w-full max-w-[5rem] flex-col rounded-xl bg-white bg-clip-border p-2 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n  >\n    <div class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-center font-normal text-blue-gray-700\">\n      <button\n        type=\"button\"\n        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n        (click)=\"toggleSidebar()\"\n      >\n        <span class=\"material-symbols-outlined\"> arrow_forward_ios </span>\n      </button>\n    </div>\n    <nav class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n      @for (nav of navigation; track nav.link) {\n      <div\n        role=\"button\"\n        class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n        [routerLink]=\"[nav.link]\"\n        [routerLinkActive]=\"'active'\"\n      >\n        <div class=\"grid mr-4 place-items-center\">\n          <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n        </div>\n      </div>\n      }\n    </nav>\n  </div>\n  }\n  <div class=\"relative h-full w-full\">\n    <ng-content [select]=\"'.sidebar-content'\"></ng-content>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "navigation",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Sidebar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "toggleSidebar",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'adk-sidebar',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  template: `\n    <div class=\"relative flex h-[calc(100vh-3rem)] w-screen flex-row\">\n      @if (isExpanded) {\n      <div\n        class=\"relative flex h-full w-full max-w-[20rem] flex-col rounded-xl bg-white bg-clip-border p-4 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n      >\n        <div class=\"p-4 mb-2\">\n          <div class=\"flex flex-row\">\n            <h5 class=\"block font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n              {{ title }}\n            </h5>\n            <span class=\"flex-auto\"></span>\n            <button\n              type=\"button\"\n              class=\"flex items-center w-[60px] p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n              (click)=\"toggleSidebar()\"\n            >\n              <span class=\"material-symbols-outlined\"> menu </span>\n            </button>\n          </div>\n        </div>\n        <nav class=\"flex min-w-[240px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n          @for (nav of navigation; track nav.link) {\n          <div\n            role=\"button\"\n            class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n            [routerLink]=\"[nav.link]\"\n            [routerLinkActive]=\"'active'\"\n          >\n            <div class=\"grid mr-4 place-items-center\">\n              <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n            </div>\n            {{ nav.text | titlecase }}\n          </div>\n          }\n        </nav>\n      </div>\n      } @else {\n      <div\n        class=\"relative flex h-full w-full max-w-[5rem] flex-col rounded-xl bg-white bg-clip-border p-2 text-gray-700 shadow-xl shadow-blue-gray-900/5\"\n      >\n        <div class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-center font-normal text-blue-gray-700\">\n          <button\n            type=\"button\"\n            class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n            (click)=\"toggleSidebar()\"\n          >\n            <span class=\"material-symbols-outlined\"> arrow_forward_ios </span>\n          </button>\n        </div>\n        <nav class=\"flex min-w-[60px] flex-col gap-1 p-2 font-sans text-base font-normal text-blue-gray-700\">\n          @for (nav of navigation; track nav.link) {\n          <div\n            role=\"button\"\n            class=\"flex items-center w-full p-3 leading-tight transition-all rounded-lg outline-none text-start hover:bg-blue-gray-50 hover:bg-opacity-80 hover:text-blue-gray-900 focus:bg-blue-gray-50 focus:bg-opacity-80 focus:text-blue-gray-900 active:bg-blue-gray-50 active:bg-opacity-80 active:text-blue-gray-900\"\n            [routerLink]=\"[nav.link]\"\n            [routerLinkActive]=\"'active'\"\n          >\n            <div class=\"grid mr-4 place-items-center\">\n              <span class=\"material-symbols-outlined\"> {{ nav.icon }} </span>\n            </div>\n          </div>\n          }\n        </nav>\n      </div>\n      }\n      <div class=\"relative h-full w-full\">\n        <ng-content [select]=\"'.sidebar-content'\"></ng-content>\n      </div>\n    </div>\n  `,\n})\nexport class SidebarComponent implements OnChanges {\n  @Input() title = 'Sidebar';\n  @Input() navigation: { link: string; icon: string; text: string }[] = [];\n\n  isExpanded = true;\n  toggleSidebar = () => {\n    console.log('SidebarComponent: toggleSidebar');\n    this.isExpanded = !this.isExpanded;\n  };\n\n  ngOnChanges({ title, navigation }: SimpleChanges) {\n    console.log('SidebarComponent: ngOnChanges');\n    if (title) this.title = title.currentValue;\n    if (navigation) this.navigation = navigation.currentValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "SortableIconComponent",
            "id": "component-SortableIconComponent-142e654b18d14a74113357c3ee39c4f935a18f04ca4c928c4d30b00a81b38cf9a43a472c44eca517cfc1c990f96e9c6c7bb8ed8ce2f7bcecda48fb14fb2c476b",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sortable-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-sortable-icon",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: inline-block;\n            }\n        "
            ],
            "template": "<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke-width=\"2\"\n    stroke=\"currentColor\"\n    aria-hidden=\"true\"\n    class=\"w-4 h-4\"\n>\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9\"></path>\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'tw-sortable-icon',\n    standalone: true,\n    template: `\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"2\"\n            stroke=\"currentColor\"\n            aria-hidden=\"true\"\n            class=\"w-4 h-4\"\n        >\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9\"></path>\n        </svg>\n    `,\n    styles: [\n        `\n            :host {\n                display: inline-block;\n            }\n        `,\n    ],\n})\nexport class SortableIconComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: inline-block;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "SortableTableExampleComponent",
            "id": "component-SortableTableExampleComponent-8913ec05226a02bfa27ea59c7944e6cee7f50d4f1c1788fe3097560f7a488e04f156a290a703fd2a23ce563998878b7196c1cba0165bd6eaf55925ed25cf4b82",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sortable-table-example",
            "styleUrls": [],
            "styles": [],
            "template": "<table>\n    <thead>\n        <tr>\n            <th (click)=\"sort('name')\">Name</th>\n            <th (click)=\"sort('age')\">Age</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let item of sortedItems\">\n            <td>{{ item.name }}</td>\n            <td>{{ item.age }}</td>\n        </tr>\n    </tbody>\n</table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentSortDirection",
                    "defaultValue": "'asc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"asc\" | \"desc\"",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "currentSortKey",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "items",
                    "defaultValue": "[\n        { name: 'John Doe', age: 28 },\n        { name: 'Jane Smith', age: 34 },\n        { name: 'Sam Green', age: 22 },\n        { name: 'Emily Brown', age: 42 },\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sortedItems",
                    "defaultValue": "[...this.items]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\n\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\ninterface Item {\n    name: string;\n    age: number;\n}\n\n@Component({\n    selector: 'app-sortable-table-example',\n    template: `\n        <table>\n            <thead>\n                <tr>\n                    <th (click)=\"sort('name')\">Name</th>\n                    <th (click)=\"sort('age')\">Age</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let item of sortedItems\">\n                    <td>{{ item.name }}</td>\n                    <td>{{ item.age }}</td>\n                </tr>\n            </tbody>\n        </table>\n    `,\n    standalone: true,\n    imports: [CommonModule],\n})\nexport class SortableTableExampleComponent {\n    items: Item[] = [\n        { name: 'John Doe', age: 28 },\n        { name: 'Jane Smith', age: 34 },\n        { name: 'Sam Green', age: 22 },\n        { name: 'Emily Brown', age: 42 },\n    ];\n\n    sortedItems: Item[] = [...this.items];\n    currentSortKey: keyof Item = 'name';\n    currentSortDirection: 'asc' | 'desc' = 'asc';\n\n    sort(key: keyof Item): void {\n        if (this.currentSortKey === key) {\n            this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.currentSortDirection = 'asc';\n        }\n        this.currentSortKey = key;\n        this.sortedItems.sort((a, b) => {\n            if (a[key] < b[key]) return this.currentSortDirection === 'asc' ? -1 : 1;\n            if (a[key] > b[key]) return this.currentSortDirection === 'asc' ? 1 : -1;\n            return 0;\n        });\n    }\n}\n\nconst meta: Meta<SortableTableExampleComponent> = {\n    component: SortableTableExampleComponent,\n    title: '(TW) Angular UI / Directives / Sortable Table',\n};\nexport default meta;\ntype Story = StoryObj<SortableTableExampleComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-a9a407b66cdfebd59affd3aa17f2d7bb05f729f9bcf73be939a554e3cdc1bc1bbb303e91c2058b270ebce6ad6d91b8d44c7c8dfe9ff97a780123f67063e426f0",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-table",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "@if(table) { @switch (type) { @default {\n<adk-default-table\n  [table]=\"table\"\n  [showClear]=\"showClear\"\n  (buttonClick)=\"buttonClick.emit($event)\"\n  (selectedRowsEmitValue)=\"selectedRowsEmitValue.emit($event)\"\n  (actionButtonSelection)=\"actionButtonSelection.emit($event)\"\n></adk-default-table>\n} } }\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Table",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionButtonSelection",
                    "defaultValue": "new EventEmitter<any | any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                },
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedRowsEmitValue",
                    "defaultValue": "new EventEmitter<any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "defaultTableComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DefaultTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DefaultTableComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "components",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { DefaultTableComponent } from './types/default-table.component';\nimport { Table } from '../models';\n\nconst components = [DefaultTableComponent];\n\n@Component({\n  standalone: true,\n  selector: 'adk-table',\n  imports: [CommonModule, ...components],\n  template: `\n    @if(table) { @switch (type) { @default {\n    <adk-default-table\n      [table]=\"table\"\n      [showClear]=\"showClear\"\n      (buttonClick)=\"buttonClick.emit($event)\"\n      (selectedRowsEmitValue)=\"selectedRowsEmitValue.emit($event)\"\n      (actionButtonSelection)=\"actionButtonSelection.emit($event)\"\n    ></adk-default-table>\n    } } }\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class TableComponent implements OnChanges {\n  @ViewChild(DefaultTableComponent) defaultTableComponent!: DefaultTableComponent;\n\n  @Input() table!: Table;\n  @Input() showClear = false;\n\n  @Output() selectedRowsEmitValue = new EventEmitter<any[]>();\n  @Output() actionButtonSelection = new EventEmitter<any | any[]>();\n  @Output() buttonClick = new EventEmitter();\n\n  get type() {\n    return this.table['type'];\n  }\n\n  get props() {\n    return this.table?.props;\n  }\n\n  ngOnChanges({ table }: SimpleChanges): void {\n    if (table) this.table = table.currentValue;\n  }\n\n  clear() {\n    this.defaultTableComponent.clear();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            }
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-32501d53bea7f30aea4b9e94925231873845fc916adfe94798d49b39b313dacbe14de724603d814f572006ddb4993d0f6e0e0efb5c1de01224396757703c8a6c-1",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-table",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n            .table {\n                thead {\n                    height: 45px;\n                }\n\n                tbody {\n                    tr {\n                        height: 45px;\n                    }\n                }\n\n                td {\n                    text-align: center;\n                }\n            }\n        "
            ],
            "template": "<div class=\"w-full px-4\">\n    <div class=\"flex flex-row items-center w-full\">\n        <div class=\"items-center w-fit\">\n            <h3 class=\"text-base font-semibold text-gray-900\">{{ title }}</h3>\n            @if(caption) {\n            <p class=\"mt-1 max-w-2xl text-sm text-gray-500\">{{ caption }}</p>\n            }\n        </div>\n        @if(buttonText) {\n        <span class=\"grow\"></span>\n        <button\n            type=\"button\"\n            class=\"-m-2.5 flex items-center justify-center rounded-md p-1.5 atom-btn-primary\"\n            [routerLink]=\"buttonLink\"\n            (click)=\"selectedRowsEmit()\"\n        >\n            <span class=\"text-xs\">{{ buttonText }}</span>\n        </button>\n        }\n    </div>\n</div>\n<div class=\"flex flex-row mt-4\" [ngClass]=\"height\">\n    <table class=\"table w-[100%]\" *ngIf=\"headers.length && data && data.length\">\n        @if(headers) {\n        <thead class=\"bg-gray-200\">\n            <tr>\n                @if(selectable) {\n                <th scope=\"col\" class=\"text-sm font-medium\">Select</th>\n                <!-- Show the select column only if selectable is true -->\n                } @for (key of keys; track key) {\n                <th scope=\"col\" class=\"text-sm font-medium\">{{ key | uppercase }}</th>\n                }\n            </tr>\n        </thead>\n        } @if (data.length) {\n        <tbody class=\"h-100%\">\n            @for (item of data; track item.id) {\n            <tr [class.selected]=\"item.selected\" (click)=\"toggleRowSelection(item)\">\n                @if(selectable) {\n                <td>\n                    <!-- Show the select cell only if selectable is true -->\n                    <input\n                        [(ngModel)]=\"item.selected\"\n                        type=\"checkbox\"\n                        class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                    />\n                </td>\n                } @for (key of keys; track key) {\n                <td>\n                    @if (isValueArray(item[key])) { @for (val of item[key]; track val) {\n                    <span class=\"badge badge-pill mr-0.5\" [ngClass]=\"getRandomColor()\">{{ val }}</span>\n                    } } @else { {{ item[key] }} }\n                </td>\n                }\n            </tr>\n            }\n        </tbody>\n        }\n    </table>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonLink",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'h-auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Default Title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedRowsEmitValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-yellow-500', 'bg-indigo-500', 'bg-purple-500', 'bg-pink-500']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "keys",
                    "defaultValue": "Array.isArray(this.data) && this.data.length ? Object.keys(this.data[0]) : Object.keys(this.data)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 111
                }
            ],
            "methodsClass": [
                {
                    "name": "getRandomColor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValueArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedRowsEmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleRowSelection",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n    selector: 'adk-table',\n    standalone: true,\n    imports: [CommonModule, ReactiveFormsModule, FormsModule, RouterModule],\n    template: `\n        <div class=\"w-full px-4\">\n            <div class=\"flex flex-row items-center w-full\">\n                <div class=\"items-center w-fit\">\n                    <h3 class=\"text-base font-semibold text-gray-900\">{{ title }}</h3>\n                    @if(caption) {\n                    <p class=\"mt-1 max-w-2xl text-sm text-gray-500\">{{ caption }}</p>\n                    }\n                </div>\n                @if(buttonText) {\n                <span class=\"grow\"></span>\n                <button\n                    type=\"button\"\n                    class=\"-m-2.5 flex items-center justify-center rounded-md p-1.5 atom-btn-primary\"\n                    [routerLink]=\"buttonLink\"\n                    (click)=\"selectedRowsEmit()\"\n                >\n                    <span class=\"text-xs\">{{ buttonText }}</span>\n                </button>\n                }\n            </div>\n        </div>\n        <div class=\"flex flex-row mt-4\" [ngClass]=\"height\">\n            <table class=\"table w-[100%]\" *ngIf=\"headers.length && data && data.length\">\n                @if(headers) {\n                <thead class=\"bg-gray-200\">\n                    <tr>\n                        @if(selectable) {\n                        <th scope=\"col\" class=\"text-sm font-medium\">Select</th>\n                        <!-- Show the select column only if selectable is true -->\n                        } @for (key of keys; track key) {\n                        <th scope=\"col\" class=\"text-sm font-medium\">{{ key | uppercase }}</th>\n                        }\n                    </tr>\n                </thead>\n                } @if (data.length) {\n                <tbody class=\"h-100%\">\n                    @for (item of data; track item.id) {\n                    <tr [class.selected]=\"item.selected\" (click)=\"toggleRowSelection(item)\">\n                        @if(selectable) {\n                        <td>\n                            <!-- Show the select cell only if selectable is true -->\n                            <input\n                                [(ngModel)]=\"item.selected\"\n                                type=\"checkbox\"\n                                class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                            />\n                        </td>\n                        } @for (key of keys; track key) {\n                        <td>\n                            @if (isValueArray(item[key])) { @for (val of item[key]; track val) {\n                            <span class=\"badge badge-pill mr-0.5\" [ngClass]=\"getRandomColor()\">{{ val }}</span>\n                            } } @else { {{ item[key] }} }\n                        </td>\n                        }\n                    </tr>\n                    }\n                </tbody>\n                }\n            </table>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n            .table {\n                thead {\n                    height: 45px;\n                }\n\n                tbody {\n                    tr {\n                        height: 45px;\n                    }\n                }\n\n                td {\n                    text-align: center;\n                }\n            }\n        `,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent implements OnChanges {\n    @Input() height = 'h-auto';\n    @Input() title = 'Default Title';\n    @Input() caption?: string;\n    @Input() buttonText!: string;\n    @Input() buttonLink: any[] = [];\n    @Input() headers: string[] = [];\n    @Input() selectable = false;\n    @Input() data: any = [];\n\n    @Output() selectedRowsEmitValue = new EventEmitter<any>();\n\n    keys = Array.isArray(this.data) && this.data.length ? Object.keys(this.data[0]) : Object.keys(this.data);\n    colors = ['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-yellow-500', 'bg-indigo-500', 'bg-purple-500', 'bg-pink-500'];\n    selectedRows: any[] = [];\n\n    ngOnChanges({ headers, data, buttonLink }: SimpleChanges): void {\n        if (buttonLink) this.buttonLink = buttonLink.currentValue;\n        if (headers) this.keys = headers.currentValue;\n        if (data) {\n            if (Array.isArray(data.currentValue)) {\n                this.data = data.currentValue;\n            } else {\n                this.data = [data.currentValue];\n            }\n        }\n    }\n\n    getRandomColor() {\n        return this.colors[Math.floor(Math.random() * this.colors.length)];\n    }\n\n    isValueArray(value: any): boolean {\n        return Array.isArray(value);\n    }\n\n    toggleRowSelection(row: any): void {\n        row.selected = !row.selected;\n        const index = this.selectedRows.findIndex((item) => item === row);\n        if (index > -1) {\n            this.selectedRows.splice(index, 1);\n        } else {\n            this.selectedRows.push(row);\n        }\n    }\n\n    selectedRowsEmit() {\n        this.selectedRowsEmitValue.emit(this.selectedRows);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n            .table {\n                thead {\n                    height: 45px;\n                }\n\n                tbody {\n                    tr {\n                        height: 45px;\n                    }\n                }\n\n                td {\n                    text-align: center;\n                }\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TableComponent-1"
        },
        {
            "name": "TableExampleComponent",
            "id": "component-TableExampleComponent-0ca1ef03e795b6cf06947eed6c061c32a8852c1c7af72cfcc962c0fc8e2620894262e298f24d9090ca697fd8133a1a59be60e56cf5ba26d5d7b948d03404e500",
            "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-example",
            "styleUrls": [],
            "styles": [],
            "template": "<div adk-selection #selection=\"adkSelection\">\n    <table>\n        <thead>\n            <tr>\n                <th>\n                    <input type=\"checkbox\" (change)=\"toggleSelectAll($event)\" />\n                </th>\n                <th>Item</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let item of items\">\n                <td>\n                    <input type=\"checkbox\" [checked]=\"selection.selected(item)\" (change)=\"toggleSelectItem(item)\" />\n                </td>\n                <td>{{ item }}</td>\n            </tr>\n        </tbody>\n    </table>\n    <p>Selected items: {{ selection.count() }}</p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "['item1', 'item2', 'item3', 'item4']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selection', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkSelection"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\nimport type { Meta, StoryObj } from '@storybook/angular';\n\nimport { AdkSelection } from '../selection';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'app-table-example',\n    template: `\n        <div adk-selection #selection=\"adkSelection\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>\n                            <input type=\"checkbox\" (change)=\"toggleSelectAll($event)\" />\n                        </th>\n                        <th>Item</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let item of items\">\n                        <td>\n                            <input type=\"checkbox\" [checked]=\"selection.selected(item)\" (change)=\"toggleSelectItem(item)\" />\n                        </td>\n                        <td>{{ item }}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <p>Selected items: {{ selection.count() }}</p>\n        </div>\n    `,\n    standalone: true,\n    imports: [CommonModule, AdkSelection],\n})\nexport class TableExampleComponent {\n    @ViewChild('selection', { static: true }) selection: any;\n    items = ['item1', 'item2', 'item3', 'item4'];\n\n    toggleSelectAll(event: Event): void {\n        const isChecked = (event.target as HTMLInputElement).checked;\n        if (isChecked) {\n            this.items.forEach((item) => this.selection.select(item));\n        } else {\n            this.selection.clear();\n        }\n    }\n\n    toggleSelectItem(item: string): void {\n        if (this.selection.selected(item)) {\n            this.selection.deselect(item);\n        } else {\n            this.selection.select(item);\n        }\n    }\n}\n\nconst meta: Meta<TableExampleComponent> = {\n    component: TableExampleComponent,\n    title: '(TW) Angular UI / Directives / Selection',\n};\nexport default meta;\ntype Story = StoryObj<TableExampleComponent>;\n\nexport const Primary: Story = {\n    args: {},\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TablesComponent",
            "id": "component-TablesComponent-189728e0f3747f45ec2e68fade8e2cf6d924e96a47ad9f948261956cc5007f0362a1a8c5bbf91102011b26564373dbe63de8498d594c785b99f42dbae26763c7",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/tables.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-tables",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "<div [class]=\"wrapperClass\">\n  <adk-table\n    [table]=\"tableConfig\"\n    [showClear]=\"showClear\"\n    (buttonClick)=\"buttonClick.emit($event)\"\n    (selectedRowsEmitValue)=\"selectedRowsEmitValue.emit($event)\"\n    (actionButtonSelection)=\"actionButtonSelection.emit($event)\"\n  ></adk-table>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tableConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Table",
                    "decorators": []
                },
                {
                    "name": "wrapperClass",
                    "defaultValue": "'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4 h-[calc(100vh-210px)] overflow-y-auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionButtonSelection",
                    "defaultValue": "new EventEmitter<any | any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                },
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectedRowsEmitValue",
                    "defaultValue": "new EventEmitter<any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tableComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableComponent",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TableComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TableComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Table } from '../models';\nimport { TableComponent } from './table.component';\n\n@Component({\n  standalone: true,\n  selector: 'adk-tables',\n  imports: [CommonModule, TableComponent],\n  template: `\n    <div [class]=\"wrapperClass\">\n      <adk-table\n        [table]=\"tableConfig\"\n        [showClear]=\"showClear\"\n        (buttonClick)=\"buttonClick.emit($event)\"\n        (selectedRowsEmitValue)=\"selectedRowsEmitValue.emit($event)\"\n        (actionButtonSelection)=\"actionButtonSelection.emit($event)\"\n      ></adk-table>\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class TablesComponent implements OnChanges {\n  @ViewChild(TableComponent) tableComponent!: TableComponent;\n\n  @Input() tableConfig!: Table;\n  @Input() wrapperClass = 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4 h-[calc(100vh-210px)] overflow-y-auto';\n  @Input() showClear = false;\n\n  @Output() selectedRowsEmitValue = new EventEmitter<any[]>();\n  @Output() actionButtonSelection = new EventEmitter<any | any[]>();\n  @Output() buttonClick = new EventEmitter();\n\n  ngOnChanges({ tableConfig, wrapperClass, showClear }: SimpleChanges): void {\n    if (tableConfig) this.tableConfig = tableConfig.currentValue;\n    if (wrapperClass) this.wrapperClass = wrapperClass.currentValue;\n    if (showClear) this.showClear = showClear.currentValue;\n  }\n\n  clear() {\n    this.tableComponent.clear();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-04e2068452131f6bb865ba0d8f6e13cf7dd97ee5a1bddf87eeca84e066da0af36fa7a2bb5fcd39a8d1645bf1d2c5962c973086f64f7e1423603f08662fb27088",
            "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "adk-textarea",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: block;\n      }\n    "
            ],
            "template": "<div [ngClass]=\"class\">\n  <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n  <div class=\"mt-2\">\n    <textarea\n      [formControl]=\"formControl[field.key]\"\n      [pattern]=\"pattern\"\n      [placeholder]=\"placeholder\"\n      [name]=\"field.key\"\n      [id]=\"field.key\"\n      [autocomplete]=\"autocomplete\"\n      [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n      [required]=\"required\"\n    ></textarea>\n  </div>\n  <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n    {{ description }}\n  </p>\n  <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n    <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n    <div *ngIf=\"formControl[field.key].errors['minlength']\">\n      Must be at least\n      {{ formControl[field.key].errors['minlength'].requiredLength }}\n      characters\n    </div>\n    <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n      Must not exceed\n      {{ formControl[field.key].errors['maxlength'].requiredLength }}\n      characters\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "Field",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorClass",
                    "defaultValue": "`${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "formControl",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "initFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { Field } from '../../models';\n\n@Component({\n  standalone: true,\n  selector: 'adk-textarea',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: `\n    <div [ngClass]=\"class\">\n      <label [for]=\"field.key\" [ngClass]=\"labelClass\">{{ label }}</label>\n      <div class=\"mt-2\">\n        <textarea\n          [formControl]=\"formControl[field.key]\"\n          [pattern]=\"pattern\"\n          [placeholder]=\"placeholder\"\n          [name]=\"field.key\"\n          [id]=\"field.key\"\n          [autocomplete]=\"autocomplete\"\n          [ngClass]=\"formControl[field.key].invalid && formControl[field.key].touched ? errorClass : inputClass\"\n          [required]=\"required\"\n        ></textarea>\n      </div>\n      <p *ngIf=\"description\" class=\"mt-3 text-sm leading-6 text-gray-600\">\n        {{ description }}\n      </p>\n      <div *ngIf=\"formControl[field.key].invalid && formControl[field.key].touched\" class=\"text-red-500 text-xs mt-1\">\n        <div *ngIf=\"formControl[field.key].errors['required']\">{{ label ?? 'field' }} is required</div>\n        <div *ngIf=\"formControl[field.key].errors['minlength']\">\n          Must be at least\n          {{ formControl[field.key].errors['minlength'].requiredLength }}\n          characters\n        </div>\n        <div *ngIf=\"formControl[field.key].errors['maxlength']\">\n          Must not exceed\n          {{ formControl[field.key].errors['maxlength'].requiredLength }}\n          characters\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n})\nexport class TextareaComponent implements OnChanges {\n  @Input() field!: Field;\n  formControl: { [key: string]: AbstractControl | any } = {};\n  errorClass = `${this.inputClass} mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500 disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none invalid:border-pink-500 invalid:text-pink-600 focus:invalid:border-pink-500 focus:invalid:ring-pink-500`;\n\n  get props() {\n    return this.field?.props;\n  }\n\n  get autocomplete() {\n    return this.props?.autocomplete ?? 'off';\n  }\n\n  get label() {\n    return this.field.label;\n  }\n\n  get description() {\n    return this.field.description;\n  }\n\n  get placeholder() {\n    return this.field.placeholder ?? '';\n  }\n\n  get class() {\n    return this.props?.class ?? 'col-span-full';\n  }\n\n  get labelClass() {\n    return this.props?.labelClass ?? 'block text-sm font-medium leading-6 text-gray-900';\n  }\n\n  get required() {\n    return this.props?.required ?? true;\n  }\n\n  get pattern() {\n    return this.props?.pattern ?? '';\n  }\n\n  get inputClass() {\n    return (\n      this.props?.inputClass ??\n      'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6'\n    );\n  }\n\n  ngOnChanges({ field }: SimpleChanges): void {\n    if (field) {\n      this.field = field.currentValue;\n      this.initFormControl();\n    }\n  }\n\n  private initFormControl(): void {\n    this.formControl[this.field.key] = this.field.formControl;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "props": {
                    "name": "props",
                    "getSignature": {
                        "name": "props",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                },
                "autocomplete": {
                    "name": "autocomplete",
                    "getSignature": {
                        "name": "autocomplete",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "",
                        "line": 69
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "getSignature": {
                        "name": "placeholder",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                },
                "class": {
                    "name": "class",
                    "getSignature": {
                        "name": "class",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                },
                "labelClass": {
                    "name": "labelClass",
                    "getSignature": {
                        "name": "labelClass",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                },
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 85
                    }
                },
                "pattern": {
                    "name": "pattern",
                    "getSignature": {
                        "name": "pattern",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                },
                "inputClass": {
                    "name": "inputClass",
                    "getSignature": {
                        "name": "inputClass",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                }
            }
        },
        {
            "name": "TwCardComponent",
            "id": "component-TwCardComponent-d8425a24690659d7c5e31ff83dadfe42a8cb31733892f61d10e4f8b374543897a5a8776b0b58ad67522be1a8d6473ad8923a41d113a89a42d01204f16ad8087f",
            "file": "projects/ng-lib/src/lib/tw-ui/components/card/tw-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-card",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<div class=\"relative flex flex-col mt-6 text-gray-700 bg-white shadow-md bg-clip-border rounded-xl\">\n    <div class=\"p-6\">\n        <ng-container\n            select=\"[tw-card-header]\"\n            class=\"block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n        ></ng-container>\n        <ng-container\n            select=\"[tw-card-body]\"\n            class=\"block font-sans text-base antialiased font-light leading-relaxed text-inherit\"\n        ></ng-container>\n    </div>\n    <ng-container select=\"[tw-card-footer]\" class=\"p-6 pt-0\"></ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'tw-card',\n    standalone: true,\n    imports: [CommonModule],\n    template: `\n        <div class=\"relative flex flex-col mt-6 text-gray-700 bg-white shadow-md bg-clip-border rounded-xl\">\n            <div class=\"p-6\">\n                <ng-container\n                    select=\"[tw-card-header]\"\n                    class=\"block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\"\n                ></ng-container>\n                <ng-container\n                    select=\"[tw-card-body]\"\n                    class=\"block font-sans text-base antialiased font-light leading-relaxed text-inherit\"\n                ></ng-container>\n            </div>\n            <ng-container select=\"[tw-card-footer]\" class=\"p-6 pt-0\"></ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TwCardComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "TwDefaultTableComponent",
            "id": "component-TwDefaultTableComponent-bc09d8fe4feb314d18ca023560a929e752cddf18f508f0495012c1c889d47327908e94d45c1dbbe6d678444ccd6eb06955174de7f801649436cb5a1148b6a6e8",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-default-table",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "templateUrl": [
                "./tw-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "TemplateRef<any> | string",
                    "decorators": []
                },
                {
                    "name": "actionColName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "groupBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "RowData[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "datasource",
                    "defaultValue": "this.tdss.get('dataSource')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "groupData",
                    "defaultValue": "new ImperativeObservable<{ [key: string]: RowData[] }>({ key: this.tdss.get('dataSource') })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "isAllRowsSelected",
                    "defaultValue": "new ImperativeObservable<boolean>(this.selectedRows.value.length === this.datasource.length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "selectedIndex",
                    "defaultValue": "new ImperativeObservable<number>(this.tdss.get('draggedColIndex') ?? 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "selectedRows",
                    "defaultValue": "new ImperativeObservable<RowData[]>(this.tdss.get('selectedRows'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selection', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tdss",
                    "defaultValue": "inject(TableDataSourceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableDataSourceService",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "groupByData",
                    "args": [
                        {
                            "name": "array",
                            "type": "RowData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "RowData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDragStart",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Drag and Drop Handlers\n",
                    "description": "<p> Drag and Drop Handlers</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5816,
                                "end": 5821,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5810,
                                "end": 5815,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleDrop",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRowSelected",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "objectKeysGroupData",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRowClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRowSelection",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortRows",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "groupKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectItem",
                    "args": [
                        {
                            "name": "row",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGroupData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AdkSelection"
                },
                {
                    "name": "AdkExpansionPanelComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TwTypographyComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "SortableIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges, TemplateRef, ViewChild, inject } from '@angular/core';\nimport { SortableIconComponent, TwTypographyComponent } from './utils';\n\nimport { AdkExpansionPanelComponent } from './utils/expansion-panel.component';\nimport { AdkSelection } from '../../../tw-form-ui/directives';\nimport { CheckboxComponent } from '../../../tw-form-ui/components/types/checkbox.component';\nimport { ImperativeObservable } from '../../../utils';\nimport { RowData } from './models';\nimport { TableDataSourceService } from './table-datasource.service';\n\n@Component({\n    selector: 'tw-default-table',\n    templateUrl: './tw-table.component.html',\n    standalone: true,\n    imports: [\n        CommonModule,\n        AdkSelection,\n        AdkExpansionPanelComponent,\n        AsyncPipe,\n        TwTypographyComponent,\n        CheckboxComponent,\n        SortableIconComponent,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TwDefaultTableComponent implements OnChanges {\n    @ViewChild('selection', { static: true }) selection: any;\n    @Input() isSelectable = false;\n    @Input() isSortable = false;\n    @Input() isDraggable = false;\n    @Input() headers: string[] = [];\n    @Input() actionColName?: string;\n    @Input() actionButton?: TemplateRef<any> | string;\n    @Input() rows: RowData[] = [];\n    @Input() groupBy = '';\n\n    tdss: TableDataSourceService = inject(TableDataSourceService);\n    datasource = this.tdss.get('dataSource');\n    groupData = new ImperativeObservable<{ [key: string]: RowData[] }>({ key: this.tdss.get('dataSource') });\n    selectedRows = new ImperativeObservable<RowData[]>(this.tdss.get('selectedRows'));\n    isAllRowsSelected = new ImperativeObservable<boolean>(this.selectedRows.value.length === this.datasource.length);\n    selectedIndex = new ImperativeObservable<number>(this.tdss.get('draggedColIndex') ?? 0);\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['headers']) this.tdss.setHeaders(changes['headers'].currentValue);\n        if (changes['rows']) this.tdss.setTableDataSource(changes['rows'].currentValue);\n        if (changes['groupBy']) this.tdss.setGroupBy(changes['groupBy'].currentValue);\n        if (changes['isSelectable']) this.isSelectable = changes['isSelectable'].currentValue;\n        if (changes['isSortable']) this.isSortable = changes['isSortable'].currentValue;\n        if (changes['isDraggable']) this.isDraggable = changes['isDraggable'].currentValue;\n\n        this.updateGroupData();\n        this.sortRows('key');\n\n        console.log('tdss', this.tdss.state());\n    }\n\n    private updateGroupData(): void {\n        const groupByVar = this.tdss.get('preferences').groupBy;\n        const groupData =\n            groupByVar && groupByVar !== 'key'\n                ? this.groupByData(this.tdss.get('dataSource'), groupByVar)\n                : ({ key: this.tdss.get('dataSource') } as { [key: string]: RowData[] });\n        this.groupData.value = { ...groupData };\n    }\n\n    objectKeysGroupData(obj: any): string[] {\n        return Object.keys(obj);\n    }\n\n    private groupByData(array: RowData[], key: string): { [key: string]: RowData[] } {\n        const gKey = key.toLowerCase();\n        return array.reduce((result, currentValue) => {\n            const normalizedCurrentValue: RowData = Object.keys(currentValue).reduce((acc, k) => {\n                acc[k.toLowerCase()] = currentValue[k];\n                return acc;\n            }, {} as RowData);\n\n            const groupKey = normalizedCurrentValue[gKey] as string;\n            if (!result[groupKey]) {\n                result[groupKey] = [];\n            }\n            result[groupKey].push(currentValue);\n            return result;\n        }, {} as { [key: string]: RowData[] });\n    }\n\n    onRowClick(event: any): void {\n        // Handle the checkbox change here\n        console.log('Checkbox changed:', event);\n        // Update your data or perform actions based on the checkbox state\n    }\n\n    onRowSelection(rowData: any): void {\n        console.log('Row selected:', rowData);\n    }\n\n    get allRowsSelected(): boolean {\n        const dataSource = this.tdss.get('dataSource');\n        const selectedRows = this.tdss.get('selectedRows');\n        return dataSource.length > 0 && selectedRows.length === dataSource.length;\n    }\n\n    isRowSelected(rowData: any): boolean {\n        return this.selectedRows.value.some((selectedRow: any) => JSON.stringify(selectedRow) === JSON.stringify(rowData));\n    }\n\n    toggleSelectAll(event: Event, groupKey: string): void {\n        const isChecked = (event.target as HTMLInputElement).checked;\n        if (isChecked) {\n            this.tdss.toggleSelectedAllRows();\n            this.groupData.value[groupKey].forEach((item) => this.selection.select(item));\n        } else {\n            this.tdss.toggleSelectedAllRows();\n            this.selection.clear();\n        }\n    }\n\n    toggleSelectItem(row: object): void {\n        const itemStr = JSON.stringify(row);\n        if (this.selection.selected(itemStr)) {\n            this.selection.deselect(itemStr);\n        } else {\n            this.selection.select(itemStr);\n        }\n        this.tdss.setSelectedRows(row);\n    }\n\n    sortRows(key: string): void {\n        const currentDirection = this.tdss.get('sortDataSource').direction;\n        const newDirection: 'ascending' | 'descending' = currentDirection === 'ascending' ? 'descending' : 'ascending';\n\n        this.tdss.sortDataSource({ key, direction: newDirection });\n        this.updateGroupData();\n    }\n    /**\n     *  Drag and Drop Handlers\n     * @param index\n     */\n    handleDragStart(index: number): void {\n        this.tdss.dragStart(index);\n    }\n\n    handleDragOver(event: DragEvent): void {\n        event.preventDefault();\n    }\n\n    handleDrop(index: number, event: DragEvent): void {\n        event.preventDefault();\n        this.tdss.dragDrop(index);\n        this.headers = this.tdss.get('headers');\n        this.groupData.value = this.groupByData(this.tdss.get('dataSource'), this.tdss.get('preferences').groupBy ?? 'key');\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "allRowsSelected": {
                    "name": "allRowsSelected",
                    "getSignature": {
                        "name": "allRowsSelected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 107
                    }
                }
            },
            "templateData": "<div adk-selection #selection=\"adkSelection\">\n  <table *ngIf=\"(groupData.change$ | async) as groupData\" aria-hidden=\"true\"\n    class=\"w-full text-left table-auto min-w-max\">\n    <thead>\n      <ng-container\n        *ngTemplateOutlet=\"renderThead; context: { groupData, headers: tdss.get('headers'), selectedRows: (selectedRows.change$ | async), isSelectable, sortDataSource: tdss.get('sortDataSource')}\"></ng-container>\n    </thead>\n    <tbody>\n      @for(groupKey of objectKeysGroupData(groupData); track $index){\n      @if(groupBy && groupKey !== 'key') {\n      <ng-container\n        *ngTemplateOutlet=\"groupByRender; context: { groupData, headers, isSelectable, groupKey }\"></ng-container>\n      } @else {\n      @for(rowData of groupData[groupKey]; track $index) {\n      <ng-container\n        *ngTemplateOutlet=\"renderRow; context: { headers, rowData, rowIndex: $index, isSelectable }\"></ng-container>\n      }\n      }\n      }\n    </tbody>\n  </table>\n</div>\n\n<ng-template #renderThead let-groupData=\"groupData\" let-header=\"headers\" let-isSelectable=\"isSelectable\"\n  let-sortDataSource=\"sortDataSource\" let-selectedRows=\"selectedRows\">\n  <tr>\n    @if(isSelectable) {\n    <th id=\"checkAll\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-1 min-h-[48.5px] max-w-[20px]\">\n      <label for=\"selectAllCheckbox\" class=\"relative flex items-center p-3 rounded-full cursor-pointer\">\n        <input id=\"selectAllCheckbox\" name=\"selectAllCheckbox\" type=\"checkbox\"\n          (change)=\"toggleSelectAll($event, objectKeysGroupData(groupData))\"\n          class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\" />\n      </label>\n\n    </th>\n    }\n    @for(header of headers; track $index) {\n    <th [id]=\"header\" class=\"border-b border-blue-gray-100 bg-blue-gray-50 p-3 cursor-pointer\" [attr.key]=\"head\"\n      [ngClass]=\"{'border-b border-blue-gray-100 bg-blue-gray-50 p-3 cursor-pointer': true}\"\n      [attr.draggable]=\"isDraggable\" (dragstart)=\"handleDragStart($index)\" (dragover)=\"handleDragOver($event)\"\n      (drop)=\"handleDrop($index, $event)\" (drop)=\"handleDrop($index, $event)\" scope=\"col\">\n      <tw-typography [variant]=\"'small'\" [color]=\"'blue-gray'\"\n        [classStyle]=\"'flex items-center justify-between gap-2 font-normal leading-none opacity-70'\">\n        {{ header ?? ' ' }}\n        <div class=\"flex flex-row gap-2\">\n          @if($index !== headers.length && isSortable) {\n          <tw-sortable-icon (click)=\"sortRows(header, groupData)\"\n            (keydown)=\"sortRows(header, groupData)\"></tw-sortable-icon>\n          } @if(tdss.get('sortDataSource').key === header && isSortable) {\n          <span>{{ sortDataSource.direction === 'ascending' ? '🔼' : '🔽' }}</span>\n          }\n        </div>\n      </tw-typography>\n    </th>\n    }\n  </tr>\n</ng-template>\n\n<!-- Group By Render -->\n<ng-template #groupByRender let-groupData=\"groupData\" let-headers=\"headers\" let-isSelectable=\"isSelectable\"\n  let-groupKey=\"groupKey\">\n  <tr>\n    <td [colSpan]=\"headers.length + (isSelectable ? 1 : 0) + (actionButton ? 1 : 0)\">\n      <adk-expansion-panel>\n        <ng-template #expansionPanelHeader>\n          {{groupKey}}\n        </ng-template>\n        <ng-template #expansionPanelBody>\n          <table aria-hidden=\"true\" class=\"w-full min-w-max table-auto text-left\">\n            <tbody>\n              @for(rowData of groupData[groupKey]; track $index) {\n              <ng-container\n                *ngTemplateOutlet=\"renderRow; context: { headers, rowData, rowIndex: $index, isSelectable }\">\n              </ng-container>\n              }\n            </tbody>\n          </table>\n        </ng-template>\n      </adk-expansion-panel>\n    </td>\n  </tr>\n</ng-template>\n\n<!-- Render Row Table Cells -->\n<ng-template #renderRow let-header=\"headers\" let-rowData=\"rowData\" let-rowIndex=\"rowIndex\"\n  let-isSelectable=\"isSelectable\">\n  <tr>\n    @if(isSelectable) {\n    <td [ngClass]=\"isSelectable ? 'p-1' : 'p-4'\" class=\"border-b border-blue-gray-50 min-h-[48.5px] max-w-[15px]\">\n      <label class=\"relative flex items-center p-3 rounded-full cursor-pointer\" for=\"checkbox\">\n        <input type=\"checkbox\" [checked]=\"selection.selected(rowData)\" (change)=\"toggleSelectItem(rowData)\"\n          class=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-gray-900 checked:bg-gray-900 checked:before:bg-gray-900 hover:before:opacity-10\" />\n      </label>\n    </td>\n    }\n    @for (header of headers; track $index) {\n    <td [ngClass]=\"isSelectable ? 'p-1' : 'p-2'\"\n      class=\"border-b border-blue-gray-50 min-h-[48.5px] min-w-[60px] max-w-[60px]\">\n      <tw-typography [variant]=\"'small'\" [color]=\"'blue-gray'\" class=\"font-normal ml-2\">\n        {{ rowData[header.toLowerCase()] }}\n      </tw-typography>\n    </td>\n    }\n  </tr>\n</ng-template>"
        },
        {
            "name": "TwTableCardComponent",
            "id": "component-TwTableCardComponent-069375aa583a1f1e5bdf2a477094ad36e99697224069614b2a23c2a917d7fe67dcd9bfd0692cfdff95d72f90164f8169002082ebf7fc1c23da565dd71633cc9c",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-card",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        "
            ],
            "template": "<tw-card>\n    <div tw-card-header>\n        <h5 class=\"block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n            UI/UX Review Check\n        </h5>\n    </div>\n    <div tw-card-body>\n        <tw-default-table\n            [headers]=\"headers\"\n            [rows]=\"rows\"\n            [isSelectable]=\"isSelectable\"\n            [isSortable]=\"isSortable\"\n            [isDraggable]=\"isDraggable\"\n            [groupBy]=\"groupBy\"\n            [actionColName]=\"actionColName\"\n            [actionButton]=\"actionButton\"\n        ></tw-default-table>\n    </div>\n</tw-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "TemplateRef<any> | string",
                    "decorators": []
                },
                {
                    "name": "actionColName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "groupBy",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelectable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "RowData[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TwCardComponent",
                    "type": "component"
                },
                {
                    "name": "TwDefaultTableComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { RowData } from './models';\nimport { TwCardComponent } from '../card/tw-card.component';\nimport { TwDefaultTableComponent } from './tw-table.component';\n\n@Component({\n    selector: 'tw-table-card',\n    standalone: true,\n    imports: [CommonModule, TwCardComponent, TwDefaultTableComponent],\n    template: `\n        <tw-card>\n            <div tw-card-header>\n                <h5 class=\"block mb-2 font-sans text-xl antialiased font-semibold leading-snug tracking-normal text-blue-gray-900\">\n                    UI/UX Review Check\n                </h5>\n            </div>\n            <div tw-card-body>\n                <tw-default-table\n                    [headers]=\"headers\"\n                    [rows]=\"rows\"\n                    [isSelectable]=\"isSelectable\"\n                    [isSortable]=\"isSortable\"\n                    [isDraggable]=\"isDraggable\"\n                    [groupBy]=\"groupBy\"\n                    [actionColName]=\"actionColName\"\n                    [actionButton]=\"actionButton\"\n                ></tw-default-table>\n            </div>\n        </tw-card>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class TwTableCardComponent {\n    @Input() isSelectable = false;\n    @Input() isSortable = false;\n    @Input() isDraggable = false;\n    @Input() headers: string[] = [];\n    @Input() actionColName?: string;\n    @Input() actionButton?: TemplateRef<any> | string;\n    @Input() rows: RowData[] = [];\n    @Input() groupBy = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n                width: 100%;\n            }\n        \n",
            "extends": []
        },
        {
            "name": "TwTableHeaderComponent",
            "id": "component-TwTableHeaderComponent-4fc65ab8c13e9f35515e9f62b52b4a14d306fc262f5d1a42d7e4e709d68eee04788b484c9eb4b503884176b8e83833363216e9444c1eb74846de9f642ce5ee54",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-table-header",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"tw-table-card\">\n    <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'tw-table-header',\n    standalone: true,\n    imports: [CommonModule],\n    template: `\n        <div class=\"tw-table-card\">\n            <ng-content></ng-content>\n        </div>\n    `,\n})\nexport class TwTableHeaderComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TwTypographyComponent",
            "id": "component-TwTypographyComponent-e0a869e50896fbbcdaf72aa8849905f01c28b2aab041826ddbe1e36bcbe0c41c8e569ec799c33e110792770bb5624d3f12b62d208f6e64836704b8b1a6346011",
            "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/typography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-typography",
            "styleUrls": [],
            "styles": [
                "\n            :host {\n                display: block;\n            }\n        "
            ],
            "template": "<p [ngClass]=\"[variantClass, colorClass, classStyle, 'block', 'antialiased', 'font-sans', 'ml-2']\">\n    <ng-content></ng-content>\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'blue-gray'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Color",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'paragraph'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Variant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\ntype Variant = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'lead' | 'paragraph' | 'small';\ntype Color =\n    | 'inherit'\n    | 'current'\n    | 'black'\n    | 'white'\n    | 'blue-gray'\n    | 'gray'\n    | 'brown'\n    | 'deep-orange'\n    | 'orange'\n    | 'amber'\n    | 'yellow'\n    | 'lime'\n    | 'light-green'\n    | 'green'\n    | 'teal'\n    | 'cyan'\n    | 'light-blue'\n    | 'blue'\n    | 'indigo'\n    | 'deep-purple'\n    | 'purple'\n    | 'pink'\n    | 'red';\n\n@Component({\n    selector: 'tw-typography',\n    standalone: true,\n    imports: [CommonModule],\n    template: `\n        <p [ngClass]=\"[variantClass, colorClass, classStyle, 'block', 'antialiased', 'font-sans', 'ml-2']\">\n            <ng-content></ng-content>\n        </p>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class TwTypographyComponent {\n    @Input() variant: Variant = 'paragraph';\n    @Input() color: Color = 'blue-gray';\n    @Input() classStyle = '';\n\n    get variantClass(): string {\n        switch (this.variant) {\n            case 'h1':\n                return 'text-4xl';\n            case 'h2':\n                return 'text-3xl';\n            case 'h3':\n                return 'text-2xl';\n            case 'h4':\n                return 'text-xl';\n            case 'h5':\n                return 'text-lg';\n            case 'h6':\n                return 'text-base';\n            case 'lead':\n                return 'text-lg leading-relaxed';\n            case 'paragraph':\n                return 'text-base';\n            case 'small':\n                return 'text-sm';\n            default:\n                return 'text-base';\n        }\n    }\n\n    get colorClass(): string {\n        return `text-${this.color}`;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n            :host {\n                display: block;\n            }\n        \n",
            "extends": [],
            "accessors": {
                "variantClass": {
                    "name": "variantClass",
                    "getSignature": {
                        "name": "variantClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 53
                    }
                },
                "colorClass": {
                    "name": "colorClass",
                    "getSignature": {
                        "name": "colorClass",
                        "type": "string",
                        "returnType": "string",
                        "line": 78
                    }
                }
            }
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "ButtonActionsTesting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const button = canvasElement.querySelector('adk-button');\n        if (button) {\n            await userEvent.click(button);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n}"
            },
            {
                "name": "CardActionsTesting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const card = canvasElement.querySelector('adk-card');\n        if (card) {\n            await userEvent.click(card);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n}"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    InputComponent,\n    CheckboxComponent,\n    RadioComponent,\n    TextareaComponent,\n    PasswordComponent,\n    SelectComponent,\n    MultiSelectComponent,\n    EmailComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[DefaultTableComponent]"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n    stories: [\n        '../src/**/*.mdx',\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\n        '../projects/ng-lib/src/**/*.mdx',\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\n    ],\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\n    framework: {\n        name: '@storybook/angular',\n        options: {},\n    },\n    docs: {\n        autodocs: 'tag',\n    },\n}"
            },
            {
                "name": "customViewport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    large: {\n        name: 'Large Screen',\n        styles: {\n            width: '1920px',\n            height: '1080px',\n        },\n    },\n    small: {\n        name: 'Small Screen',\n        styles: {\n            width: '800px',\n            height: '963px',\n        },\n    },\n}"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'danger',\n    },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        headers: ['name', 'job', 'date'],\n        rows: mockData,\n        isSelectable: false,\n        isSortable: true,\n        isDraggable: false,\n    },\n}"
            },
            {
                "name": "Draggable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        ...Default.args,\n        isDraggable: true,\n    },\n}"
            },
            {
                "name": "Grouped",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        ...Default.args,\n        groupBy: 'job',\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/input works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/multi-select works!/gi)).toBeTruthy();\n    },\n}"
            },
            {
                "name": "isEqual",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(obj1, obj2) => {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldComponent>",
                "defaultValue": "{\n    component: FieldComponent,\n    title: '(TW) Angular UI / Components / Form / Field',\n    args: {\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\n    },\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldsComponent>",
                "defaultValue": "{\n    component: FieldsComponent,\n    title: '(TW) Angular UI / Components / Form / Fields',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TablesComponent>",
                "defaultValue": "{\n    component: TablesComponent,\n    title: '(TW) Angular UI / Components / Table / Tables',\n\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TableComponent>",
                "defaultValue": "{\n  component: TableComponent,\n  title: 'WIP / TableComponent',\n  decorators: [\n    // moduleMetadata({\n    //   imports: [RouterModule.forRoot([])],\n    // }),\n  ],\n  tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<>",
                "defaultValue": "{\n    component: DragDropExampleComponent,\n    title: '(TW) Angular UI / Directives / Draggable Table',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldListDirective>",
                "defaultValue": "{\n    component: FieldListDirective,\n    title: '(TW) Angular UI / Directives / Form / Field List',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FieldDirectiveComponent>",
                "defaultValue": "{\n    component: FieldDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Form / Field',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HttpClientDirectiveComponent>",
                "defaultValue": "{\n    component: HttpClientDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Http Client',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ListDirectiveComponent>",
                "defaultValue": "{\n    component: ListDirectiveComponent,\n    title: '(TW) Angular UI / Directives / List',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PaginationDirectiveComponent>",
                "defaultValue": "{\n    component: PaginationDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Pagination',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TableExampleComponent>",
                "defaultValue": "{\n    component: TableExampleComponent,\n    title: '(TW) Angular UI / Directives / Selection',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SortableTableExampleComponent>",
                "defaultValue": "{\n    component: SortableTableExampleComponent,\n    title: '(TW) Angular UI / Directives / Sortable Table',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonWrapperComponent>",
                "defaultValue": "{\n    component: ButtonWrapperComponent,\n    title: '(TW) Angular UI / Components / Button',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CardWrapperComponent>",
                "defaultValue": "{\n    component: CardWrapperComponent,\n    title: '(TW) Angular UI / Components / Card',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PillWrapperComponent>",
                "defaultValue": "{\n    component: PillWrapperComponent,\n    title: '(TW) Angular UI / Components / Pill',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SidebarComponent>",
                "defaultValue": "{\n    component: SidebarComponent,\n    title: '(TW) Angular UI / Components / Sidebar',\n    decorators: [\n        // Add any decorators you need (e.g., withModules)\n    ],\n    parameters: {\n        // Add any global parameters here\n    },\n    argTypes: {\n        // Add argTypes as needed\n    },\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CheckboxComponent>",
                "defaultValue": "{\n    component: CheckboxComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Checkbox',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DefaultTableComponent>",
                "defaultValue": "{\n    component: DefaultTableComponent,\n    title: '(TW) Angular UI / Components / Table / Types / Default Table',\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<EmailComponent>",
                "defaultValue": "{\n    component: EmailComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Email',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\n    component: InputComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Text',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MultiSelectComponent>",
                "defaultValue": "{\n    component: MultiSelectComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Select',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PasswordComponent>",
                "defaultValue": "{\n    component: PasswordComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Password',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<RadioComponent>",
                "defaultValue": "{\n    component: RadioComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Radio',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SelectComponent>",
                "defaultValue": "{\n    component: SelectComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Basic Select',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TextareaComponent>",
                "defaultValue": "{\n    component: TextareaComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Textarea',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwTableCardComponent>",
                "defaultValue": "{\n    title: 'Components/TwTableCard',\n    component: TwTableCardComponent,\n    tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwDefaultTableComponent>",
                "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Default Table',\n    component: TwDefaultTableComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwDefaultTableComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
            },
            {
                "name": "mockData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    { name: 'John Doe', job: 'Developer', date: '2024-08-01' },\n    { name: 'Jane Smith', job: 'Designer', date: '2024-08-02' },\n    { name: 'Bob Johnson', job: 'Manager', date: '2024-08-03' },\n]"
            },
            {
                "name": "MultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'multi-select', 'name', 'Name', 'Name', {\n            isMultipleTag: true,\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n    parameters: {\n        viewport: { viewport: customViewport },\n        actions: { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/,\n            },\n        },\n    },\n    decorators: [\n        withThemeByDataAttribute({\n            themes: {\n                light: 'light',\n                dark: 'dark',\n            },\n            defaultTheme: 'light',\n            attributeName: 'data-mode',\n        }),\n        applicationConfig({\n            providers: [provideAnimations()],\n        }),\n    ],\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        fieldConfig: [\n            FieldBuilder.createField('text', 'firstName', '', 'First Name', 'Enter first name', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('text', 'lastName', '', 'Last Name', 'Enter last name', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('password', 'password', '', 'Password', 'Enter password', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('textarea', 'about', '', 'About', 'Enter about', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createOptionsField(\n                'checkbox',\n                'checkbox',\n                'Checkbox',\n                'checkbox place holder',\n                [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                        description: 'Option one description',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                        description: 'Option two description',\n                    },\n                ],\n                {\n                    required: true,\n                }\n            ),\n            FieldBuilder.createField('radio', 'radio', '', 'radio', 'radio', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                ],\n            }),\n            FieldBuilder.createField('select', 'select', '', 'Select', 'Select', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                    {\n                        value: 'optionThree',\n                        label: 'Option Three',\n                        id: '3',\n                    },\n                ],\n            }),\n            FieldBuilder.createField('select', 'multi-select', '', 'Multi Select', 'Multi Select', {\n                isMultipleTag: true,\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                    {\n                        value: 'optionThree',\n                        label: 'Option Three',\n                        id: '3',\n                    },\n                ],\n            }),\n        ],\n        wrapperClass: 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4',\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        tableConfig: TableBuilder.createTable('default-table', ['id', 'defaultTable'], of([{ defaultTable: 'defaultTable' }])),\n        wrapperClass: 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4',\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    height: 'h-auto',\n    title: 'Default Title',\n    caption: 'Default Caption',\n    buttonText: 'Default Button Text',\n    buttonLink: [],\n    headers: ['column1', 'column2', 'column3', 'column4', 'column5'],\n    data: [\n      {\n        column1: 'row1 column1',\n        column2: 'row1 column2',\n        column3: 'row1 column3',\n        column4: ['row1 column4', 'row1 column4', 'row1 column4'],\n        column5: 'row1 column5',\n      },\n      {\n        column1: 'row2 column1',\n        column2: 'row2 column2',\n        column3: 'row2 column3',\n        column4: ['row2 column4', 'row2 column4', 'row2 column4'],\n        column5: 'row2 column5',\n      },\n      {\n        column1: 'row3 column1',\n        column2: 'row3 column2',\n        column3: 'row3 column3',\n        column4: 'row3 column4',\n        column5: 'row3 column5',\n      },\n      {\n        column1: 'row4 column1',\n        column2: 'row4 column2',\n        column3: 'row4 column3',\n        column4: 'row4 column4',\n        column5: 'row4 column5',\n      },\n      {\n        column1: 'row5 column1',\n        column2: 'row5 column2',\n        column3: 'row5 column3',\n        column4: 'row5 column4',\n        column5: 'row5 column5',\n      },\n      {\n        column1: 'row6 column1',\n        column2: 'row6 column2',\n        column3: 'row6 column3',\n        column4: 'row6 column4',\n        column5: 'row6 column5',\n      },\n    ],\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'primary',\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args: any) => ({\n    component: SidebarComponent,\n    props: {\n        ...args,\n        title: 'Sidebar',\n        navigation: [\n            { link: 'home', icon: 'home', text: 'Home' },\n            { link: 'about', icon: 'info', text: 'About' },\n            { link: 'contact', icon: 'mail', text: 'Contact' },\n        ],\n    },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('checkbox', 'checkbox', 'checkbox', 'checkbox', 'checkbox', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        table: TableBuilder.createTable(\n            'default-table',\n            ['id', 'defaultTable'],\n            of([{ defaultTable: ['defaultTable', 'testing', 'third'] }]),\n            {\n                title: 'Default Table',\n                caption: 'This is a default table',\n                buttonText: 'Add Something',\n                buttonLink: ['/'],\n                buttonAction: 'selectedRowsWFieldSelection',\n            }\n        ),\n        showClear: true,\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('email', 'email', 'Email', 'Email', 'Email', { required: true }, '', [Validators.email]),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('password', 'password', 'password', 'password', 'password', {\n            required: true,\n        }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('radio', 'radio', 'radio', 'radio', 'radio', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'select', 'select', 'select', 'select', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('textarea', 'textarea', 'textarea', 'textarea', 'textarea'),\n    },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'secondary',\n    },\n}"
            },
            {
                "name": "Select",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'select', 'name', 'Name', 'Name', {\n            isMultipleTag: false,\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
            },
            {
                "name": "Selectable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        ...Default.args,\n        isSelectable: true,\n    },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'success',\n    },\n}"
            },
            {
                "name": "TableWithAllSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        isSelectable: true,\n        isSortable: true,\n        headers: ['Comments', 'Candidates', 'Offers'],\n        actionColName: ' ',\n        isDraggable: true,\n        rows: [\n            { comments: 'Great candidate', candidates: 'John Doe', offers: 'Accepted' },\n            { comments: 'Needs improvement', candidates: 'Jane Smith', offers: 'Pending' },\n            { comments: 'Excellent skills', candidates: 'Alice Johnson', offers: 'Rejected' },\n            { comments: 'Average performance', candidates: 'Bob Brown', offers: 'Accepted' },\n        ],\n    },\n}"
            },
            {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'warn',\n    },\n}"
            },
            {
                "name": "WithActionColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        ...Default.args,\n        actionColName: 'Actions',\n        actionButton: 'Edit',\n    },\n}"
            },
            {
                "name": "WithActiveLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args: any) => ({\n    component: SidebarComponent,\n    props: {\n        ...args,\n        title: 'Sidebar',\n        navigation: [\n            { link: 'home', icon: 'home', text: 'Home' },\n            { link: 'about', icon: 'info', text: 'About' },\n            { link: 'contact', icon: 'mail', text: 'Contact' },\n        ],\n    },\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AttributeEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Color",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"inherit\" | \"current\" | \"black\" | \"white\" | \"blue-gray\" | \"gray\" | \"brown\" | \"deep-orange\" | \"orange\" | \"amber\" | \"yellow\" | \"lime\" | \"light-green\" | \"green\" | \"teal\" | \"cyan\" | \"light-blue\" | \"blue\" | \"indigo\" | \"deep-purple\" | \"purple\" | \"pink\" | \"red\"",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Field",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "FieldOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "FieldProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "FieldSteps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "ID",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | number",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Identifiable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "RowData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldsComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TablesComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TableComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldListDirective>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FieldDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HttpClientDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ListDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PaginationDirectiveComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TableExampleComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SortableTableExampleComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CardWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PillWrapperComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SidebarComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CheckboxComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DefaultTableComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<EmailComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MultiSelectComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PasswordComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<RadioComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SelectComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextareaComponent>",
                "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwTableCardComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwDefaultTableComponent>",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Table",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "TABLE_TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 201
            },
            {
                "name": "TableProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TYPE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"checkbox\" | \"email\" | \"custom-display\" | \"file\" | \"text\" | \"insight-text\" | \"int\" | \"password\" | \"radio\" | \"slider\" | \"stepper\" | \"select\" | \"textarea\"",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "VALUE",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | string[] | boolean | null",
                "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Variant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"lead\" | \"paragraph\" | \"small\"",
                "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts": [
                {
                    "name": "ButtonActionsTesting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const button = canvasElement.querySelector('adk-button');\n        if (button) {\n            await userEvent.click(button);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n}"
                },
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'danger',\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonWrapperComponent>",
                    "defaultValue": "{\n    component: ButtonWrapperComponent,\n    title: '(TW) Angular UI / Components / Button',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'primary',\n    },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'secondary',\n    },\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'success',\n    },\n}"
                },
                {
                    "name": "Warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n        variant: 'filled',\n        color: 'warn',\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts": [
                {
                    "name": "CardActionsTesting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        disabled: false,\n    },\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        const card = canvasElement.querySelector('adk-card');\n        if (card) {\n            await userEvent.click(card);\n            expect(canvas.getByText(/Content for ng-content goes here/gi)).toBeTruthy();\n        }\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CardWrapperComponent>",
                    "defaultValue": "{\n    component: CardWrapperComponent,\n    title: '(TW) Angular UI / Components / Card',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    InputComponent,\n    CheckboxComponent,\n    RadioComponent,\n    TextareaComponent,\n    PasswordComponent,\n    SelectComponent,\n    MultiSelectComponent,\n    EmailComponent,\n]"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/table.component.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[DefaultTableComponent]"
                }
            ],
            ".storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n    stories: [\n        '../src/**/*.mdx',\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\n        '../projects/ng-lib/src/**/*.mdx',\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\n    ],\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\n    framework: {\n        name: '@storybook/angular',\n        options: {},\n    },\n    docs: {\n        autodocs: 'tag',\n    },\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "customViewport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    large: {\n        name: 'Large Screen',\n        styles: {\n            width: '1920px',\n            height: '1080px',\n        },\n    },\n    small: {\n        name: 'Small Screen',\n        styles: {\n            width: '800px',\n            height: '963px',\n        },\n    },\n}"
                },
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n    parameters: {\n        viewport: { viewport: customViewport },\n        actions: { argTypesRegex: '^on[A-Z].*' },\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/,\n            },\n        },\n    },\n    decorators: [\n        withThemeByDataAttribute({\n            themes: {\n                light: 'light',\n                dark: 'dark',\n            },\n            defaultTheme: 'light',\n            attributeName: 'data-mode',\n        }),\n        applicationConfig({\n            providers: [provideAnimations()],\n        }),\n    ],\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        headers: ['name', 'job', 'date'],\n        rows: mockData,\n        isSelectable: false,\n        isSortable: true,\n        isDraggable: false,\n    },\n}"
                },
                {
                    "name": "Draggable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        ...Default.args,\n        isDraggable: true,\n    },\n}"
                },
                {
                    "name": "Grouped",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        ...Default.args,\n        groupBy: 'job',\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwTableCardComponent>",
                    "defaultValue": "{\n    title: 'Components/TwTableCard',\n    component: TwTableCardComponent,\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "mockData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    { name: 'John Doe', job: 'Developer', date: '2024-08-01' },\n    { name: 'Jane Smith', job: 'Designer', date: '2024-08-02' },\n    { name: 'Bob Johnson', job: 'Manager', date: '2024-08-03' },\n]"
                },
                {
                    "name": "Selectable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        ...Default.args,\n        isSelectable: true,\n    },\n}"
                },
                {
                    "name": "WithActionColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        ...Default.args,\n        actionColName: 'Actions',\n        actionButton: 'Edit',\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field-list.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldListDirective>",
                    "defaultValue": "{\n    component: FieldListDirective,\n    title: '(TW) Angular UI / Directives / Form / Field List',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/field.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldDirectiveComponent>",
                    "defaultValue": "{\n    component: FieldDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Form / Field',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/http-client.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HttpClientDirectiveComponent>",
                    "defaultValue": "{\n    component: HttpClientDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Http Client',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/list.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ListDirectiveComponent>",
                    "defaultValue": "{\n    component: ListDirectiveComponent,\n    title: '(TW) Angular UI / Directives / List',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/pagination.spec works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PaginationDirectiveComponent>",
                    "defaultValue": "{\n    component: PaginationDirectiveComponent,\n    title: '(TW) Angular UI / Directives / Pagination',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/input works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\n    component: InputComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Text',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n    play: async ({ canvasElement }) => {\n        const canvas = within(canvasElement);\n        expect(canvas.getByText(/multi-select works!/gi)).toBeTruthy();\n    },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MultiSelectComponent>",
                    "defaultValue": "{\n    component: MultiSelectComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Select',\n}"
                },
                {
                    "name": "MultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'multi-select', 'name', 'Name', 'Name', {\n            isMultipleTag: true,\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                },
                {
                    "name": "Select",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'select', 'name', 'Name', 'Name', {\n            isMultipleTag: false,\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts": [
                {
                    "name": "isEqual",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(obj1, obj2) => {\n    return JSON.stringify(obj1) === JSON.stringify(obj2);\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldComponent>",
                    "defaultValue": "{\n    component: FieldComponent,\n    title: '(TW) Angular UI / Components / Form / Field',\n    args: {\n        field: FieldBuilder.createField('text', 'text', 'name', 'Name', 'Name', { required: true }),\n    },\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FieldsComponent>",
                    "defaultValue": "{\n    component: FieldsComponent,\n    title: '(TW) Angular UI / Components / Form / Fields',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        fieldConfig: [\n            FieldBuilder.createField('text', 'firstName', '', 'First Name', 'Enter first name', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('text', 'lastName', '', 'Last Name', 'Enter last name', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('password', 'password', '', 'Password', 'Enter password', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createField('textarea', 'about', '', 'About', 'Enter about', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n            }),\n            FieldBuilder.createOptionsField(\n                'checkbox',\n                'checkbox',\n                'Checkbox',\n                'checkbox place holder',\n                [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                        description: 'Option one description',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                        description: 'Option two description',\n                    },\n                ],\n                {\n                    required: true,\n                }\n            ),\n            FieldBuilder.createField('radio', 'radio', '', 'radio', 'radio', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                ],\n            }),\n            FieldBuilder.createField('select', 'select', '', 'Select', 'Select', {\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                    {\n                        value: 'optionThree',\n                        label: 'Option Three',\n                        id: '3',\n                    },\n                ],\n            }),\n            FieldBuilder.createField('select', 'multi-select', '', 'Multi Select', 'Multi Select', {\n                isMultipleTag: true,\n                class: 'sm:col-span-3',\n                required: true,\n                minLength: 3,\n                options: [\n                    {\n                        value: 'optionOne',\n                        label: 'Option One',\n                        id: '1',\n                    },\n                    {\n                        value: 'optionTwo',\n                        label: 'Option Two',\n                        id: '2',\n                    },\n                    {\n                        value: 'optionThree',\n                        label: 'Option Three',\n                        id: '3',\n                    },\n                ],\n            }),\n        ],\n        wrapperClass: 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4',\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TablesComponent>",
                    "defaultValue": "{\n    component: TablesComponent,\n    title: '(TW) Angular UI / Components / Table / Tables',\n\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        tableConfig: TableBuilder.createTable('default-table', ['id', 'defaultTable'], of([{ defaultTable: 'defaultTable' }])),\n        wrapperClass: 'mt-2 grid grid-cols-1 gap-x-4 gap-y-4 p-4',\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TableComponent>",
                    "defaultValue": "{\n  component: TableComponent,\n  title: 'WIP / TableComponent',\n  decorators: [\n    // moduleMetadata({\n    //   imports: [RouterModule.forRoot([])],\n    // }),\n  ],\n  tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    height: 'h-auto',\n    title: 'Default Title',\n    caption: 'Default Caption',\n    buttonText: 'Default Button Text',\n    buttonLink: [],\n    headers: ['column1', 'column2', 'column3', 'column4', 'column5'],\n    data: [\n      {\n        column1: 'row1 column1',\n        column2: 'row1 column2',\n        column3: 'row1 column3',\n        column4: ['row1 column4', 'row1 column4', 'row1 column4'],\n        column5: 'row1 column5',\n      },\n      {\n        column1: 'row2 column1',\n        column2: 'row2 column2',\n        column3: 'row2 column3',\n        column4: ['row2 column4', 'row2 column4', 'row2 column4'],\n        column5: 'row2 column5',\n      },\n      {\n        column1: 'row3 column1',\n        column2: 'row3 column2',\n        column3: 'row3 column3',\n        column4: 'row3 column4',\n        column5: 'row3 column5',\n      },\n      {\n        column1: 'row4 column1',\n        column2: 'row4 column2',\n        column3: 'row4 column3',\n        column4: 'row4 column4',\n        column5: 'row4 column5',\n      },\n      {\n        column1: 'row5 column1',\n        column2: 'row5 column2',\n        column3: 'row5 column3',\n        column4: 'row5 column4',\n        column5: 'row5 column5',\n      },\n      {\n        column1: 'row6 column1',\n        column2: 'row6 column2',\n        column3: 'row6 column3',\n        column4: 'row6 column4',\n        column5: 'row6 column5',\n      },\n    ],\n  },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<>",
                    "defaultValue": "{\n    component: DragDropExampleComponent,\n    title: '(TW) Angular UI / Directives / Draggable Table',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TableExampleComponent>",
                    "defaultValue": "{\n    component: TableExampleComponent,\n    title: '(TW) Angular UI / Directives / Selection',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SortableTableExampleComponent>",
                    "defaultValue": "{\n    component: SortableTableExampleComponent,\n    title: '(TW) Angular UI / Directives / Sortable Table',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PillWrapperComponent>",
                    "defaultValue": "{\n    component: PillWrapperComponent,\n    title: '(TW) Angular UI / Components / Pill',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {},\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SidebarComponent>",
                    "defaultValue": "{\n    component: SidebarComponent,\n    title: '(TW) Angular UI / Components / Sidebar',\n    decorators: [\n        // Add any decorators you need (e.g., withModules)\n    ],\n    parameters: {\n        // Add any global parameters here\n    },\n    argTypes: {\n        // Add argTypes as needed\n    },\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args: any) => ({\n    component: SidebarComponent,\n    props: {\n        ...args,\n        title: 'Sidebar',\n        navigation: [\n            { link: 'home', icon: 'home', text: 'Home' },\n            { link: 'about', icon: 'info', text: 'About' },\n            { link: 'contact', icon: 'mail', text: 'Contact' },\n        ],\n    },\n})"
                },
                {
                    "name": "WithActiveLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args: any) => ({\n    component: SidebarComponent,\n    props: {\n        ...args,\n        title: 'Sidebar',\n        navigation: [\n            { link: 'home', icon: 'home', text: 'Home' },\n            { link: 'about', icon: 'info', text: 'About' },\n            { link: 'contact', icon: 'mail', text: 'Contact' },\n        ],\n    },\n})"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CheckboxComponent>",
                    "defaultValue": "{\n    component: CheckboxComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Checkbox',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('checkbox', 'checkbox', 'checkbox', 'checkbox', 'checkbox', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DefaultTableComponent>",
                    "defaultValue": "{\n    component: DefaultTableComponent,\n    title: '(TW) Angular UI / Components / Table / Types / Default Table',\n    tags: ['autodocs'],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        table: TableBuilder.createTable(\n            'default-table',\n            ['id', 'defaultTable'],\n            of([{ defaultTable: ['defaultTable', 'testing', 'third'] }]),\n            {\n                title: 'Default Table',\n                caption: 'This is a default table',\n                buttonText: 'Add Something',\n                buttonLink: ['/'],\n                buttonAction: 'selectedRowsWFieldSelection',\n            }\n        ),\n        showClear: true,\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<EmailComponent>",
                    "defaultValue": "{\n    component: EmailComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Email',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('email', 'email', 'Email', 'Email', 'Email', { required: true }, '', [Validators.email]),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PasswordComponent>",
                    "defaultValue": "{\n    component: PasswordComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Password',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('password', 'password', 'password', 'password', 'password', {\n            required: true,\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<RadioComponent>",
                    "defaultValue": "{\n    component: RadioComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Radio',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('radio', 'radio', 'radio', 'radio', 'radio', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SelectComponent>",
                    "defaultValue": "{\n    component: SelectComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Basic Select',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('select', 'select', 'select', 'select', 'select', {\n            required: true,\n            options: [\n                { value: '1', label: 'One', id: '1' },\n                { value: '2', label: 'Two', id: '2' },\n            ],\n        }),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TextareaComponent>",
                    "defaultValue": "{\n    component: TextareaComponent,\n    title: '(TW) Angular UI / Components / Form / Types / Textarea',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        field: FieldBuilder.createField('textarea', 'textarea', 'textarea', 'textarea', 'textarea'),\n    },\n}"
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwDefaultTableComponent>",
                    "defaultValue": "{\n    title: 'TailwindUI/Components/Tables/Default Table',\n    component: TwDefaultTableComponent,\n    tags: ['autodocs'],\n    parameters: {\n        layout: 'fullscreen',\n    },\n    decorators: [\n        moduleMetadata({\n            imports: [TwDefaultTableComponent],\n        }),\n        componentWrapperDecorator(\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\n              ${story}\n            </div>`\n        ),\n    ],\n    args: {},\n}"
                },
                {
                    "name": "TableWithAllSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        isSelectable: true,\n        isSortable: true,\n        headers: ['Comments', 'Candidates', 'Offers'],\n        actionColName: ' ',\n        isDraggable: true,\n        rows: [\n            { comments: 'Great candidate', candidates: 'John Doe', offers: 'Accepted' },\n            { comments: 'Needs improvement', candidates: 'Jane Smith', offers: 'Pending' },\n            { comments: 'Excellent skills', candidates: 'Alice Johnson', offers: 'Rejected' },\n            { comments: 'Average performance', candidates: 'Bob Brown', offers: 'Accepted' },\n        ],\n    },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ng-lib/src/lib/tw-form-ui/models/field.ts": [
                {
                    "name": "AttributeEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "Field",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "FieldOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "FieldProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "FieldSteps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/utils/typography.component.ts": [
                {
                    "name": "Color",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"inherit\" | \"current\" | \"black\" | \"white\" | \"blue-gray\" | \"gray\" | \"brown\" | \"deep-orange\" | \"orange\" | \"amber\" | \"yellow\" | \"lime\" | \"light-green\" | \"green\" | \"teal\" | \"cyan\" | \"light-blue\" | \"blue\" | \"indigo\" | \"deep-purple\" | \"purple\" | \"pink\" | \"red\"",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Variant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"lead\" | \"paragraph\" | \"small\"",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/utils/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts": [
                {
                    "name": "ID",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | number",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Identifiable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TABLE_TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 201
                },
                {
                    "name": "TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"checkbox\" | \"email\" | \"custom-display\" | \"file\" | \"text\" | \"insight-text\" | \"int\" | \"password\" | \"radio\" | \"slider\" | \"stepper\" | \"select\" | \"textarea\"",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | string[] | boolean | null",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/identifiable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/models/table.ts": [
                {
                    "name": "RowData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "Table",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "TableProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldsComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TablesComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TableComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldListDirective>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FieldDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HttpClientDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ListDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PaginationDirectiveComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TableExampleComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SortableTableExampleComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CardWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PillWrapperComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SidebarComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CheckboxComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DefaultTableComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<EmailComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MultiSelectComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PasswordComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<RadioComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SelectComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextareaComponent>",
                    "file": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwTableCardComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwDefaultTableComponent>",
                    "file": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/data-source.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDatasource",
                "coveragePercent": 64,
                "coverageCount": "9/14",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/field.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/fields.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/field.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/fields.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/stories/tables.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/tables.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TablesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/tw-components/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/default-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/email.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/checkbox.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/default-table.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/email.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/input.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/multi-select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/password.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/radio.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/select.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/stories/textarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/components/types/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/drag.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDraggableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/drop.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkDroppableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/field-list.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFieldList",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/field.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFields",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/form-group.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkFormGroup",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/http-client.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkHttpClient",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/list.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkList",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/pagination.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkPagination",
                "coveragePercent": 44,
                "coverageCount": "4/9",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/selection.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkSelection",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/sorting.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkSorting",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/sorting.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortableItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stepper.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AdkStepperDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragDropExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/drag-and-drop.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldListDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field-list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/field.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "HttpClientDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/http-client.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/list.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationDirectiveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/pagination.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/selection.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortableTableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/directives/stories/sorting.spec.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/models/field.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FieldBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-form-ui/models/table.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/card/tw-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/pill.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonActionsTesting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CardActionsTesting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/pill.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/stories/sidebar.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActiveLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/pagination.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/models/table.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableState",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Draggable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Grouped",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Selectable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithActionColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/stories/tw-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TableWithAllSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/table-datasource.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableDataSourceService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTableHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/tw-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwDefaultTableComponent",
                "coveragePercent": 3,
                "coverageCount": "1/29",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/draggable.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DraggableUtil",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/expansion-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdkExpansionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/is-equal.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isEqual",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/pagination.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaginationUtil",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sort-rows.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SortRowsUtil",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/sortable-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortableIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/tw-ui/components/table/utils/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwTypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/utils/imperative-observable.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ImperativeObservable",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}