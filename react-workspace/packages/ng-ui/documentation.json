{
    "pipes": [],
    "interfaces": [
        {
            "name": "CheckboxItem",
            "id": "interface-CheckboxItem-78ef7c0bdfddae874837ee1c0aa99f6e675b0cfc8af359ee33a42c2ab90c2f0e46a34818c80e6d37b3862765d62a96e1e1ee88d65d4d4308c5a124ce196b99d5",
            "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nexport interface CheckboxItem {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'tw-checkbox',\r\n    template: `\r\n        @if (isArray(checkbox)) {\r\n        <fieldset>\r\n            <legend class=\"sr-only\">Notifications</legend>\r\n            <div class=\"space-y-5\">\r\n                @for (cb of checkbox; track $index) {\r\n                <div class=\"relative flex items-start\">\r\n                    <div class=\"flex h-6 items-center\">\r\n                        <input\r\n                            [id]=\"getCheckboxId(cb)\"\r\n                            [attr.describedby]=\"getCheckboxId(cb) + '-description'\"\r\n                            [name]=\"getCheckboxName(cb)\"\r\n                            type=\"checkbox\"\r\n                            class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"ml-3 text-sm leading-6\">\r\n                        <label [for]=\"getCheckboxId(cb)\" class=\"font-medium text-gray-900\">{{ getCheckboxName(cb) }}</label>\r\n                        <p [id]=\"getCheckboxId(cb) + '-description'\" class=\"text-gray-500\">{{ getCheckboxDescription(cb) }}</p>\r\n                    </div>\r\n                </div>\r\n                }\r\n            </div>\r\n        </fieldset>\r\n        } @else {\r\n        <div class=\"relative flex items-start\">\r\n            <div class=\"flex h-6 items-center\">\r\n                <input\r\n                    [id]=\"getCheckboxId(checkbox)\"\r\n                    [attr.describedby]=\"getCheckboxId(checkbox) + '-description'\"\r\n                    [name]=\"getCheckboxName(checkbox)\"\r\n                    type=\"checkbox\"\r\n                    class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                />\r\n            </div>\r\n            <div class=\"ml-3 text-sm leading-6\">\r\n                <label [for]=\"getCheckboxId(checkbox)\" class=\"font-medium text-gray-900\">{{ getCheckboxName(checkbox) }}</label>\r\n                <p [id]=\"getCheckboxId(checkbox) + '-description'\" class=\"text-gray-500\">{{ getCheckboxDescription(checkbox) }}</p>\r\n            </div>\r\n        </div>\r\n        }\r\n    `,\r\n    styles: [],\r\n})\r\nexport class TwCheckboxComponent {\r\n    @Input() checkbox: CheckboxItem | CheckboxItem[] = [];\r\n\r\n    isArray(checkbox: CheckboxItem | CheckboxItem[]): checkbox is CheckboxItem[] {\r\n        return Array.isArray(checkbox);\r\n    }\r\n\r\n    getCheckboxId(checkbox: CheckboxItem): string {\r\n        return checkbox.id;\r\n    }\r\n\r\n    getCheckboxName(checkbox: CheckboxItem): string {\r\n        return checkbox.name;\r\n    }\r\n\r\n    getCheckboxDescription(checkbox: CheckboxItem): string {\r\n        return checkbox.description;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RadioItem",
            "id": "interface-RadioItem-e475bb8645187d2277dc9363cd0b9e26402fc5d772efd50c0b00c280da3a57ab19f770eadb56113a0ce0242f1d1277298da387e8c2c30c8c9ea0f223c683ec27",
            "file": "projects/ng-lib/src/lib/modules/types/tw-radio.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nexport interface RadioItem {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'tw-radio',\r\n    template: `\r\n        @if (isArray(radio)) {\r\n        <fieldset aria-label=\"Plan\">\r\n            <div class=\"space-y-5\">\r\n                @for (r of radio; track $index) {\r\n                <div class=\"relative flex items-start\">\r\n                    <div class=\"flex h-6 items-center\">\r\n                        <input\r\n                            [id]=\"r.id\"\r\n                            [attr.aria-describedby]=\"r.id + '-description'\"\r\n                            name=\"plan\"\r\n                            type=\"radio\"\r\n                            class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"ml-3 text-sm leading-6\">\r\n                        <label [for]=\"r.id\" class=\"font-medium text-gray-900\">{{ r.name }}</label>\r\n                        <p [id]=\"r.id + '-description'\" class=\"text-gray-500\">{{ r.description }}</p>\r\n                    </div>\r\n                </div>\r\n                }\r\n            </div>\r\n        </fieldset>\r\n        } @else {\r\n        <div class=\"relative flex items-start\">\r\n            <div class=\"flex h-6 items-center\">\r\n                <input\r\n                    [id]=\"radio.id\"\r\n                    [attr.aria-describedby]=\"radio.id + '-description'\"\r\n                    [name]=\"radio.name\"\r\n                    type=\"radio\"\r\n                    class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                />\r\n            </div>\r\n            <div class=\"ml-3 text-sm leading-6\">\r\n                <label [for]=\"radio.id\" class=\"font-medium text-gray-900\">{{ radio.name }}</label>\r\n                <p [id]=\"radio.id + '-description'\" class=\"text-gray-500\">{{ radio.description }}</p>\r\n            </div>\r\n        </div>\r\n        }\r\n    `,\r\n    styles: [],\r\n})\r\nexport class TwRadioComponent {\r\n    @Input() radio: RadioItem | RadioItem[] = [];\r\n\r\n    isArray(radio: RadioItem | RadioItem[]): radio is RadioItem[] {\r\n        return Array.isArray(radio);\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "NgLibService",
            "id": "injectable-NgLibService-5ce8a56c30ee465dda2f8d03d19cab0bddeba786ea2c77a895909536a25bf003674bf21dbc27d2ef00ef2404728acaac2f0aeb7ae3ece49565a41407ba9b373c",
            "file": "projects/ng-lib/src/lib/ng-lib.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgLibService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "NgLibComponent",
            "id": "component-NgLibComponent-520226f02c45100f17163e4cac6d30f8ba214360273e7491e8b5e256f7412d280f8549501483018e7970c7ccb63541ebd6c750abdb5bef3f1580c091bfac48a1",
            "file": "projects/ng-lib/src/lib/ng-lib.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-ng-lib",
            "styleUrls": [],
            "styles": [
                ""
            ],
            "template": "<p>\n  ng-lib works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-ng-lib',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <p>\r\n      ng-lib works!\r\n    </p>\r\n  `,\r\n  styles: ``\r\n})\r\nexport class NgLibComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n",
            "extends": []
        },
        {
            "name": "TwCheckboxComponent",
            "id": "component-TwCheckboxComponent-78ef7c0bdfddae874837ee1c0aa99f6e675b0cfc8af359ee33a42c2ab90c2f0e46a34818c80e6d37b3862765d62a96e1e1ee88d65d4d4308c5a124ce196b99d5",
            "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-checkbox",
            "styleUrls": [],
            "styles": [],
            "template": "@if (isArray(checkbox)) {\n<fieldset>\n    <legend class=\"sr-only\">Notifications</legend>\n    <div class=\"space-y-5\">\n        @for (cb of checkbox; track $index) {\n        <div class=\"relative flex items-start\">\n            <div class=\"flex h-6 items-center\">\n                <input\n                    [id]=\"getCheckboxId(cb)\"\n                    [attr.describedby]=\"getCheckboxId(cb) + '-description'\"\n                    [name]=\"getCheckboxName(cb)\"\n                    type=\"checkbox\"\n                    class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                />\n            </div>\n            <div class=\"ml-3 text-sm leading-6\">\n                <label [for]=\"getCheckboxId(cb)\" class=\"font-medium text-gray-900\">{{ getCheckboxName(cb) }}</label>\n                <p [id]=\"getCheckboxId(cb) + '-description'\" class=\"text-gray-500\">{{ getCheckboxDescription(cb) }}</p>\n            </div>\n        </div>\n        }\n    </div>\n</fieldset>\n} @else {\n<div class=\"relative flex items-start\">\n    <div class=\"flex h-6 items-center\">\n        <input\n            [id]=\"getCheckboxId(checkbox)\"\n            [attr.describedby]=\"getCheckboxId(checkbox) + '-description'\"\n            [name]=\"getCheckboxName(checkbox)\"\n            type=\"checkbox\"\n            class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n        />\n    </div>\n    <div class=\"ml-3 text-sm leading-6\">\n        <label [for]=\"getCheckboxId(checkbox)\" class=\"font-medium text-gray-900\">{{ getCheckboxName(checkbox) }}</label>\n        <p [id]=\"getCheckboxId(checkbox) + '-description'\" class=\"text-gray-500\">{{ getCheckboxDescription(checkbox) }}</p>\n    </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkbox",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "CheckboxItem | CheckboxItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getCheckboxDescription",
                    "args": [
                        {
                            "name": "checkbox",
                            "type": "CheckboxItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkbox",
                            "type": "CheckboxItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCheckboxId",
                    "args": [
                        {
                            "name": "checkbox",
                            "type": "CheckboxItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkbox",
                            "type": "CheckboxItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCheckboxName",
                    "args": [
                        {
                            "name": "checkbox",
                            "type": "CheckboxItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkbox",
                            "type": "CheckboxItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isArray",
                    "args": [
                        {
                            "name": "checkbox",
                            "type": "CheckboxItem | CheckboxItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CheckboxItem[]",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkbox",
                            "type": "CheckboxItem | CheckboxItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nexport interface CheckboxItem {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'tw-checkbox',\r\n    template: `\r\n        @if (isArray(checkbox)) {\r\n        <fieldset>\r\n            <legend class=\"sr-only\">Notifications</legend>\r\n            <div class=\"space-y-5\">\r\n                @for (cb of checkbox; track $index) {\r\n                <div class=\"relative flex items-start\">\r\n                    <div class=\"flex h-6 items-center\">\r\n                        <input\r\n                            [id]=\"getCheckboxId(cb)\"\r\n                            [attr.describedby]=\"getCheckboxId(cb) + '-description'\"\r\n                            [name]=\"getCheckboxName(cb)\"\r\n                            type=\"checkbox\"\r\n                            class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"ml-3 text-sm leading-6\">\r\n                        <label [for]=\"getCheckboxId(cb)\" class=\"font-medium text-gray-900\">{{ getCheckboxName(cb) }}</label>\r\n                        <p [id]=\"getCheckboxId(cb) + '-description'\" class=\"text-gray-500\">{{ getCheckboxDescription(cb) }}</p>\r\n                    </div>\r\n                </div>\r\n                }\r\n            </div>\r\n        </fieldset>\r\n        } @else {\r\n        <div class=\"relative flex items-start\">\r\n            <div class=\"flex h-6 items-center\">\r\n                <input\r\n                    [id]=\"getCheckboxId(checkbox)\"\r\n                    [attr.describedby]=\"getCheckboxId(checkbox) + '-description'\"\r\n                    [name]=\"getCheckboxName(checkbox)\"\r\n                    type=\"checkbox\"\r\n                    class=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                />\r\n            </div>\r\n            <div class=\"ml-3 text-sm leading-6\">\r\n                <label [for]=\"getCheckboxId(checkbox)\" class=\"font-medium text-gray-900\">{{ getCheckboxName(checkbox) }}</label>\r\n                <p [id]=\"getCheckboxId(checkbox) + '-description'\" class=\"text-gray-500\">{{ getCheckboxDescription(checkbox) }}</p>\r\n            </div>\r\n        </div>\r\n        }\r\n    `,\r\n    styles: [],\r\n})\r\nexport class TwCheckboxComponent {\r\n    @Input() checkbox: CheckboxItem | CheckboxItem[] = [];\r\n\r\n    isArray(checkbox: CheckboxItem | CheckboxItem[]): checkbox is CheckboxItem[] {\r\n        return Array.isArray(checkbox);\r\n    }\r\n\r\n    getCheckboxId(checkbox: CheckboxItem): string {\r\n        return checkbox.id;\r\n    }\r\n\r\n    getCheckboxName(checkbox: CheckboxItem): string {\r\n        return checkbox.name;\r\n    }\r\n\r\n    getCheckboxDescription(checkbox: CheckboxItem): string {\r\n        return checkbox.description;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TwRadioComponent",
            "id": "component-TwRadioComponent-e475bb8645187d2277dc9363cd0b9e26402fc5d772efd50c0b00c280da3a57ab19f770eadb56113a0ce0242f1d1277298da387e8c2c30c8c9ea0f223c683ec27",
            "file": "projects/ng-lib/src/lib/modules/types/tw-radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tw-radio",
            "styleUrls": [],
            "styles": [],
            "template": "@if (isArray(radio)) {\n<fieldset aria-label=\"Plan\">\n    <div class=\"space-y-5\">\n        @for (r of radio; track $index) {\n        <div class=\"relative flex items-start\">\n            <div class=\"flex h-6 items-center\">\n                <input\n                    [id]=\"r.id\"\n                    [attr.aria-describedby]=\"r.id + '-description'\"\n                    name=\"plan\"\n                    type=\"radio\"\n                    class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                />\n            </div>\n            <div class=\"ml-3 text-sm leading-6\">\n                <label [for]=\"r.id\" class=\"font-medium text-gray-900\">{{ r.name }}</label>\n                <p [id]=\"r.id + '-description'\" class=\"text-gray-500\">{{ r.description }}</p>\n            </div>\n        </div>\n        }\n    </div>\n</fieldset>\n} @else {\n<div class=\"relative flex items-start\">\n    <div class=\"flex h-6 items-center\">\n        <input\n            [id]=\"radio.id\"\n            [attr.aria-describedby]=\"radio.id + '-description'\"\n            [name]=\"radio.name\"\n            type=\"radio\"\n            class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n        />\n    </div>\n    <div class=\"ml-3 text-sm leading-6\">\n        <label [for]=\"radio.id\" class=\"font-medium text-gray-900\">{{ radio.name }}</label>\n        <p [id]=\"radio.id + '-description'\" class=\"text-gray-500\">{{ radio.description }}</p>\n    </div>\n</div>\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "radio",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "RadioItem | RadioItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isArray",
                    "args": [
                        {
                            "name": "radio",
                            "type": "RadioItem | RadioItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RadioItem[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "radio",
                            "type": "RadioItem | RadioItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nexport interface RadioItem {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\n@Component({\r\n    standalone: true,\r\n    selector: 'tw-radio',\r\n    template: `\r\n        @if (isArray(radio)) {\r\n        <fieldset aria-label=\"Plan\">\r\n            <div class=\"space-y-5\">\r\n                @for (r of radio; track $index) {\r\n                <div class=\"relative flex items-start\">\r\n                    <div class=\"flex h-6 items-center\">\r\n                        <input\r\n                            [id]=\"r.id\"\r\n                            [attr.aria-describedby]=\"r.id + '-description'\"\r\n                            name=\"plan\"\r\n                            type=\"radio\"\r\n                            class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"ml-3 text-sm leading-6\">\r\n                        <label [for]=\"r.id\" class=\"font-medium text-gray-900\">{{ r.name }}</label>\r\n                        <p [id]=\"r.id + '-description'\" class=\"text-gray-500\">{{ r.description }}</p>\r\n                    </div>\r\n                </div>\r\n                }\r\n            </div>\r\n        </fieldset>\r\n        } @else {\r\n        <div class=\"relative flex items-start\">\r\n            <div class=\"flex h-6 items-center\">\r\n                <input\r\n                    [id]=\"radio.id\"\r\n                    [attr.aria-describedby]=\"radio.id + '-description'\"\r\n                    [name]=\"radio.name\"\r\n                    type=\"radio\"\r\n                    class=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\r\n                />\r\n            </div>\r\n            <div class=\"ml-3 text-sm leading-6\">\r\n                <label [for]=\"radio.id\" class=\"font-medium text-gray-900\">{{ radio.name }}</label>\r\n                <p [id]=\"radio.id + '-description'\" class=\"text-gray-500\">{{ radio.description }}</p>\r\n            </div>\r\n        </div>\r\n        }\r\n    `,\r\n    styles: [],\r\n})\r\nexport class TwRadioComponent {\r\n    @Input() radio: RadioItem | RadioItem[] = [];\r\n\r\n    isArray(radio: RadioItem | RadioItem[]): radio is RadioItem[] {\r\n        return Array.isArray(radio);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "CheckboxGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        checkbox: [\r\n            { id: 'comments', name: 'Comments', description: 'Get notified when someone posts a comment on a posting.' },\r\n            { id: 'candidates', name: 'Candidates', description: 'Get notified when a candidate applies for a job.' },\r\n            { id: 'offers', name: 'Offers', description: 'Get notified when a candidate accepts or rejects an offer.' },\r\n        ] as CheckboxItem[],\r\n    },\r\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\r\n    stories: [\r\n        '../src/**/*.mdx',\r\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\r\n        '../projects/ng-lib/src/**/*.mdx',\r\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\r\n    ],\r\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\r\n    framework: {\r\n        name: '@storybook/angular',\r\n        options: {},\r\n    },\r\n    docs: {\r\n        autodocs: 'tag',\r\n    },\r\n}"
            },
            {
                "name": "customViewport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    large: {\r\n        name: 'Large Screen',\r\n        styles: {\r\n            width: '1920px',\r\n            height: '1080px',\r\n        },\r\n    },\r\n    small: {\r\n        name: 'Small Screen',\r\n        styles: {\r\n            width: '800px',\r\n            height: '963px',\r\n        },\r\n    },\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: Button,\r\n  tags: ['autodocs'],\r\n  render: (args: Button) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: Header,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  render: (args) => ({ props: args }),\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: Page,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button, Header],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwCheckboxComponent>",
                "defaultValue": "{\r\n    title: 'TailwindUI/Field/Types/TwCheckboxComponent',\r\n    component: TwCheckboxComponent,\r\n    tags: ['autodocs'],\r\n    parameters: {\r\n        layout: 'fullscreen',\r\n    },\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [TwCheckboxComponent],\r\n        }),\r\n        componentWrapperDecorator(\r\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\r\n              <div style=\"width: '80%'; margin: '0 auto'\">\r\n              ${story}\r\n              </div>\r\n            </div>`\r\n        ),\r\n    ],\r\n    args: {},\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TwRadioComponent>",
                "defaultValue": "{\r\n    title: 'TailwindUI/Field/Types/TwRadioComponent',\r\n    component: TwRadioComponent,\r\n    tags: ['autodocs'],\r\n    parameters: {\r\n        layout: 'fullscreen',\r\n    },\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [TwRadioComponent],\r\n        }),\r\n        componentWrapperDecorator(\r\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\r\n              <div style=\"width: '80%'; margin: '0 auto'\">\r\n              ${story}\r\n              </div>\r\n            </div>`\r\n        ),\r\n    ],\r\n    args: {},\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n    parameters: {\r\n        viewport: { viewport: customViewport },\r\n        actions: { argTypesRegex: '^on[A-Z].*' },\r\n        controls: {\r\n            matchers: {\r\n                color: /(background|color)$/i,\r\n                date: /Date$/,\r\n            },\r\n        },\r\n    },\r\n    decorators: [\r\n        withThemeByDataAttribute({\r\n            themes: {\r\n                light: 'light',\r\n                dark: 'dark',\r\n            },\r\n            defaultTheme: 'light',\r\n            attributeName: 'data-mode',\r\n        }),\r\n    ],\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "RadioGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        radio: [\r\n            { id: 'comments', name: 'Comments', description: 'Get notified when someone posts a comment on a posting.' },\r\n            { id: 'candidates', name: 'Candidates', description: 'Get notified when a candidate applies for a job.' },\r\n            { id: 'offers', name: 'Offers', description: 'Get notified when a candidate accepts or rejects an offer.' },\r\n        ] as RadioItem[],\r\n    },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "SingleCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        checkbox: { id: 'newsletter', name: 'Newsletter', description: 'Get notified when there is a new newsletter.' } as CheckboxItem,\r\n    },\r\n}"
            },
            {
                "name": "SingleRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n    args: {\r\n        radio: { id: 'newsletter', name: 'Newsletter', description: 'Get notified when there is a new newsletter.' } as RadioItem,\r\n    },\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwCheckboxComponent>",
                "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TwRadioComponent>",
                "file": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts": [
                {
                    "name": "CheckboxGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        checkbox: [\r\n            { id: 'comments', name: 'Comments', description: 'Get notified when someone posts a comment on a posting.' },\r\n            { id: 'candidates', name: 'Candidates', description: 'Get notified when a candidate applies for a job.' },\r\n            { id: 'offers', name: 'Offers', description: 'Get notified when a candidate accepts or rejects an offer.' },\r\n        ] as CheckboxItem[],\r\n    },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwCheckboxComponent>",
                    "defaultValue": "{\r\n    title: 'TailwindUI/Field/Types/TwCheckboxComponent',\r\n    component: TwCheckboxComponent,\r\n    tags: ['autodocs'],\r\n    parameters: {\r\n        layout: 'fullscreen',\r\n    },\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [TwCheckboxComponent],\r\n        }),\r\n        componentWrapperDecorator(\r\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\r\n              <div style=\"width: '80%'; margin: '0 auto'\">\r\n              ${story}\r\n              </div>\r\n            </div>`\r\n        ),\r\n    ],\r\n    args: {},\r\n}"
                },
                {
                    "name": "SingleCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        checkbox: { id: 'newsletter', name: 'Newsletter', description: 'Get notified when there is a new newsletter.' } as CheckboxItem,\r\n    },\r\n}"
                }
            ],
            ".storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\r\n    stories: [\r\n        '../src/**/*.mdx',\r\n        '../src/**/*.stories.@(js|jsx|ts|tsx)',\r\n        '../projects/ng-lib/src/**/*.mdx',\r\n        '../projects/ng-lib/src/**/*.stories.@(js|jsx|ts|tsx)',\r\n    ],\r\n    addons: ['@storybook/addon-links', '@storybook/addon-essentials', '@storybook/addon-interactions'],\r\n    framework: {\r\n        name: '@storybook/angular',\r\n        options: {},\r\n    },\r\n    docs: {\r\n        autodocs: 'tag',\r\n    },\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "customViewport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    large: {\r\n        name: 'Large Screen',\r\n        styles: {\r\n            width: '1920px',\r\n            height: '1080px',\r\n        },\r\n    },\r\n    small: {\r\n        name: 'Small Screen',\r\n        styles: {\r\n            width: '800px',\r\n            height: '963px',\r\n        },\r\n    },\r\n}"
                },
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n    parameters: {\r\n        viewport: { viewport: customViewport },\r\n        actions: { argTypesRegex: '^on[A-Z].*' },\r\n        controls: {\r\n            matchers: {\r\n                color: /(background|color)$/i,\r\n                date: /Date$/,\r\n            },\r\n        },\r\n    },\r\n    decorators: [\r\n        withThemeByDataAttribute({\r\n            themes: {\r\n                light: 'light',\r\n                dark: 'dark',\r\n            },\r\n            defaultTheme: 'light',\r\n            attributeName: 'data-mode',\r\n        }),\r\n    ],\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: Button,\r\n  tags: ['autodocs'],\r\n  render: (args: Button) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: Header,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  render: (args) => ({ props: args }),\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: Page,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button, Header],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n}"
                }
            ],
            "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TwRadioComponent>",
                    "defaultValue": "{\r\n    title: 'TailwindUI/Field/Types/TwRadioComponent',\r\n    component: TwRadioComponent,\r\n    tags: ['autodocs'],\r\n    parameters: {\r\n        layout: 'fullscreen',\r\n    },\r\n    decorators: [\r\n        moduleMetadata({\r\n            imports: [TwRadioComponent],\r\n        }),\r\n        componentWrapperDecorator(\r\n            (story) => `<div style=\"margin: 3em; display: flex; justify-content: center; align-items: center\">\r\n              <div style=\"width: '80%'; margin: '0 auto'\">\r\n              ${story}\r\n              </div>\r\n            </div>`\r\n        ),\r\n    ],\r\n    args: {},\r\n}"
                },
                {
                    "name": "RadioGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        radio: [\r\n            { id: 'comments', name: 'Comments', description: 'Get notified when someone posts a comment on a posting.' },\r\n            { id: 'candidates', name: 'Candidates', description: 'Get notified when a candidate applies for a job.' },\r\n            { id: 'offers', name: 'Offers', description: 'Get notified when a candidate accepts or rejects an offer.' },\r\n        ] as RadioItem[],\r\n    },\r\n}"
                },
                {
                    "name": "SingleRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n    args: {\r\n        radio: { id: 'newsletter', name: 'Newsletter', description: 'Get notified when there is a new newsletter.' } as RadioItem,\r\n    },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwCheckboxComponent>",
                    "file": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TwRadioComponent>",
                    "file": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customViewport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-checkbox.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckboxItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TwRadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-radio.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RadioItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RadioGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/modules/types/tw-radio.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/ng-lib.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgLibComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-lib/src/lib/ng-lib.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NgLibService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}